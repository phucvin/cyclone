;; This file was automatically generated by the Cyclone Scheme compiler
((with-hash-salt lambda (expr$194$209 rename$195$210 compare$196$211) (car ((lambda (tmp$213$215) (if tmp$213$215 tmp$213$215 (cons (error/loc "no expansion for" expr$194$209) #f))) ((lambda (v.1$202$216) (if (pair? v.1$202$216) ((lambda (v.2$203$218) ((lambda (new-salt$219) ((lambda (v.3$204$220) (if (pair? v.3$204$220) ((lambda (v.4$205$222) ((lambda (hash-func$223) ((lambda (v.5$206$224) (if (pair? v.5$206$224) ((lambda (v.6$207$226) ((lambda (obj$227) ((lambda (v.7$208$228) (if (null? v.7$208$228) (cons (cons-source (rename$195$210 (quote parameterize)) (cons-source (cons-source (cons-source (rename$195$210 (quote %salt%)) (cons-source new-salt$219 (quote ()) (quote (new-salt))) (quote (%salt% new-salt))) (quote ()) (quote ((%salt% new-salt)))) (cons-source (cons-source hash-func$223 (cons-source obj$227 (quote ()) (quote (obj))) (quote (hash-func obj))) (quote ()) (quote ((hash-func obj)))) (quote (((%salt% new-salt)) (hash-func obj)))) (quote (parameterize ((%salt% new-salt)) (hash-func obj)))) #f) #f)) (cdr v.5$206$224))) v.6$207$226)) (car v.5$206$224)) #f)) (cdr v.3$204$220))) v.4$205$222)) (car v.3$204$220)) #f)) (cdr v.1$202$216))) v.2$203$218)) (car v.1$202$216)) #f)) (cdr expr$194$209))))) (hash-salt lambda (expr$167$176 rename$168$177 compare$169$178) (car ((lambda (tmp$180$182) (if tmp$180$182 tmp$180$182 (cons (error/loc "no expansion for" expr$167$176) #f))) ((lambda (v.1$175$183) (if (null? v.1$175$183) (cons (cons-source (rename$168$177 (quote %salt%)) (quote ()) (quote (%salt%))) #f) #f)) (cdr expr$167$176))))) (hash-bound lambda (expr$140$149 rename$141$150 compare$142$151) (car ((lambda (tmp$153$155) (if tmp$153$155 tmp$153$155 (cons (error/loc "no expansion for" expr$140$149) #f))) ((lambda (v.1$148$156) (if (null? v.1$148$156) (cons 33554432 #f) #f)) (cdr expr$140$149))))) (comparator-if<=> lambda (expr$5$37 rename$6$38 compare$7$39) (car ((lambda (tmp$41$43) (if tmp$41$43 tmp$41$43 ((lambda (tmp$45$47) (if tmp$45$47 tmp$45$47 (cons (error/loc "no expansion for" expr$5$37) #f))) ((lambda (v.12$24$48) (if (pair? v.12$24$48) ((lambda (v.13$25$50) ((lambda (comparator$51) ((lambda (v.14$26$52) (if (pair? v.14$26$52) ((lambda (v.15$27$54) ((lambda (a$55) ((lambda (v.16$28$56) (if (pair? v.16$28$56) ((lambda (v.17$29$58) ((lambda (b$59) ((lambda (v.18$30$60) (if (pair? v.18$30$60) ((lambda (v.19$31$62) ((lambda (less$63) ((lambda (v.20$32$64) (if (pair? v.20$32$64) ((lambda (v.21$33$66) ((lambda (equal$67) ((lambda (v.22$34$68) (if (pair? v.22$34$68) ((lambda (v.23$35$70) ((lambda (greater$71) ((lambda (v.24$36$72) (if (null? v.24$36$72) (cons (cons-source (rename$6$38 (quote cond)) (cons-source (cons-source (cons-source (rename$6$38 (quote =?)) (cons-source comparator$51 (cons-source a$55 (cons-source b$59 (quote ()) (quote (b))) (quote (a b))) (quote (comparator a b))) (quote (=? comparator a b))) (cons-source equal$67 (quote ()) (quote (equal))) (quote ((=? comparator a b) equal))) (cons-source (cons-source (cons-source (rename$6$38 (quote <?)) (cons-source comparator$51 (cons-source a$55 (cons-source b$59 (quote ()) (quote (b))) (quote (a b))) (quote (comparator a b))) (quote (<? comparator a b))) (cons-source less$63 (quote ()) (quote (less))) (quote ((<? comparator a b) less))) (cons-source (cons-source (rename$6$38 (quote else)) (cons-source greater$71 (quote ()) (quote (greater))) (quote (else greater))) (quote ()) (quote ((else greater)))) (quote (((<? comparator a b) less) (else greater)))) (quote (((=? comparator a b) equal) ((<? comparator a b) less) (else greater)))) (quote (cond ((=? comparator a b) equal) ((<? comparator a b) less) (else greater)))) #f) #f)) (cdr v.22$34$68))) v.23$35$70)) (car v.22$34$68)) #f)) (cdr v.20$32$64))) v.21$33$66)) (car v.20$32$64)) #f)) (cdr v.18$30$60))) v.19$31$62)) (car v.18$30$60)) #f)) (cdr v.16$28$56))) v.17$29$58)) (car v.16$28$56)) #f)) (cdr v.14$26$52))) v.15$27$54)) (car v.14$26$52)) #f)) (cdr v.12$24$48))) v.13$25$50)) (car v.12$24$48)) #f)) (cdr expr$5$37))))) ((lambda (v.1$13$74) (if (pair? v.1$13$74) ((lambda (v.2$14$76) ((lambda (a$77) ((lambda (v.3$15$78) (if (pair? v.3$15$78) ((lambda (v.4$16$80) ((lambda (b$81) ((lambda (v.5$17$82) (if (pair? v.5$17$82) ((lambda (v.6$18$84) ((lambda (less$85) ((lambda (v.7$19$86) (if (pair? v.7$19$86) ((lambda (v.8$20$88) ((lambda (equal$89) ((lambda (v.9$21$90) (if (pair? v.9$21$90) ((lambda (v.10$22$92) ((lambda (greater$93) ((lambda (v.11$23$94) (if (null? v.11$23$94) (cons (cons-source (rename$6$38 (quote comparator-if<=>)) (cons-source (cons-source (rename$6$38 (quote make-default-comparator)) (quote ()) (quote (make-default-comparator))) (cons-source a$77 (cons-source b$81 (cons-source less$85 (cons-source equal$89 (cons-source greater$93 (quote ()) (quote (greater))) (quote (equal greater))) (quote (less equal greater))) (quote (b less equal greater))) (quote (a b less equal greater))) (quote ((make-default-comparator) a b less equal greater))) (quote (comparator-if<=> (make-default-comparator) a b less equal greater))) #f) #f)) (cdr v.9$21$90))) v.10$22$92)) (car v.9$21$90)) #f)) (cdr v.7$19$86))) v.8$20$88)) (car v.7$19$86)) #f)) (cdr v.5$17$82))) v.6$18$84)) (car v.5$17$82)) #f)) (cdr v.3$15$78))) v.4$16$80)) (car v.3$15$78)) #f)) (cdr v.1$13$74))) v.2$14$76)) (car v.1$13$74)) #f)) (cdr expr$5$37))))))