;; This file was automatically generated by the Cyclone Scheme compiler
((let-vector-start+end lambda (expr$449$472 rename$450$473 compare$451$474) (car ((lambda (tmp$476$478) (if tmp$476$478 tmp$476$478 (cons (error/loc "no expansion for" expr$449$472) #f))) ((lambda (v.1$457$479) (if (pair? v.1$457$479) ((lambda (v.2$458$481) ((lambda (?callee$482) ((lambda (v.3$459$483) (if (pair? v.3$459$483) ((lambda (v.4$460$485) ((lambda (?vec$486) ((lambda (v.5$461$487) (if (pair? v.5$461$487) ((lambda (v.6$462$489) ((lambda (?args$490) ((lambda (v.7$463$491) (if (pair? v.7$463$491) ((lambda (v.8$464$493) (if (pair? v.8$464$493) ((lambda (v.9$465$495) ((lambda (?start$496) ((lambda (v.10$466$497) (if (pair? v.10$466$497) ((lambda (v.11$467$499) ((lambda (?end$500) ((lambda (v.12$468$501) (if (null? v.12$468$501) ((lambda (v.13$469$503) (if (pair? v.13$469$503) ((lambda (v.14$470$505) ((lambda (?body1$506) ((lambda (v.15$471$507) (if (list? v.15$471$507) ((lambda (?body2$509) (cons (cons-source (rename$450$473 (quote let)) (cons-source (cons-source (cons-source ?vec$486 (cons-source (cons-source (rename$450$473 (quote check-type)) (cons-source (rename$450$473 (quote vector?)) (cons-source ?vec$486 (cons-source ?callee$482 (quote ()) (quote (?callee))) (quote (?vec ?callee))) (quote (vector? ?vec ?callee))) (quote (check-type vector? ?vec ?callee))) (quote ()) (quote ((check-type vector? ?vec ?callee)))) (quote (?vec (check-type vector? ?vec ?callee)))) (quote ()) (quote ((?vec (check-type vector? ?vec ?callee))))) (cons-source (cons-source (rename$450$473 (quote receive)) (cons-source (cons-source ?start$496 (cons-source ?end$500 (quote ()) (quote (?end))) (quote (?start ?end))) (cons-source (cons-source (rename$450$473 (quote vector-parse-start+end)) (cons-source ?vec$486 (cons-source ?args$490 (cons-source (cons-source (rename$450$473 (quote quote)) (cons-source ?start$496 (quote ()) (quote (?start))) (quote (quote ?start))) (cons-source (cons-source (rename$450$473 (quote quote)) (cons-source ?end$500 (quote ()) (quote (?end))) (quote (quote ?end))) (cons-source ?callee$482 (quote ()) (quote (?callee))) (quote ((quote ?end) ?callee))) (quote ((quote ?start) (quote ?end) ?callee))) (quote (?args (quote ?start) (quote ?end) ?callee))) (quote (?vec ?args (quote ?start) (quote ?end) ?callee))) (quote (vector-parse-start+end ?vec ?args (quote ?start) (quote ?end) ?callee))) (cons-source ?body1$506 ?body2$509 (quote (?body1 ?body2 ...))) (quote ((vector-parse-start+end ?vec ?args (quote ?start) (quote ?end) ?callee) ?body1 ?body2 ...))) (quote ((?start ?end) (vector-parse-start+end ?vec ?args (quote ?start) (quote ?end) ?callee) ?body1 ?body2 ...))) (quote (receive (?start ?end) (vector-parse-start+end ?vec ?args (quote ?start) (quote ?end) ?callee) ?body1 ?body2 ...))) (quote ()) (quote ((receive (?start ?end) (vector-parse-start+end ?vec ?args (quote ?start) (quote ?end) ?callee) ?body1 ?body2 ...)))) (quote (((?vec (check-type vector? ?vec ?callee))) (receive (?start ?end) (vector-parse-start+end ?vec ?args (quote ?start) (quote ?end) ?callee) ?body1 ?body2 ...)))) (quote (let ((?vec (check-type vector? ?vec ?callee))) (receive (?start ?end) (vector-parse-start+end ?vec ?args (quote ?start) (quote ?end) ?callee) ?body1 ?body2 ...)))) #f)) v.15$471$507) #f)) (cdr v.13$469$503))) v.14$470$505)) (car v.13$469$503)) #f)) (cdr v.7$463$491)) #f)) (cdr v.10$466$497))) v.11$467$499)) (car v.10$466$497)) #f)) (cdr v.8$464$493))) v.9$465$495)) (car v.8$464$493)) #f)) (car v.7$463$491)) #f)) (cdr v.5$461$487))) v.6$462$489)) (car v.5$461$487)) #f)) (cdr v.3$459$483))) v.4$460$485)) (car v.3$459$483)) #f)) (cdr v.1$457$479))) v.2$458$481)) (car v.1$457$479)) #f)) (cdr expr$449$472))))) (let*-optionals:aux lambda (expr$196$228 rename$197$229 compare$198$230) (car ((lambda (tmp$232$234) (if tmp$232$234 tmp$232$234 ((lambda (tmp$236$238) (if tmp$236$238 tmp$236$238 (cons (error/loc "no expansion for" expr$196$228) #f))) ((lambda (v.10$213$239) (if (pair? v.10$213$239) ((lambda (v.11$214$241) ((lambda (?orig-args-var$242) ((lambda (v.12$215$243) (if (pair? v.12$215$243) ((lambda (v.13$216$245) ((lambda (?args-var$246) ((lambda (v.14$217$247) (if (pair? v.14$217$247) ((lambda (v.15$218$249) (if (pair? v.15$218$249) ((lambda (v.16$219$251) (if (pair? v.16$219$251) ((lambda (v.17$220$253) ((lambda (?var$254) ((lambda (v.18$221$255) (if (pair? v.18$221$255) ((lambda (v.19$222$257) ((lambda (?default$258) ((lambda (v.20$223$259) (if (null? v.20$223$259) ((lambda (v.21$224$261) (if (list? v.21$224$261) ((lambda (?more$263) ((lambda (v.22$225$264) (if (pair? v.22$225$264) ((lambda (v.23$226$266) ((lambda (?body1$267) ((lambda (v.24$227$268) (if (list? v.24$227$268) ((lambda (?body2$270) (cons (cons-source (rename$197$229 (quote if)) (cons-source (cons-source (rename$197$229 (quote null?)) (cons-source ?args-var$246 (quote ()) (quote (?args-var))) (quote (null? ?args-var))) (cons-source (cons-source (rename$197$229 (quote let*)) (cons-source (cons-source (cons-source ?var$254 (cons-source ?default$258 (quote ()) (quote (?default))) (quote (?var ?default))) ?more$263 (quote ((?var ?default) ?more ...))) (cons-source ?body1$267 ?body2$270 (quote (?body1 ?body2 ...))) (quote (((?var ?default) ?more ...) ?body1 ?body2 ...))) (quote (let* ((?var ?default) ?more ...) ?body1 ?body2 ...))) (cons-source (cons-source (rename$197$229 (quote let)) (cons-source (cons-source (cons-source ?var$254 (cons-source (cons-source (rename$197$229 (quote car)) (cons-source ?args-var$246 (quote ()) (quote (?args-var))) (quote (car ?args-var))) (quote ()) (quote ((car ?args-var)))) (quote (?var (car ?args-var)))) (cons-source (cons-source (rename$197$229 (quote new-args)) (cons-source (cons-source (rename$197$229 (quote cdr)) (cons-source ?args-var$246 (quote ()) (quote (?args-var))) (quote (cdr ?args-var))) (quote ()) (quote ((cdr ?args-var)))) (quote (new-args (cdr ?args-var)))) (quote ()) (quote ((new-args (cdr ?args-var))))) (quote ((?var (car ?args-var)) (new-args (cdr ?args-var))))) (cons-source (cons-source (rename$197$229 (quote let*-optionals:aux)) (cons-source ?orig-args-var$242 (cons-source (rename$197$229 (quote new-args)) (cons-source ?more$263 (cons-source ?body1$267 ?body2$270 (quote (?body1 ?body2 ...))) (quote ((?more ...) ?body1 ?body2 ...))) (quote (new-args (?more ...) ?body1 ?body2 ...))) (quote (?orig-args-var new-args (?more ...) ?body1 ?body2 ...))) (quote (let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...))) (quote ()) (quote ((let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...)))) (quote (((?var (car ?args-var)) (new-args (cdr ?args-var))) (let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...)))) (quote (let ((?var (car ?args-var)) (new-args (cdr ?args-var))) (let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...)))) (quote ()) (quote ((let ((?var (car ?args-var)) (new-args (cdr ?args-var))) (let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...))))) (quote ((let* ((?var ?default) ?more ...) ?body1 ?body2 ...) (let ((?var (car ?args-var)) (new-args (cdr ?args-var))) (let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...))))) (quote ((null? ?args-var) (let* ((?var ?default) ?more ...) ?body1 ?body2 ...) (let ((?var (car ?args-var)) (new-args (cdr ?args-var))) (let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...))))) (quote (if (null? ?args-var) (let* ((?var ?default) ?more ...) ?body1 ?body2 ...) (let ((?var (car ?args-var)) (new-args (cdr ?args-var))) (let*-optionals:aux ?orig-args-var new-args (?more ...) ?body1 ?body2 ...))))) #f)) v.24$227$268) #f)) (cdr v.22$225$264))) v.23$226$266)) (car v.22$225$264)) #f)) (cdr v.14$217$247))) v.21$224$261) #f)) (cdr v.15$218$249)) #f)) (cdr v.18$221$255))) v.19$222$257)) (car v.18$221$255)) #f)) (cdr v.16$219$251))) v.17$220$253)) (car v.16$219$251)) #f)) (car v.15$218$249)) #f)) (car v.14$217$247)) #f)) (cdr v.12$215$243))) v.13$216$245)) (car v.12$215$243)) #f)) (cdr v.10$213$239))) v.11$214$241)) (car v.10$213$239)) #f)) (cdr expr$196$228))))) ((lambda (v.1$204$271) (if (pair? v.1$204$271) ((lambda (v.2$205$273) ((lambda (?orig-args-var$274) ((lambda (v.3$206$275) (if (pair? v.3$206$275) ((lambda (v.4$207$277) ((lambda (?args-var$278) ((lambda (v.5$208$279) (if (pair? v.5$208$279) ((lambda (v.6$209$281) (if (null? v.6$209$281) ((lambda (v.7$210$283) (if (pair? v.7$210$283) ((lambda (v.8$211$285) ((lambda (?body1$286) ((lambda (v.9$212$287) (if (list? v.9$212$287) ((lambda (?body2$289) (cons (cons-source (rename$197$229 (quote if)) (cons-source (cons-source (rename$197$229 (quote null?)) (cons-source ?args-var$278 (quote ()) (quote (?args-var))) (quote (null? ?args-var))) (cons-source (cons-source (rename$197$229 (quote let)) (cons-source (quote ()) (cons-source ?body1$286 ?body2$289 (quote (?body1 ?body2 ...))) (quote (() ?body1 ?body2 ...))) (quote (let () ?body1 ?body2 ...))) (cons-source (cons-source (rename$197$229 (quote error)) (cons-source "too many arguments" (cons-source (cons-source (rename$197$229 (quote length)) (cons-source ?orig-args-var$274 (quote ()) (quote (?orig-args-var))) (quote (length ?orig-args-var))) (cons-source ?orig-args-var$274 (quote ()) (quote (?orig-args-var))) (quote ((length ?orig-args-var) ?orig-args-var))) (quote ("too many arguments" (length ?orig-args-var) ?orig-args-var))) (quote (error "too many arguments" (length ?orig-args-var) ?orig-args-var))) (quote ()) (quote ((error "too many arguments" (length ?orig-args-var) ?orig-args-var)))) (quote ((let () ?body1 ?body2 ...) (error "too many arguments" (length ?orig-args-var) ?orig-args-var)))) (quote ((null? ?args-var) (let () ?body1 ?body2 ...) (error "too many arguments" (length ?orig-args-var) ?orig-args-var)))) (quote (if (null? ?args-var) (let () ?body1 ?body2 ...) (error "too many arguments" (length ?orig-args-var) ?orig-args-var)))) #f)) v.9$212$287) #f)) (cdr v.7$210$283))) v.8$211$285)) (car v.7$210$283)) #f)) (cdr v.5$208$279)) #f)) (car v.5$208$279)) #f)) (cdr v.3$206$275))) v.4$207$277)) (car v.3$206$275)) #f)) (cdr v.1$204$271))) v.2$205$273)) (car v.1$204$271)) #f)) (cdr expr$196$228))))) (let*-optionals lambda (expr$5$45 rename$6$46 compare$7$47) (car ((lambda (tmp$49$51) (if tmp$49$51 tmp$49$51 ((lambda (tmp$53$55) (if tmp$53$55 tmp$53$55 (cons (error/loc "no expansion for" expr$5$45) #f))) ((lambda (v.17$29$56) (if (pair? v.17$29$56) ((lambda (v.18$30$58) ((lambda (?args$59) ((lambda (v.19$31$60) (if (pair? v.19$31$60) ((lambda (v.20$32$62) ((lambda (w.21$33$64 ?var-ls23$35$65 ?default-ls24$36$66) ((lambda (lp.22$34$67) (set! lp.22$34$67 (lambda (w.21$33$68 ?var-ls23$35$69 ?default-ls24$36$70) (if (null? w.21$33$68) ((lambda (?var$71 ?default$72) ((lambda (v.30$42$73) (if (pair? v.30$42$73) ((lambda (v.31$43$75) ((lambda (?body1$76) ((lambda (v.32$44$77) (if (list? v.32$44$77) ((lambda (?body2$79) (cons (cons-source (rename$6$46 (quote let*-optionals:aux)) (cons-source ?args$59 (cons-source ?args$59 (cons-source (map (lambda (?var$80 ?default$81) (cons-source ?var$80 (cons-source ?default$81 (quote ()) (quote (?default))) (quote (?var ?default)))) ?var$71 ?default$72) (cons-source ?body1$76 ?body2$79 (quote (?body1 ?body2 ...))) (quote (((?var ?default) ...) ?body1 ?body2 ...))) (quote (?args ((?var ?default) ...) ?body1 ?body2 ...))) (quote (?args ?args ((?var ?default) ...) ?body1 ?body2 ...))) (quote (let*-optionals:aux ?args ?args ((?var ?default) ...) ?body1 ?body2 ...))) #f)) v.32$44$77) #f)) (cdr v.30$42$73))) v.31$43$75)) (car v.30$42$73)) #f)) (cdr v.19$31$60))) (reverse ?var-ls23$35$69) (reverse ?default-ls24$36$70)) (if (pair? w.21$33$68) ((lambda (v.25$37$83) (if (pair? v.25$37$83) ((lambda (v.26$38$85) ((lambda (?var$86) ((lambda (v.27$39$87) (if (pair? v.27$39$87) ((lambda (v.28$40$89) ((lambda (?default$90) ((lambda (v.29$41$91) (if (null? v.29$41$91) (lp.22$34$67 (cdr w.21$33$68) (cons ?var$86 ?var-ls23$35$69) (cons ?default$90 ?default-ls24$36$70)) #f)) (cdr v.27$39$87))) v.28$40$89)) (car v.27$39$87)) #f)) (cdr v.25$37$83))) v.26$38$85)) (car v.25$37$83)) #f)) (car w.21$33$68)) #f)))) (lp.22$34$67 w.21$33$64 ?var-ls23$35$65 ?default-ls24$36$66)) #f)) v.20$32$62 (quote ()) (quote ()))) (car v.19$31$60)) #f)) (cdr v.17$29$56))) v.18$30$58)) (car v.17$29$56)) #f)) (cdr expr$5$45))))) ((lambda (v.1$13$93) (if (pair? v.1$13$93) ((lambda (v.2$14$95) (if (list? v.2$14$95) ((lambda (?x$97) ((lambda (v.3$15$98) (if (pair? v.3$15$98) ((lambda (v.4$16$100) ((lambda (w.5$17$102 ?var-ls7$19$103 ?default-ls8$20$104) ((lambda (lp.6$18$105) (set! lp.6$18$105 (lambda (w.5$17$106 ?var-ls7$19$107 ?default-ls8$20$108) (if (null? w.5$17$106) ((lambda (?var$109 ?default$110) ((lambda (v.14$26$111) (if (pair? v.14$26$111) ((lambda (v.15$27$113) ((lambda (?body1$114) ((lambda (v.16$28$115) (if (list? v.16$28$115) ((lambda (?body2$117) (cons (cons-source (rename$6$46 (quote let)) (cons-source (cons-source (cons-source (rename$6$46 (quote args)) (cons-source ?x$97 (quote ()) (quote ((?x ...)))) (quote (args (?x ...)))) (quote ()) (quote ((args (?x ...))))) (cons-source (cons-source (rename$6$46 (quote let*-optionals)) (cons-source (rename$6$46 (quote args)) (cons-source (map (lambda (?var$118 ?default$119) (cons-source ?var$118 (cons-source ?default$119 (quote ()) (quote (?default))) (quote (?var ?default)))) ?var$109 ?default$110) (cons-source ?body1$114 ?body2$117 (quote (?body1 ?body2 ...))) (quote (((?var ?default) ...) ?body1 ?body2 ...))) (quote (args ((?var ?default) ...) ?body1 ?body2 ...))) (quote (let*-optionals args ((?var ?default) ...) ?body1 ?body2 ...))) (quote ()) (quote ((let*-optionals args ((?var ?default) ...) ?body1 ?body2 ...)))) (quote (((args (?x ...))) (let*-optionals args ((?var ?default) ...) ?body1 ?body2 ...)))) (quote (let ((args (?x ...))) (let*-optionals args ((?var ?default) ...) ?body1 ?body2 ...)))) #f)) v.16$28$115) #f)) (cdr v.14$26$111))) v.15$27$113)) (car v.14$26$111)) #f)) (cdr v.3$15$98))) (reverse ?var-ls7$19$107) (reverse ?default-ls8$20$108)) (if (pair? w.5$17$106) ((lambda (v.9$21$121) (if (pair? v.9$21$121) ((lambda (v.10$22$123) ((lambda (?var$124) ((lambda (v.11$23$125) (if (pair? v.11$23$125) ((lambda (v.12$24$127) ((lambda (?default$128) ((lambda (v.13$25$129) (if (null? v.13$25$129) (lp.6$18$105 (cdr w.5$17$106) (cons ?var$124 ?var-ls7$19$107) (cons ?default$128 ?default-ls8$20$108)) #f)) (cdr v.11$23$125))) v.12$24$127)) (car v.11$23$125)) #f)) (cdr v.9$21$121))) v.10$22$123)) (car v.9$21$121)) #f)) (car w.5$17$106)) #f)))) (lp.6$18$105 w.5$17$102 ?var-ls7$19$103 ?default-ls8$20$104)) #f)) v.4$16$100 (quote ()) (quote ()))) (car v.3$15$98)) #f)) (cdr v.1$13$93))) v.2$14$95) #f)) (car v.1$13$93)) #f)) (cdr expr$5$45))))))