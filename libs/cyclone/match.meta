;; This file was automatically generated by the Cyclone Scheme compiler
((match-check-identifier lambda (expr rename compare) (if (symbol? (cadr expr)) (car (cddr expr)) (cadr (cddr expr)))) (match-check-ellipsis lambda (expr rename compare) (if (compare (quote ...) (cadr expr)) (car (cddr expr)) (cadr (cddr expr)))) (match-let* lambda (expr$8253$8273 rename$8254$8274 compare$8255$8275) (car ((lambda (tmp$8277$8279) (if tmp$8277$8279 tmp$8277$8279 ((lambda (tmp$8281$8283) (if tmp$8281$8283 tmp$8281$8283 (cons (error/loc "no expansion for" expr$8253$8273) #f))) ((lambda (v.4$8264$8284) (if (pair? v.4$8264$8284) ((lambda (v.5$8265$8286) (if (pair? v.5$8265$8286) ((lambda (v.6$8266$8288) (if (pair? v.6$8266$8288) ((lambda (v.7$8267$8290) ((lambda (pat$8291) ((lambda (v.8$8268$8292) (if (pair? v.8$8268$8292) ((lambda (v.9$8269$8294) ((lambda (expr$8295) ((lambda (v.10$8270$8296) (if (null? v.10$8270$8296) ((lambda (v.11$8271$8298) ((lambda (rest$8299) ((lambda (v.12$8272$8300) ((lambda (body$8301) (cons (cons-source (rename$8254$8274 (quote match)) (cons-source expr$8295 (cons-source (cons-source pat$8291 (cons-source (cons-source (rename$8254$8274 (quote match-let*)) (cons-source rest$8299 body$8301 (quote (rest . body))) (quote (match-let* rest . body))) (quote ()) (quote ((match-let* rest . body)))) (quote (pat (match-let* rest . body)))) (quote ()) (quote ((pat (match-let* rest . body))))) (quote (expr (pat (match-let* rest . body))))) (quote (match expr (pat (match-let* rest . body))))) #f)) v.12$8272$8300)) (cdr v.4$8264$8284))) v.11$8271$8298)) (cdr v.5$8265$8286)) #f)) (cdr v.8$8268$8292))) v.9$8269$8294)) (car v.8$8268$8292)) #f)) (cdr v.6$8266$8288))) v.7$8267$8290)) (car v.6$8266$8288)) #f)) (car v.5$8265$8286)) #f)) (car v.4$8264$8284)) #f)) (cdr expr$8253$8273))))) ((lambda (v.1$8261$8302) (if (pair? v.1$8261$8302) ((lambda (v.2$8262$8304) (if (null? v.2$8262$8304) ((lambda (v.3$8263$8306) ((lambda (body$8307) (cons (cons-source (rename$8254$8274 (quote let)) (cons-source (quote ()) body$8307 (quote (() . body))) (quote (let () . body))) #f)) v.3$8263$8306)) (cdr v.1$8261$8302)) #f)) (car v.1$8261$8302)) #f)) (cdr expr$8253$8273))))) (match-named-let lambda (expr$8065$8105 rename$8066$8106 compare$8067$8107) (car ((lambda (tmp$8109$8111) (if tmp$8109$8111 tmp$8109$8111 ((lambda (tmp$8113$8115) (if tmp$8113$8115 tmp$8113$8115 (cons (error/loc "no expansion for" expr$8065$8105) #f))) ((lambda (v.20$8092$8116) (if (pair? v.20$8092$8116) ((lambda (v.21$8093$8118) ((lambda (loop$8119) ((lambda (v.22$8094$8120) (if (pair? v.22$8094$8120) ((lambda (v.23$8095$8122) (if (list? v.23$8095$8122) ((lambda (v$8124) ((lambda (v.24$8096$8125) (if (pair? v.24$8096$8125) ((lambda (v.25$8097$8127) (if (pair? v.25$8097$8127) ((lambda (v.26$8098$8129) (if (pair? v.26$8098$8129) ((lambda (v.27$8099$8131) ((lambda (pat$8132) ((lambda (v.28$8100$8133) (if (pair? v.28$8100$8133) ((lambda (v.29$8101$8135) ((lambda (expr$8136) ((lambda (v.30$8102$8137) (if (null? v.30$8102$8137) ((lambda (v.31$8103$8139) ((lambda (rest$8140) ((lambda (v.32$8104$8141) ((lambda (body$8142) (cons (cons-source (rename$8066$8106 (quote match-named-let)) (cons-source loop$8119 (cons-source (append (map (lambda (v$8143) v$8143) v$8124) (cons-source (cons-source pat$8132 (cons-source expr$8136 (cons-source (rename$8066$8106 (quote tmp)) (quote ()) (quote (tmp))) (quote (expr tmp))) (quote (pat expr tmp))) (quote ()) (quote ((pat expr tmp))))) (cons-source rest$8140 body$8142 (quote (rest . body))) (quote ((v ... (pat expr tmp)) rest . body))) (quote (loop (v ... (pat expr tmp)) rest . body))) (quote (match-named-let loop (v ... (pat expr tmp)) rest . body))) #f)) v.32$8104$8141)) (cdr v.24$8096$8125))) v.31$8103$8139)) (cdr v.25$8097$8127)) #f)) (cdr v.28$8100$8133))) v.29$8101$8135)) (car v.28$8100$8133)) #f)) (cdr v.26$8098$8129))) v.27$8099$8131)) (car v.26$8098$8129)) #f)) (car v.25$8097$8127)) #f)) (car v.24$8096$8125)) #f)) (cdr v.22$8094$8120))) v.23$8095$8122) #f)) (car v.22$8094$8120)) #f)) (cdr v.20$8092$8116))) v.21$8093$8118)) (car v.20$8092$8116)) #f)) (cdr expr$8065$8105))))) ((lambda (v.1$8073$8144) (if (pair? v.1$8073$8144) ((lambda (v.2$8074$8146) ((lambda (loop$8147) ((lambda (v.3$8075$8148) (if (pair? v.3$8075$8148) ((lambda (v.4$8076$8150) ((lambda (w.5$8077$8152 pat-ls7$8079$8153 expr-ls8$8080$8154 var-ls9$8081$8155) ((lambda (lp.6$8078$8156) (set! lp.6$8078$8156 (lambda (w.5$8077$8157 pat-ls7$8079$8158 expr-ls8$8080$8159 var-ls9$8081$8160) (if (null? w.5$8077$8157) ((lambda (pat$8161 expr$8162 var$8163) ((lambda (v.17$8089$8164) (if (pair? v.17$8089$8164) ((lambda (v.18$8090$8166) (if (null? v.18$8090$8166) ((lambda (v.19$8091$8168) ((lambda (body$8169) (cons (cons-source (rename$8066$8106 (quote let)) (cons-source loop$8147 (cons-source (map (lambda (var$8170 expr$8171) (cons-source var$8170 (cons-source expr$8171 (quote ()) (quote (expr))) (quote (var expr)))) var$8163 expr$8162) (cons-source (cons-source (rename$8066$8106 (quote match-let)) (cons-source (map (lambda (pat$8172 var$8173) (cons-source pat$8172 (cons-source var$8173 (quote ()) (quote (var))) (quote (pat var)))) pat$8161 var$8163) body$8169 (quote (((pat var) ...) . body))) (quote (match-let ((pat var) ...) . body))) (quote ()) (quote ((match-let ((pat var) ...) . body)))) (quote (((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (loop ((var expr) ...) (match-let ((pat var) ...) . body)))) (quote (let loop ((var expr) ...) (match-let ((pat var) ...) . body)))) #f)) v.19$8091$8168)) (cdr v.17$8089$8164)) #f)) (car v.17$8089$8164)) #f)) (cdr v.3$8075$8148))) (reverse pat-ls7$8079$8158) (reverse expr-ls8$8080$8159) (reverse var-ls9$8081$8160)) (if (pair? w.5$8077$8157) ((lambda (v.10$8082$8175) (if (pair? v.10$8082$8175) ((lambda (v.11$8083$8177) ((lambda (pat$8178) ((lambda (v.12$8084$8179) (if (pair? v.12$8084$8179) ((lambda (v.13$8085$8181) ((lambda (expr$8182) ((lambda (v.14$8086$8183) (if (pair? v.14$8086$8183) ((lambda (v.15$8087$8185) ((lambda (var$8186) ((lambda (v.16$8088$8187) (if (null? v.16$8088$8187) (lp.6$8078$8156 (cdr w.5$8077$8157) (cons pat$8178 pat-ls7$8079$8158) (cons expr$8182 expr-ls8$8080$8159) (cons var$8186 var-ls9$8081$8160)) #f)) (cdr v.14$8086$8183))) v.15$8087$8185)) (car v.14$8086$8183)) #f)) (cdr v.12$8084$8179))) v.13$8085$8181)) (car v.12$8084$8179)) #f)) (cdr v.10$8082$8175))) v.11$8083$8177)) (car v.10$8082$8175)) #f)) (car w.5$8077$8157)) #f)))) (lp.6$8078$8156 w.5$8077$8152 pat-ls7$8079$8153 expr-ls8$8080$8154 var-ls9$8081$8155)) #f)) v.4$8076$8150 (quote ()) (quote ()) (quote ()))) (car v.3$8075$8148)) #f)) (cdr v.1$8073$8144))) v.2$8074$8146)) (car v.1$8073$8144)) #f)) (cdr expr$8065$8105))))) (match-let/helper lambda (expr$7568$7669 rename$7569$7670 compare$7570$7671) (car ((lambda (tmp$7673$7675) (if tmp$7673$7675 tmp$7673$7675 ((lambda (tmp$7677$7679) (if tmp$7677$7679 tmp$7677$7679 ((lambda (tmp$7681$7683) (if tmp$7681$7683 tmp$7681$7683 ((lambda (tmp$7685$7687) (if tmp$7685$7687 tmp$7685$7687 ((lambda (tmp$7689$7691) (if tmp$7689$7691 tmp$7689$7691 (cons (error/loc "no expansion for" expr$7568$7669) #f))) ((lambda (v.79$7654$7692) (if (pair? v.79$7654$7692) ((lambda (v.80$7655$7694) ((lambda (let$7695) ((lambda (v.81$7656$7696) (if (pair? v.81$7656$7696) ((lambda (v.82$7657$7698) (if (list? v.82$7657$7698) ((lambda (v$7700) ((lambda (v.83$7658$7701) (if (pair? v.83$7658$7701) ((lambda (v.84$7659$7703) (if (list? v.84$7659$7703) ((lambda (p$7705) ((lambda (v.85$7660$7706) (if (pair? v.85$7660$7706) ((lambda (v.86$7661$7708) (if (pair? v.86$7661$7708) ((lambda (v.87$7662$7710) (if (pair? v.87$7662$7710) ((lambda (v.88$7663$7712) ((lambda (a$7713) ((lambda (v.89$7664$7714) (if (pair? v.89$7664$7714) ((lambda (v.90$7665$7716) ((lambda (expr$7717) ((lambda (v.91$7666$7718) (if (null? v.91$7666$7718) ((lambda (v.92$7667$7720) ((lambda (rest$7721) ((lambda (v.93$7668$7722) ((lambda (body$7723) (cons (cons-source (rename$7569$7670 (quote match-let/helper)) (cons-source let$7695 (cons-source (append (map (lambda (v$7724) v$7724) v$7700) (cons-source (cons-source a$7713 (cons-source expr$7717 (quote ()) (quote (expr))) (quote (a expr))) (quote ()) (quote ((a expr))))) (cons-source p$7705 (cons-source rest$7721 body$7723 (quote (rest . body))) (quote ((p ...) rest . body))) (quote ((v ... (a expr)) (p ...) rest . body))) (quote (let (v ... (a expr)) (p ...) rest . body))) (quote (match-let/helper let (v ... (a expr)) (p ...) rest . body))) #f)) v.93$7668$7722)) (cdr v.85$7660$7706))) v.92$7667$7720)) (cdr v.86$7661$7708)) #f)) (cdr v.89$7664$7714))) v.90$7665$7716)) (car v.89$7664$7714)) #f)) (cdr v.87$7662$7710))) v.88$7663$7712)) (car v.87$7662$7710)) #f)) (car v.86$7661$7708)) #f)) (car v.85$7660$7706)) #f)) (cdr v.83$7658$7701))) v.84$7659$7703) #f)) (car v.83$7658$7701)) #f)) (cdr v.81$7656$7696))) v.82$7657$7698) #f)) (car v.81$7656$7696)) #f)) (cdr v.79$7654$7692))) v.80$7655$7694)) (car v.79$7654$7692)) #f)) (cdr expr$7568$7669))))) ((lambda (v.63$7638$7725) (if (pair? v.63$7638$7725) ((lambda (v.64$7639$7727) ((lambda (let$7728) ((lambda (v.65$7640$7729) (if (pair? v.65$7640$7729) ((lambda (v.66$7641$7731) (if (list? v.66$7641$7731) ((lambda (v$7733) ((lambda (v.67$7642$7734) (if (pair? v.67$7642$7734) ((lambda (v.68$7643$7736) (if (list? v.68$7643$7736) ((lambda (p$7738) ((lambda (v.69$7644$7739) (if (pair? v.69$7644$7739) ((lambda (v.70$7645$7741) (if (pair? v.70$7645$7741) ((lambda (v.71$7646$7743) (if (pair? v.71$7646$7743) ((lambda (v.72$7647$7745) (if (vector? v.72$7647$7745) ((lambda (v.73$7648$7747) (if (list? v.73$7648$7747) ((lambda (a$7749) ((lambda (v.74$7649$7750) (if (pair? v.74$7649$7750) ((lambda (v.75$7650$7752) ((lambda (expr$7753) ((lambda (v.76$7651$7754) (if (null? v.76$7651$7754) ((lambda (v.77$7652$7756) ((lambda (rest$7757) ((lambda (v.78$7653$7758) ((lambda (body$7759) (cons (cons-source (rename$7569$7670 (quote match-let/helper)) (cons-source let$7728 (cons-source (append (map (lambda (v$7760) v$7760) v$7733) (cons-source (cons-source (rename$7569$7670 (quote tmp)) (cons-source expr$7753 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$7761) p$7761) p$7738) (cons-source (cons-source (list->vector a$7749) (cons-source (rename$7569$7670 (quote tmp)) (quote ()) (quote (tmp))) (quote (#(a ...) tmp))) (quote ()) (quote ((#(a ...) tmp))))) (cons-source rest$7757 body$7759 (quote (rest . body))) (quote ((p ... (#(a ...) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) (quote (let (v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) (quote (match-let/helper let (v ... (tmp expr)) (p ... (#(a ...) tmp)) rest . body))) #f)) v.78$7653$7758)) (cdr v.69$7644$7739))) v.77$7652$7756)) (cdr v.70$7645$7741)) #f)) (cdr v.74$7649$7750))) v.75$7650$7752)) (car v.74$7649$7750)) #f)) (cdr v.71$7646$7743))) v.73$7648$7747) #f)) (vector->list v.72$7647$7745)) #f)) (car v.71$7646$7743)) #f)) (car v.70$7645$7741)) #f)) (car v.69$7644$7739)) #f)) (cdr v.67$7642$7734))) v.68$7643$7736) #f)) (car v.67$7642$7734)) #f)) (cdr v.65$7640$7729))) v.66$7641$7731) #f)) (car v.65$7640$7729)) #f)) (cdr v.63$7638$7725))) v.64$7639$7727)) (car v.63$7638$7725)) #f)) (cdr expr$7568$7669))))) ((lambda (v.46$7621$7762) (if (pair? v.46$7621$7762) ((lambda (v.47$7622$7764) ((lambda (let$7765) ((lambda (v.48$7623$7766) (if (pair? v.48$7623$7766) ((lambda (v.49$7624$7768) (if (list? v.49$7624$7768) ((lambda (v$7770) ((lambda (v.50$7625$7771) (if (pair? v.50$7625$7771) ((lambda (v.51$7626$7773) (if (list? v.51$7626$7773) ((lambda (p$7775) ((lambda (v.52$7627$7776) (if (pair? v.52$7627$7776) ((lambda (v.53$7628$7778) (if (pair? v.53$7628$7778) ((lambda (v.54$7629$7780) (if (pair? v.54$7629$7780) ((lambda (v.55$7630$7782) (if (pair? v.55$7630$7782) ((lambda (v.56$7631$7784) ((lambda (a$7785) ((lambda (v.57$7632$7786) ((lambda (b$7787) ((lambda (v.58$7633$7788) (if (pair? v.58$7633$7788) ((lambda (v.59$7634$7790) ((lambda (expr$7791) ((lambda (v.60$7635$7792) (if (null? v.60$7635$7792) ((lambda (v.61$7636$7794) ((lambda (rest$7795) ((lambda (v.62$7637$7796) ((lambda (body$7797) (cons (cons-source (rename$7569$7670 (quote match-let/helper)) (cons-source let$7765 (cons-source (append (map (lambda (v$7798) v$7798) v$7770) (cons-source (cons-source (rename$7569$7670 (quote tmp)) (cons-source expr$7791 (quote ()) (quote (expr))) (quote (tmp expr))) (quote ()) (quote ((tmp expr))))) (cons-source (append (map (lambda (p$7799) p$7799) p$7775) (cons-source (cons-source (cons-source a$7785 b$7787 (quote (a . b))) (cons-source (rename$7569$7670 (quote tmp)) (quote ()) (quote (tmp))) (quote ((a . b) tmp))) (quote ()) (quote (((a . b) tmp))))) (cons-source rest$7795 body$7797 (quote (rest . body))) (quote ((p ... ((a . b) tmp)) rest . body))) (quote ((v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) (quote (let (v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) (quote (match-let/helper let (v ... (tmp expr)) (p ... ((a . b) tmp)) rest . body))) #f)) v.62$7637$7796)) (cdr v.52$7627$7776))) v.61$7636$7794)) (cdr v.53$7628$7778)) #f)) (cdr v.58$7633$7788))) v.59$7634$7790)) (car v.58$7633$7788)) #f)) (cdr v.54$7629$7780))) v.57$7632$7786)) (cdr v.55$7630$7782))) v.56$7631$7784)) (car v.55$7630$7782)) #f)) (car v.54$7629$7780)) #f)) (car v.53$7628$7778)) #f)) (car v.52$7627$7776)) #f)) (cdr v.50$7625$7771))) v.51$7626$7773) #f)) (car v.50$7625$7771)) #f)) (cdr v.48$7623$7766))) v.49$7624$7768) #f)) (car v.48$7623$7766)) #f)) (cdr v.46$7621$7762))) v.47$7622$7764)) (car v.46$7621$7762)) #f)) (cdr expr$7568$7669))))) ((lambda (v.19$7594$7800) (if (pair? v.19$7594$7800) ((lambda (v.20$7595$7802) ((lambda (let$7803) ((lambda (v.21$7596$7804) (if (pair? v.21$7596$7804) ((lambda (v.22$7597$7806) ((lambda (w.23$7598$7808 var-ls25$7600$7809 expr-ls26$7601$7810) ((lambda (lp.24$7599$7811) (set! lp.24$7599$7811 (lambda (w.23$7598$7812 var-ls25$7600$7813 expr-ls26$7601$7814) (if (null? w.23$7598$7812) ((lambda (var$7815 expr$7816) ((lambda (v.32$7607$7817) (if (pair? v.32$7607$7817) ((lambda (v.33$7608$7819) ((lambda (w.34$7609$7821 pat-ls36$7611$7822 tmp-ls37$7612$7823) ((lambda (lp.35$7610$7824) (set! lp.35$7610$7824 (lambda (w.34$7609$7825 pat-ls36$7611$7826 tmp-ls37$7612$7827) (if (null? w.34$7609$7825) ((lambda (pat$7828 tmp$7829) ((lambda (v.43$7618$7830) (if (pair? v.43$7618$7830) ((lambda (v.44$7619$7832) (if (null? v.44$7619$7832) ((lambda (v.45$7620$7834) ((lambda (body$7835) (cons (cons-source let$7803 (cons-source (map (lambda (var$7836 expr$7837) (cons-source var$7836 (cons-source expr$7837 (quote ()) (quote (expr))) (quote (var expr)))) var$7815 expr$7816) (cons-source (cons-source (rename$7569$7670 (quote match-let*)) (cons-source (map (lambda (pat$7838 tmp$7839) (cons-source pat$7838 (cons-source tmp$7839 (quote ()) (quote (tmp))) (quote (pat tmp)))) pat$7828 tmp$7829) body$7835 (quote (((pat tmp) ...) . body))) (quote (match-let* ((pat tmp) ...) . body))) (quote ()) (quote ((match-let* ((pat tmp) ...) . body)))) (quote (((var expr) ...) (match-let* ((pat tmp) ...) . body)))) (quote (let ((var expr) ...) (match-let* ((pat tmp) ...) . body)))) #f)) v.45$7620$7834)) (cdr v.43$7618$7830)) #f)) (car v.43$7618$7830)) #f)) (cdr v.32$7607$7817))) (reverse pat-ls36$7611$7826) (reverse tmp-ls37$7612$7827)) (if (pair? w.34$7609$7825) ((lambda (v.38$7613$7841) (if (pair? v.38$7613$7841) ((lambda (v.39$7614$7843) ((lambda (pat$7844) ((lambda (v.40$7615$7845) (if (pair? v.40$7615$7845) ((lambda (v.41$7616$7847) ((lambda (tmp$7848) ((lambda (v.42$7617$7849) (if (null? v.42$7617$7849) (lp.35$7610$7824 (cdr w.34$7609$7825) (cons pat$7844 pat-ls36$7611$7826) (cons tmp$7848 tmp-ls37$7612$7827)) #f)) (cdr v.40$7615$7845))) v.41$7616$7847)) (car v.40$7615$7845)) #f)) (cdr v.38$7613$7841))) v.39$7614$7843)) (car v.38$7613$7841)) #f)) (car w.34$7609$7825)) #f)))) (lp.35$7610$7824 w.34$7609$7821 pat-ls36$7611$7822 tmp-ls37$7612$7823)) #f)) v.33$7608$7819 (quote ()) (quote ()))) (car v.32$7607$7817)) #f)) (cdr v.21$7596$7804))) (reverse var-ls25$7600$7813) (reverse expr-ls26$7601$7814)) (if (pair? w.23$7598$7812) ((lambda (v.27$7602$7852) (if (pair? v.27$7602$7852) ((lambda (v.28$7603$7854) ((lambda (var$7855) ((lambda (v.29$7604$7856) (if (pair? v.29$7604$7856) ((lambda (v.30$7605$7858) ((lambda (expr$7859) ((lambda (v.31$7606$7860) (if (null? v.31$7606$7860) (lp.24$7599$7811 (cdr w.23$7598$7812) (cons var$7855 var-ls25$7600$7813) (cons expr$7859 expr-ls26$7601$7814)) #f)) (cdr v.29$7604$7856))) v.30$7605$7858)) (car v.29$7604$7856)) #f)) (cdr v.27$7602$7852))) v.28$7603$7854)) (car v.27$7602$7852)) #f)) (car w.23$7598$7812)) #f)))) (lp.24$7599$7811 w.23$7598$7808 var-ls25$7600$7809 expr-ls26$7601$7810)) #f)) v.22$7597$7806 (quote ()) (quote ()))) (car v.21$7596$7804)) #f)) (cdr v.19$7594$7800))) v.20$7595$7802)) (car v.19$7594$7800)) #f)) (cdr expr$7568$7669))))) ((lambda (v.1$7576$7862) (if (pair? v.1$7576$7862) ((lambda (v.2$7577$7864) ((lambda (let$7865) ((lambda (v.3$7578$7866) (if (pair? v.3$7578$7866) ((lambda (v.4$7579$7868) ((lambda (w.5$7580$7870 var-ls7$7582$7871 expr-ls8$7583$7872) ((lambda (lp.6$7581$7873) (set! lp.6$7581$7873 (lambda (w.5$7580$7874 var-ls7$7582$7875 expr-ls8$7583$7876) (if (null? w.5$7580$7874) ((lambda (var$7877 expr$7878) ((lambda (v.14$7589$7879) (if (pair? v.14$7589$7879) ((lambda (v.15$7590$7881) (if (null? v.15$7590$7881) ((lambda (v.16$7591$7883) (if (pair? v.16$7591$7883) ((lambda (v.17$7592$7885) (if (null? v.17$7592$7885) ((lambda (v.18$7593$7887) ((lambda (body$7888) (cons (cons-source let$7865 (cons-source (map (lambda (var$7889 expr$7890) (cons-source var$7889 (cons-source expr$7890 (quote ()) (quote (expr))) (quote (var expr)))) var$7877 expr$7878) body$7888 (quote (((var expr) ...) . body))) (quote (let ((var expr) ...) . body))) #f)) v.18$7593$7887)) (cdr v.16$7591$7883)) #f)) (car v.16$7591$7883)) #f)) (cdr v.14$7589$7879)) #f)) (car v.14$7589$7879)) #f)) (cdr v.3$7578$7866))) (reverse var-ls7$7582$7875) (reverse expr-ls8$7583$7876)) (if (pair? w.5$7580$7874) ((lambda (v.9$7584$7892) (if (pair? v.9$7584$7892) ((lambda (v.10$7585$7894) ((lambda (var$7895) ((lambda (v.11$7586$7896) (if (pair? v.11$7586$7896) ((lambda (v.12$7587$7898) ((lambda (expr$7899) ((lambda (v.13$7588$7900) (if (null? v.13$7588$7900) (lp.6$7581$7873 (cdr w.5$7580$7874) (cons var$7895 var-ls7$7582$7875) (cons expr$7899 expr-ls8$7583$7876)) #f)) (cdr v.11$7586$7896))) v.12$7587$7898)) (car v.11$7586$7896)) #f)) (cdr v.9$7584$7892))) v.10$7585$7894)) (car v.9$7584$7892)) #f)) (car w.5$7580$7874)) #f)))) (lp.6$7581$7873 w.5$7580$7870 var-ls7$7582$7871 expr-ls8$7583$7872)) #f)) v.4$7579$7868 (quote ()) (quote ()))) (car v.3$7578$7866)) #f)) (cdr v.1$7576$7862))) v.2$7577$7864)) (car v.1$7576$7862)) #f)) (cdr expr$7568$7669))))) (match-letrec lambda (expr$7483$7503 rename$7484$7504 compare$7485$7505) (car ((lambda (tmp$7507$7509) (if tmp$7507$7509 tmp$7507$7509 (cons (error/loc "no expansion for" expr$7483$7503) #f))) ((lambda (v.1$7491$7510) (if (pair? v.1$7491$7510) ((lambda (v.2$7492$7512) ((lambda (w.3$7493$7514 var-ls5$7495$7515 value-ls6$7496$7516) ((lambda (lp.4$7494$7517) (set! lp.4$7494$7517 (lambda (w.3$7493$7518 var-ls5$7495$7519 value-ls6$7496$7520) (if (null? w.3$7493$7518) ((lambda (var$7521 value$7522) ((lambda (v.12$7502$7523) ((lambda (body$7524) (cons (cons-source (rename$7484$7504 (quote match-let/helper)) (cons-source (rename$7484$7504 (quote letrec)) (cons-source (quote ()) (cons-source (quote ()) (cons-source (map (lambda (var$7525 value$7526) (cons-source var$7525 (cons-source value$7526 (quote ()) (quote (value))) (quote (var value)))) var$7521 value$7522) body$7524 (quote (((var value) ...) . body))) (quote (() ((var value) ...) . body))) (quote (() () ((var value) ...) . body))) (quote (letrec () () ((var value) ...) . body))) (quote (match-let/helper letrec () () ((var value) ...) . body))) #f)) v.12$7502$7523)) (cdr v.1$7491$7510))) (reverse var-ls5$7495$7519) (reverse value-ls6$7496$7520)) (if (pair? w.3$7493$7518) ((lambda (v.7$7497$7528) (if (pair? v.7$7497$7528) ((lambda (v.8$7498$7530) ((lambda (var$7531) ((lambda (v.9$7499$7532) (if (pair? v.9$7499$7532) ((lambda (v.10$7500$7534) ((lambda (value$7535) ((lambda (v.11$7501$7536) (if (null? v.11$7501$7536) (lp.4$7494$7517 (cdr w.3$7493$7518) (cons var$7531 var-ls5$7495$7519) (cons value$7535 value-ls6$7496$7520)) #f)) (cdr v.9$7499$7532))) v.10$7500$7534)) (car v.9$7499$7532)) #f)) (cdr v.7$7497$7528))) v.8$7498$7530)) (car v.7$7497$7528)) #f)) (car w.3$7493$7518)) #f)))) (lp.4$7494$7517 w.3$7493$7514 var-ls5$7495$7515 value-ls6$7496$7516)) #f)) v.2$7492$7512 (quote ()) (quote ()))) (car v.1$7491$7510)) #f)) (cdr expr$7483$7503))))) (match-let lambda (expr$7322$7356 rename$7323$7357 compare$7324$7358) (car ((lambda (tmp$7360$7362) (if tmp$7360$7362 tmp$7360$7362 ((lambda (tmp$7364$7366) (if tmp$7364$7366 tmp$7364$7366 (cons (error/loc "no expansion for" expr$7322$7356) #f))) ((lambda (v.13$7342$7367) (if (pair? v.13$7342$7367) ((lambda (v.14$7343$7369) ((lambda (loop$7370) ((lambda (v.15$7344$7371) (if (pair? v.15$7344$7371) ((lambda (v.16$7345$7373) ((lambda (w.17$7346$7375 var-ls19$7348$7376 init-ls20$7349$7377) ((lambda (lp.18$7347$7378) (set! lp.18$7347$7378 (lambda (w.17$7346$7379 var-ls19$7348$7380 init-ls20$7349$7381) (if (null? w.17$7346$7379) ((lambda (var$7382 init$7383) ((lambda (v.26$7355$7384) ((lambda (body$7385) (cons (cons-source (rename$7323$7357 (quote match-named-let)) (cons-source loop$7370 (cons-source (quote ()) (cons-source (map (lambda (var$7386 init$7387) (cons-source var$7386 (cons-source init$7387 (quote ()) (quote (init))) (quote (var init)))) var$7382 init$7383) body$7385 (quote (((var init) ...) . body))) (quote (() ((var init) ...) . body))) (quote (loop () ((var init) ...) . body))) (quote (match-named-let loop () ((var init) ...) . body))) #f)) v.26$7355$7384)) (cdr v.15$7344$7371))) (reverse var-ls19$7348$7380) (reverse init-ls20$7349$7381)) (if (pair? w.17$7346$7379) ((lambda (v.21$7350$7389) (if (pair? v.21$7350$7389) ((lambda (v.22$7351$7391) ((lambda (var$7392) ((lambda (v.23$7352$7393) (if (pair? v.23$7352$7393) ((lambda (v.24$7353$7395) ((lambda (init$7396) ((lambda (v.25$7354$7397) (if (null? v.25$7354$7397) (lp.18$7347$7378 (cdr w.17$7346$7379) (cons var$7392 var-ls19$7348$7380) (cons init$7396 init-ls20$7349$7381)) #f)) (cdr v.23$7352$7393))) v.24$7353$7395)) (car v.23$7352$7393)) #f)) (cdr v.21$7350$7389))) v.22$7351$7391)) (car v.21$7350$7389)) #f)) (car w.17$7346$7379)) #f)))) (lp.18$7347$7378 w.17$7346$7375 var-ls19$7348$7376 init-ls20$7349$7377)) #f)) v.16$7345$7373 (quote ()) (quote ()))) (car v.15$7344$7371)) #f)) (cdr v.13$7342$7367))) v.14$7343$7369)) (car v.13$7342$7367)) #f)) (cdr expr$7322$7356))))) ((lambda (v.1$7330$7399) (if (pair? v.1$7330$7399) ((lambda (v.2$7331$7401) ((lambda (w.3$7332$7403 var-ls5$7334$7404 value-ls6$7335$7405) ((lambda (lp.4$7333$7406) (set! lp.4$7333$7406 (lambda (w.3$7332$7407 var-ls5$7334$7408 value-ls6$7335$7409) (if (null? w.3$7332$7407) ((lambda (var$7410 value$7411) ((lambda (v.12$7341$7412) ((lambda (body$7413) (cons (cons-source (rename$7323$7357 (quote match-let/helper)) (cons-source (rename$7323$7357 (quote let)) (cons-source (quote ()) (cons-source (quote ()) (cons-source (map (lambda (var$7414 value$7415) (cons-source var$7414 (cons-source value$7415 (quote ()) (quote (value))) (quote (var value)))) var$7410 value$7411) body$7413 (quote (((var value) ...) . body))) (quote (() ((var value) ...) . body))) (quote (() () ((var value) ...) . body))) (quote (let () () ((var value) ...) . body))) (quote (match-let/helper let () () ((var value) ...) . body))) #f)) v.12$7341$7412)) (cdr v.1$7330$7399))) (reverse var-ls5$7334$7408) (reverse value-ls6$7335$7409)) (if (pair? w.3$7332$7407) ((lambda (v.7$7336$7417) (if (pair? v.7$7336$7417) ((lambda (v.8$7337$7419) ((lambda (var$7420) ((lambda (v.9$7338$7421) (if (pair? v.9$7338$7421) ((lambda (v.10$7339$7423) ((lambda (value$7424) ((lambda (v.11$7340$7425) (if (null? v.11$7340$7425) (lp.4$7333$7406 (cdr w.3$7332$7407) (cons var$7420 var-ls5$7334$7408) (cons value$7424 value-ls6$7335$7409)) #f)) (cdr v.9$7338$7421))) v.10$7339$7423)) (car v.9$7338$7421)) #f)) (cdr v.7$7336$7417))) v.8$7337$7419)) (car v.7$7336$7417)) #f)) (car w.3$7332$7407)) #f)))) (lp.4$7333$7406 w.3$7332$7403 var-ls5$7334$7404 value-ls6$7335$7405)) #f)) v.2$7331$7401 (quote ()) (quote ()))) (car v.1$7330$7399)) #f)) (cdr expr$7322$7356))))) (match-lambda* lambda (expr$7254$7270 rename$7255$7271 compare$7256$7272) (car ((lambda (tmp$7274$7276) (if tmp$7274$7276 tmp$7274$7276 (cons (error/loc "no expansion for" expr$7254$7270) #f))) ((lambda (v.1$7262$7277) ((lambda (w.2$7263$7279 pattern-ls4$7265$7280 body-ls5$7266$7281) ((lambda (lp.3$7264$7282) (set! lp.3$7264$7282 (lambda (w.2$7263$7283 pattern-ls4$7265$7284 body-ls5$7266$7285) (if (null? w.2$7263$7283) ((lambda (pattern$7286 body$7287) (cons (cons-source (rename$7255$7271 (quote lambda)) (cons-source (rename$7255$7271 (quote expr)) (cons-source (cons-source (rename$7255$7271 (quote match)) (cons-source (rename$7255$7271 (quote expr)) (map (lambda (pattern$7288 body$7289) (cons-source pattern$7288 body$7289 (quote (pattern . body)))) pattern$7286 body$7287) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote (expr (match expr (pattern . body) ...)))) (quote (lambda expr (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls4$7265$7284) (reverse body-ls5$7266$7285)) (if (pair? w.2$7263$7283) ((lambda (v.6$7267$7291) (if (pair? v.6$7267$7291) ((lambda (v.7$7268$7293) ((lambda (pattern$7294) ((lambda (v.8$7269$7295) ((lambda (body$7296) (lp.3$7264$7282 (cdr w.2$7263$7283) (cons pattern$7294 pattern-ls4$7265$7284) (cons body$7296 body-ls5$7266$7285))) v.8$7269$7295)) (cdr v.6$7267$7291))) v.7$7268$7293)) (car v.6$7267$7291)) #f)) (car w.2$7263$7283)) #f)))) (lp.3$7264$7282 w.2$7263$7279 pattern-ls4$7265$7280 body-ls5$7266$7281)) #f)) v.1$7262$7277 (quote ()) (quote ()))) (cdr expr$7254$7270))))) (match-lambda lambda (expr$7186$7202 rename$7187$7203 compare$7188$7204) (car ((lambda (tmp$7206$7208) (if tmp$7206$7208 tmp$7206$7208 (cons (error/loc "no expansion for" expr$7186$7202) #f))) ((lambda (v.1$7194$7209) ((lambda (w.2$7195$7211 pattern-ls4$7197$7212 body-ls5$7198$7213) ((lambda (lp.3$7196$7214) (set! lp.3$7196$7214 (lambda (w.2$7195$7215 pattern-ls4$7197$7216 body-ls5$7198$7217) (if (null? w.2$7195$7215) ((lambda (pattern$7218 body$7219) (cons (cons-source (rename$7187$7203 (quote lambda)) (cons-source (cons-source (rename$7187$7203 (quote expr)) (quote ()) (quote (expr))) (cons-source (cons-source (rename$7187$7203 (quote match)) (cons-source (rename$7187$7203 (quote expr)) (map (lambda (pattern$7220 body$7221) (cons-source pattern$7220 body$7221 (quote (pattern . body)))) pattern$7218 body$7219) (quote (expr (pattern . body) ...))) (quote (match expr (pattern . body) ...))) (quote ()) (quote ((match expr (pattern . body) ...)))) (quote ((expr) (match expr (pattern . body) ...)))) (quote (lambda (expr) (match expr (pattern . body) ...)))) #f)) (reverse pattern-ls4$7197$7216) (reverse body-ls5$7198$7217)) (if (pair? w.2$7195$7215) ((lambda (v.6$7199$7223) (if (pair? v.6$7199$7223) ((lambda (v.7$7200$7225) ((lambda (pattern$7226) ((lambda (v.8$7201$7227) ((lambda (body$7228) (lp.3$7196$7214 (cdr w.2$7195$7215) (cons pattern$7226 pattern-ls4$7197$7216) (cons body$7228 body-ls5$7198$7217))) v.8$7201$7227)) (cdr v.6$7199$7223))) v.7$7200$7225)) (car v.6$7199$7223)) #f)) (car w.2$7195$7215)) #f)))) (lp.3$7196$7214 w.2$7195$7211 pattern-ls4$7197$7212 body-ls5$7198$7213)) #f)) v.1$7194$7209 (quote ()) (quote ()))) (cdr expr$7186$7202))))) (match-extract-quasiquote-vars-step lambda (expr$7055$7085 rename$7056$7086 compare$7057$7087) (car ((lambda (tmp$7089$7091) (if tmp$7089$7091 tmp$7089$7091 (cons (error/loc "no expansion for" expr$7055$7085) #f))) ((lambda (v.1$7063$7092) (if (pair? v.1$7063$7092) ((lambda (v.2$7064$7094) ((lambda (x$7095) ((lambda (v.3$7065$7096) (if (pair? v.3$7065$7096) ((lambda (v.4$7066$7098) ((lambda (k$7099) ((lambda (v.5$7067$7100) (if (pair? v.5$7067$7100) ((lambda (v.6$7068$7102) ((lambda (i$7103) ((lambda (v.7$7069$7104) (if (pair? v.7$7069$7104) ((lambda (v.8$7070$7106) ((lambda (v$7107) ((lambda (v.9$7071$7108) (if (pair? v.9$7071$7108) ((lambda (v.10$7072$7110) ((lambda (d$7111) ((lambda (v.11$7073$7112) (if (pair? v.11$7073$7112) ((lambda (v.12$7074$7114) ((lambda (w.13$7075$7116 v2-ls15$7077$7117 v2-ls-ls16$7078$7118) ((lambda (lp.14$7076$7119) (set! lp.14$7076$7119 (lambda (w.13$7075$7120 v2-ls15$7077$7121 v2-ls-ls16$7078$7122) (if (null? w.13$7075$7120) ((lambda (v2$7123 v2-ls$7124) ((lambda (v.22$7084$7125) (if (null? v.22$7084$7125) (cons (cons-source (rename$7056$7086 (quote match-extract-quasiquote-vars)) (cons-source x$7095 (cons-source k$7099 (cons-source (append (map (lambda (v2$7127) v2$7127) v2$7123) i$7103) (cons-source (append (map (lambda (v2$7128 v2-ls$7129) (cons-source v2$7128 (cons-source v2-ls$7129 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$7123 v2-ls$7124) v$7107) (cons-source d$7111 (quote ()) (quote (d))) (quote (((v2 v2-ls) ... . v) d))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) (quote (match-extract-quasiquote-vars x k (v2 ... . i) ((v2 v2-ls) ... . v) d))) #f) #f)) (cdr v.11$7073$7112))) (reverse v2-ls15$7077$7121) (reverse v2-ls-ls16$7078$7122)) (if (pair? w.13$7075$7120) ((lambda (v.17$7079$7131) (if (pair? v.17$7079$7131) ((lambda (v.18$7080$7133) ((lambda (v2$7134) ((lambda (v.19$7081$7135) (if (pair? v.19$7081$7135) ((lambda (v.20$7082$7137) ((lambda (v2-ls$7138) ((lambda (v.21$7083$7139) (if (null? v.21$7083$7139) (lp.14$7076$7119 (cdr w.13$7075$7120) (cons v2$7134 v2-ls15$7077$7121) (cons v2-ls$7138 v2-ls-ls16$7078$7122)) #f)) (cdr v.19$7081$7135))) v.20$7082$7137)) (car v.19$7081$7135)) #f)) (cdr v.17$7079$7131))) v.18$7080$7133)) (car v.17$7079$7131)) #f)) (car w.13$7075$7120)) #f)))) (lp.14$7076$7119 w.13$7075$7116 v2-ls15$7077$7117 v2-ls-ls16$7078$7118)) #f)) v.12$7074$7114 (quote ()) (quote ()))) (car v.11$7073$7112)) #f)) (cdr v.9$7071$7108))) v.10$7072$7110)) (car v.9$7071$7108)) #f)) (cdr v.7$7069$7104))) v.8$7070$7106)) (car v.7$7069$7104)) #f)) (cdr v.5$7067$7100))) v.6$7068$7102)) (car v.5$7067$7100)) #f)) (cdr v.3$7065$7096))) v.4$7066$7098)) (car v.3$7065$7096)) #f)) (cdr v.1$7063$7092))) v.2$7064$7094)) (car v.1$7063$7092)) #f)) (cdr expr$7055$7085))))) (match-extract-quasiquote-vars lambda (expr$6563$6671 rename$6564$6672 compare$6565$6673) (car ((lambda (tmp$6675$6677) (if tmp$6675$6677 tmp$6675$6677 ((lambda (tmp$6679$6681) (if tmp$6679$6681 tmp$6679$6681 ((lambda (tmp$6683$6685) (if tmp$6683$6685 tmp$6683$6685 ((lambda (tmp$6687$6689) (if tmp$6687$6689 tmp$6687$6689 ((lambda (tmp$6691$6693) (if tmp$6691$6693 tmp$6691$6693 ((lambda (tmp$6695$6697) (if tmp$6695$6697 tmp$6695$6697 ((lambda (tmp$6699$6701) (if tmp$6699$6701 tmp$6699$6701 (cons (error/loc "no expansion for" expr$6563$6671) #f))) ((lambda (v.90$6660$6702) (if (pair? v.90$6660$6702) ((lambda (v.91$6661$6704) ((lambda (x$6705) ((lambda (v.92$6662$6706) (if (pair? v.92$6662$6706) ((lambda (v.93$6663$6708) (if (list? v.93$6663$6708) ((lambda (k$6710) ((lambda (v.94$6664$6711) (if (pair? v.94$6664$6711) ((lambda (v.95$6665$6713) ((lambda (i$6714) ((lambda (v.96$6666$6715) (if (pair? v.96$6666$6715) ((lambda (v.97$6667$6717) ((lambda (v$6718) ((lambda (v.98$6668$6719) (if (pair? v.98$6668$6719) ((lambda (v.99$6669$6721) ((lambda (d$6722) ((lambda (v.100$6670$6723) (if (null? v.100$6670$6723) (cons (append (map (lambda (k$6725) k$6725) k$6710) (cons-source v$6718 (quote ()) (quote (v)))) #f) #f)) (cdr v.98$6668$6719))) v.99$6669$6721)) (car v.98$6668$6719)) #f)) (cdr v.96$6666$6715))) v.97$6667$6717)) (car v.96$6666$6715)) #f)) (cdr v.94$6664$6711))) v.95$6665$6713)) (car v.94$6664$6711)) #f)) (cdr v.92$6662$6706))) v.93$6663$6708) #f)) (car v.92$6662$6706)) #f)) (cdr v.90$6660$6702))) v.91$6661$6704)) (car v.90$6660$6702)) #f)) (cdr expr$6563$6671))))) ((lambda (v.78$6648$6726) (if (pair? v.78$6648$6726) ((lambda (v.79$6649$6728) (if (vector? v.79$6649$6728) ((lambda (v.80$6650$6730) (if (list? v.80$6650$6730) ((lambda (x$6732) ((lambda (v.81$6651$6733) (if (pair? v.81$6651$6733) ((lambda (v.82$6652$6735) ((lambda (k$6736) ((lambda (v.83$6653$6737) (if (pair? v.83$6653$6737) ((lambda (v.84$6654$6739) ((lambda (i$6740) ((lambda (v.85$6655$6741) (if (pair? v.85$6655$6741) ((lambda (v.86$6656$6743) ((lambda (v$6744) ((lambda (v.87$6657$6745) (if (pair? v.87$6657$6745) ((lambda (v.88$6658$6747) ((lambda (d$6748) ((lambda (v.89$6659$6749) (if (null? v.89$6659$6749) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6732 (cons-source k$6736 (cons-source i$6740 (cons-source v$6744 (cons-source d$6748 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((x ...) k i v d))) (quote (match-extract-quasiquote-vars (x ...) k i v d))) #f) #f)) (cdr v.87$6657$6745))) v.88$6658$6747)) (car v.87$6657$6745)) #f)) (cdr v.85$6655$6741))) v.86$6656$6743)) (car v.85$6655$6741)) #f)) (cdr v.83$6653$6737))) v.84$6654$6739)) (car v.83$6653$6737)) #f)) (cdr v.81$6651$6733))) v.82$6652$6735)) (car v.81$6651$6733)) #f)) (cdr v.78$6648$6726))) v.80$6650$6730) #f)) (vector->list v.79$6649$6728)) #f)) (car v.78$6648$6726)) #f)) (cdr expr$6563$6671))))) ((lambda (v.65$6635$6751) (if (pair? v.65$6635$6751) ((lambda (v.66$6636$6753) (if (pair? v.66$6636$6753) ((lambda (v.67$6637$6755) ((lambda (x$6756) ((lambda (v.68$6638$6757) ((lambda (y$6758) ((lambda (v.69$6639$6759) (if (pair? v.69$6639$6759) ((lambda (v.70$6640$6761) ((lambda (k$6762) ((lambda (v.71$6641$6763) (if (pair? v.71$6641$6763) ((lambda (v.72$6642$6765) ((lambda (i$6766) ((lambda (v.73$6643$6767) (if (pair? v.73$6643$6767) ((lambda (v.74$6644$6769) ((lambda (v$6770) ((lambda (v.75$6645$6771) (if (pair? v.75$6645$6771) ((lambda (v.76$6646$6773) ((lambda (d$6774) ((lambda (v.77$6647$6775) (if (null? v.77$6647$6775) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6756 (cons-source (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars-step)) (cons-source y$6758 (cons-source k$6762 (cons-source i$6766 (cons-source v$6770 (cons-source d$6774 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (y k i v d))) (quote (match-extract-quasiquote-vars-step y k i v d))) (cons-source i$6766 (cons-source (quote ()) (cons-source d$6774 (quote ()) (quote (d))) (quote (() d))) (quote (i () d))) (quote ((match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (x (match-extract-quasiquote-vars-step y k i v d) i () d))) (quote (match-extract-quasiquote-vars x (match-extract-quasiquote-vars-step y k i v d) i () d))) #f) #f)) (cdr v.75$6645$6771))) v.76$6646$6773)) (car v.75$6645$6771)) #f)) (cdr v.73$6643$6767))) v.74$6644$6769)) (car v.73$6643$6767)) #f)) (cdr v.71$6641$6763))) v.72$6642$6765)) (car v.71$6641$6763)) #f)) (cdr v.69$6639$6759))) v.70$6640$6761)) (car v.69$6639$6759)) #f)) (cdr v.65$6635$6751))) v.68$6638$6757)) (cdr v.66$6636$6753))) v.67$6637$6755)) (car v.66$6636$6753)) #f)) (car v.65$6635$6751)) #f)) (cdr expr$6563$6671))))) ((lambda (v.48$6618$6777) (if (pair? v.48$6618$6777) ((lambda (v.49$6619$6779) (if (pair? v.49$6619$6779) ((lambda (v.50$6620$6781) (if (compare$6565$6673 v.50$6620$6781 (rename$6564$6672 (quote unquote))) ((lambda (v.51$6621$6783) (if (pair? v.51$6621$6783) ((lambda (v.52$6622$6785) ((lambda (x$6786) ((lambda (v.53$6623$6787) (if (null? v.53$6623$6787) ((lambda (v.54$6624$6789) (if (pair? v.54$6624$6789) ((lambda (v.55$6625$6791) ((lambda (k$6792) ((lambda (v.56$6626$6793) (if (pair? v.56$6626$6793) ((lambda (v.57$6627$6795) ((lambda (i$6796) ((lambda (v.58$6628$6797) (if (pair? v.58$6628$6797) ((lambda (v.59$6629$6799) ((lambda (v$6800) ((lambda (v.60$6630$6801) (if (pair? v.60$6630$6801) ((lambda (v.61$6631$6803) (if (pair? v.61$6631$6803) ((lambda (v.62$6632$6805) (if (equal? v.62$6632$6805 #t) ((lambda (v.63$6633$6807) ((lambda (d$6808) ((lambda (v.64$6634$6809) (if (null? v.64$6634$6809) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6786 (cons-source k$6792 (cons-source i$6796 (cons-source v$6800 (cons-source d$6808 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote (x k i v d))) (quote (match-extract-quasiquote-vars x k i v d))) #f) #f)) (cdr v.60$6630$6801))) v.63$6633$6807)) (cdr v.61$6631$6803)) #f)) (car v.61$6631$6803)) #f)) (car v.60$6630$6801)) #f)) (cdr v.58$6628$6797))) v.59$6629$6799)) (car v.58$6628$6797)) #f)) (cdr v.56$6626$6793))) v.57$6627$6795)) (car v.56$6626$6793)) #f)) (cdr v.54$6624$6789))) v.55$6625$6791)) (car v.54$6624$6789)) #f)) (cdr v.48$6618$6777)) #f)) (cdr v.51$6621$6783))) v.52$6622$6785)) (car v.51$6621$6783)) #f)) (cdr v.49$6619$6779)) #f)) (car v.49$6619$6779)) #f)) (car v.48$6618$6777)) #f)) (cdr expr$6563$6671))))) ((lambda (v.31$6601$6811) (if (pair? v.31$6601$6811) ((lambda (v.32$6602$6813) (if (pair? v.32$6602$6813) ((lambda (v.33$6603$6815) (if (compare$6565$6673 v.33$6603$6815 (rename$6564$6672 (quote unquote))) ((lambda (v.34$6604$6817) (if (pair? v.34$6604$6817) ((lambda (v.35$6605$6819) ((lambda (x$6820) ((lambda (v.36$6606$6821) (if (null? v.36$6606$6821) ((lambda (v.37$6607$6823) (if (pair? v.37$6607$6823) ((lambda (v.38$6608$6825) ((lambda (k$6826) ((lambda (v.39$6609$6827) (if (pair? v.39$6609$6827) ((lambda (v.40$6610$6829) ((lambda (i$6830) ((lambda (v.41$6611$6831) (if (pair? v.41$6611$6831) ((lambda (v.42$6612$6833) ((lambda (v$6834) ((lambda (v.43$6613$6835) (if (pair? v.43$6613$6835) ((lambda (v.44$6614$6837) (if (pair? v.44$6614$6837) ((lambda (v.45$6615$6839) (if (equal? v.45$6615$6839 #t) ((lambda (v.46$6616$6841) (if (null? v.46$6616$6841) ((lambda (v.47$6617$6843) (if (null? v.47$6617$6843) (cons (cons-source (rename$6564$6672 (quote match-extract-vars)) (cons-source x$6820 (cons-source k$6826 (cons-source i$6830 (cons-source v$6834 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (x k i v))) (quote (match-extract-vars x k i v))) #f) #f)) (cdr v.43$6613$6835)) #f)) (cdr v.44$6614$6837)) #f)) (car v.44$6614$6837)) #f)) (car v.43$6613$6835)) #f)) (cdr v.41$6611$6831))) v.42$6612$6833)) (car v.41$6611$6831)) #f)) (cdr v.39$6609$6827))) v.40$6610$6829)) (car v.39$6609$6827)) #f)) (cdr v.37$6607$6823))) v.38$6608$6825)) (car v.37$6607$6823)) #f)) (cdr v.31$6601$6811)) #f)) (cdr v.34$6604$6817))) v.35$6605$6819)) (car v.34$6604$6817)) #f)) (cdr v.32$6602$6813)) #f)) (car v.32$6602$6813)) #f)) (car v.31$6601$6811)) #f)) (cdr expr$6563$6671))))) ((lambda (v.16$6586$6845) (if (pair? v.16$6586$6845) ((lambda (v.17$6587$6847) (if (pair? v.17$6587$6847) ((lambda (v.18$6588$6849) (if (compare$6565$6673 v.18$6588$6849 (rename$6564$6672 (quote unquote-splicing))) ((lambda (v.19$6589$6851) (if (pair? v.19$6589$6851) ((lambda (v.20$6590$6853) ((lambda (x$6854) ((lambda (v.21$6591$6855) (if (null? v.21$6591$6855) ((lambda (v.22$6592$6857) (if (pair? v.22$6592$6857) ((lambda (v.23$6593$6859) ((lambda (k$6860) ((lambda (v.24$6594$6861) (if (pair? v.24$6594$6861) ((lambda (v.25$6595$6863) ((lambda (i$6864) ((lambda (v.26$6596$6865) (if (pair? v.26$6596$6865) ((lambda (v.27$6597$6867) ((lambda (v$6868) ((lambda (v.28$6598$6869) (if (pair? v.28$6598$6869) ((lambda (v.29$6599$6871) ((lambda (d$6872) ((lambda (v.30$6600$6873) (if (null? v.30$6600$6873) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source (cons-source (rename$6564$6672 (quote unquote)) (cons-source x$6854 (quote ()) (quote (x))) (quote (unquote x))) (cons-source k$6860 (cons-source i$6864 (cons-source v$6868 (cons-source d$6872 (quote ()) (quote (d))) (quote (v d))) (quote (i v d))) (quote (k i v d))) (quote ((unquote x) k i v d))) (quote (match-extract-quasiquote-vars (unquote x) k i v d))) #f) #f)) (cdr v.28$6598$6869))) v.29$6599$6871)) (car v.28$6598$6869)) #f)) (cdr v.26$6596$6865))) v.27$6597$6867)) (car v.26$6596$6865)) #f)) (cdr v.24$6594$6861))) v.25$6595$6863)) (car v.24$6594$6861)) #f)) (cdr v.22$6592$6857))) v.23$6593$6859)) (car v.22$6592$6857)) #f)) (cdr v.16$6586$6845)) #f)) (cdr v.19$6589$6851))) v.20$6590$6853)) (car v.19$6589$6851)) #f)) (cdr v.17$6587$6847)) #f)) (car v.17$6587$6847)) #f)) (car v.16$6586$6845)) #f)) (cdr expr$6563$6671))))) ((lambda (v.1$6571$6875) (if (pair? v.1$6571$6875) ((lambda (v.2$6572$6877) (if (pair? v.2$6572$6877) ((lambda (v.3$6573$6879) (if (compare$6565$6673 v.3$6573$6879 (rename$6564$6672 (quote quasiquote))) ((lambda (v.4$6574$6881) (if (pair? v.4$6574$6881) ((lambda (v.5$6575$6883) ((lambda (x$6884) ((lambda (v.6$6576$6885) (if (null? v.6$6576$6885) ((lambda (v.7$6577$6887) (if (pair? v.7$6577$6887) ((lambda (v.8$6578$6889) ((lambda (k$6890) ((lambda (v.9$6579$6891) (if (pair? v.9$6579$6891) ((lambda (v.10$6580$6893) ((lambda (i$6894) ((lambda (v.11$6581$6895) (if (pair? v.11$6581$6895) ((lambda (v.12$6582$6897) ((lambda (v$6898) ((lambda (v.13$6583$6899) (if (pair? v.13$6583$6899) ((lambda (v.14$6584$6901) ((lambda (d$6902) ((lambda (v.15$6585$6903) (if (null? v.15$6585$6903) (cons (cons-source (rename$6564$6672 (quote match-extract-quasiquote-vars)) (cons-source x$6884 (cons-source k$6890 (cons-source i$6894 (cons-source v$6898 (cons-source (cons-source #t d$6902 (quote (#t . d))) (quote ()) (quote ((#t . d)))) (quote (v (#t . d)))) (quote (i v (#t . d)))) (quote (k i v (#t . d)))) (quote (x k i v (#t . d)))) (quote (match-extract-quasiquote-vars x k i v (#t . d)))) #f) #f)) (cdr v.13$6583$6899))) v.14$6584$6901)) (car v.13$6583$6899)) #f)) (cdr v.11$6581$6895))) v.12$6582$6897)) (car v.11$6581$6895)) #f)) (cdr v.9$6579$6891))) v.10$6580$6893)) (car v.9$6579$6891)) #f)) (cdr v.7$6577$6887))) v.8$6578$6889)) (car v.7$6577$6887)) #f)) (cdr v.1$6571$6875)) #f)) (cdr v.4$6574$6881))) v.5$6575$6883)) (car v.4$6574$6881)) #f)) (cdr v.2$6572$6877)) #f)) (car v.2$6572$6877)) #f)) (car v.1$6571$6875)) #f)) (cdr expr$6563$6671))))) (match-extract-vars-step lambda (expr$6441$6469 rename$6442$6470 compare$6443$6471) (car ((lambda (tmp$6473$6475) (if tmp$6473$6475 tmp$6473$6475 (cons (error/loc "no expansion for" expr$6441$6469) #f))) ((lambda (v.1$6449$6476) (if (pair? v.1$6449$6476) ((lambda (v.2$6450$6478) ((lambda (p$6479) ((lambda (v.3$6451$6480) (if (pair? v.3$6451$6480) ((lambda (v.4$6452$6482) ((lambda (k$6483) ((lambda (v.5$6453$6484) (if (pair? v.5$6453$6484) ((lambda (v.6$6454$6486) ((lambda (i$6487) ((lambda (v.7$6455$6488) (if (pair? v.7$6455$6488) ((lambda (v.8$6456$6490) ((lambda (v$6491) ((lambda (v.9$6457$6492) (if (pair? v.9$6457$6492) ((lambda (v.10$6458$6494) ((lambda (w.11$6459$6496 v2-ls13$6461$6497 v2-ls-ls14$6462$6498) ((lambda (lp.12$6460$6499) (set! lp.12$6460$6499 (lambda (w.11$6459$6500 v2-ls13$6461$6501 v2-ls-ls14$6462$6502) (if (null? w.11$6459$6500) ((lambda (v2$6503 v2-ls$6504) ((lambda (v.20$6468$6505) (if (null? v.20$6468$6505) (cons (cons-source (rename$6442$6470 (quote match-extract-vars)) (cons-source p$6479 (cons-source k$6483 (cons-source (append (map (lambda (v2$6507) v2$6507) v2$6503) i$6487) (cons-source (append (map (lambda (v2$6508 v2-ls$6509) (cons-source v2$6508 (cons-source v2-ls$6509 (quote ()) (quote (v2-ls))) (quote (v2 v2-ls)))) v2$6503 v2-ls$6504) v$6491) (quote ()) (quote (((v2 v2-ls) ... . v)))) (quote ((v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (p k (v2 ... . i) ((v2 v2-ls) ... . v)))) (quote (match-extract-vars p k (v2 ... . i) ((v2 v2-ls) ... . v)))) #f) #f)) (cdr v.9$6457$6492))) (reverse v2-ls13$6461$6501) (reverse v2-ls-ls14$6462$6502)) (if (pair? w.11$6459$6500) ((lambda (v.15$6463$6511) (if (pair? v.15$6463$6511) ((lambda (v.16$6464$6513) ((lambda (v2$6514) ((lambda (v.17$6465$6515) (if (pair? v.17$6465$6515) ((lambda (v.18$6466$6517) ((lambda (v2-ls$6518) ((lambda (v.19$6467$6519) (if (null? v.19$6467$6519) (lp.12$6460$6499 (cdr w.11$6459$6500) (cons v2$6514 v2-ls13$6461$6501) (cons v2-ls$6518 v2-ls-ls14$6462$6502)) #f)) (cdr v.17$6465$6515))) v.18$6466$6517)) (car v.17$6465$6515)) #f)) (cdr v.15$6463$6511))) v.16$6464$6513)) (car v.15$6463$6511)) #f)) (car w.11$6459$6500)) #f)))) (lp.12$6460$6499 w.11$6459$6496 v2-ls13$6461$6497 v2-ls-ls14$6462$6498)) #f)) v.10$6458$6494 (quote ()) (quote ()))) (car v.9$6457$6492)) #f)) (cdr v.7$6455$6488))) v.8$6456$6490)) (car v.7$6455$6488)) #f)) (cdr v.5$6453$6484))) v.6$6454$6486)) (car v.5$6453$6484)) #f)) (cdr v.3$6451$6480))) v.4$6452$6482)) (car v.3$6451$6480)) #f)) (cdr v.1$6449$6476))) v.2$6450$6478)) (car v.1$6449$6476)) #f)) (cdr expr$6441$6469))))) (match-extract-vars lambda (expr$5525$5709 rename$5526$5710 compare$5527$5711) (car ((lambda (tmp$5713$5715) (if tmp$5713$5715 tmp$5713$5715 ((lambda (tmp$5717$5719) (if tmp$5717$5719 tmp$5717$5719 ((lambda (tmp$5721$5723) (if tmp$5721$5723 tmp$5721$5723 ((lambda (tmp$5725$5727) (if tmp$5725$5727 tmp$5725$5727 ((lambda (tmp$5729$5731) (if tmp$5729$5731 tmp$5729$5731 ((lambda (tmp$5733$5735) (if tmp$5733$5735 tmp$5733$5735 ((lambda (tmp$5737$5739) (if tmp$5737$5739 tmp$5737$5739 ((lambda (tmp$5741$5743) (if tmp$5741$5743 tmp$5741$5743 ((lambda (tmp$5745$5747) (if tmp$5745$5747 tmp$5745$5747 ((lambda (tmp$5749$5751) (if tmp$5749$5751 tmp$5749$5751 ((lambda (tmp$5753$5755) (if tmp$5753$5755 tmp$5753$5755 ((lambda (tmp$5757$5759) (if tmp$5757$5759 tmp$5757$5759 ((lambda (tmp$5761$5763) (if tmp$5761$5763 tmp$5761$5763 ((lambda (tmp$5765$5767) (if tmp$5765$5767 tmp$5765$5767 ((lambda (tmp$5769$5771) (if tmp$5769$5771 tmp$5769$5771 ((lambda (tmp$5773$5775) (if tmp$5773$5775 tmp$5773$5775 ((lambda (tmp$5777$5779) (if tmp$5777$5779 tmp$5777$5779 ((lambda (tmp$5781$5783) (if tmp$5781$5783 tmp$5781$5783 ((lambda (tmp$5785$5787) (if tmp$5785$5787 tmp$5785$5787 (cons (error/loc "no expansion for" expr$5525$5709) #f))) ((lambda (v.168$5700$5788) (if (pair? v.168$5700$5788) ((lambda (v.169$5701$5790) ((lambda (p$5791) ((lambda (v.170$5702$5792) (if (pair? v.170$5702$5792) ((lambda (v.171$5703$5794) (if (list? v.171$5703$5794) ((lambda (k$5796) ((lambda (v.172$5704$5797) (if (pair? v.172$5704$5797) ((lambda (v.173$5705$5799) (if (list? v.173$5705$5799) ((lambda (i$5801) ((lambda (v.174$5706$5802) (if (pair? v.174$5706$5802) ((lambda (v.175$5707$5804) ((lambda (v$5805) ((lambda (v.176$5708$5806) (if (null? v.176$5708$5806) (cons (cons-source (rename$5526$5710 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source (cons-source (rename$5526$5710 (quote syntax-rules)) (cons-source i$5801 (cons-source (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source p$5791 (cons-source (rename$5526$5710 (quote sk)) (cons-source (rename$5526$5710 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (p sk fk))) (quote (new-sym? p sk fk))) (cons-source (rename$5526$5710 (quote sk)) (quote ()) (quote (sk))) (quote ((new-sym? p sk fk) sk))) (cons-source (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source (rename$5526$5710 (quote any)) (cons-source (rename$5526$5710 (quote sk)) (cons-source (rename$5526$5710 (quote fk)) (quote ()) (quote (fk))) (quote (sk fk))) (quote (any sk fk))) (quote (new-sym? any sk fk))) (cons-source (rename$5526$5710 (quote fk)) (quote ()) (quote (fk))) (quote ((new-sym? any sk fk) fk))) (quote ()) (quote (((new-sym? any sk fk) fk)))) (quote (((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ((i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (quote ()) (quote ((syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote (new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk))))) (quote ()) (quote ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))))) (cons-source (cons-source (rename$5526$5710 (quote new-sym?)) (cons-source (rename$5526$5710 (quote random-sym-to-match)) (cons-source (append (map (lambda (k$5808) k$5808) k$5796) (cons-source (cons-source (cons-source p$5791 (cons-source (rename$5526$5710 (quote p-ls)) (quote ()) (quote (p-ls))) (quote (p p-ls))) v$5805 (quote ((p p-ls) . v))) (quote ()) (quote (((p p-ls) . v))))) (cons-source (append (map (lambda (k$5809) k$5809) k$5796) (cons-source v$5805 (quote ()) (quote (v)))) (quote ()) (quote ((k ... v)))) (quote ((k ... ((p p-ls) . v)) (k ... v)))) (quote (random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v)))) (quote ()) (quote ((new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) (quote (let-syntax ((new-sym? (syntax-rules (i ...) ((new-sym? p sk fk) sk) ((new-sym? any sk fk) fk)))) (new-sym? random-sym-to-match (k ... ((p p-ls) . v)) (k ... v))))) #f) #f)) (cdr v.174$5706$5802))) v.175$5707$5804)) (car v.174$5706$5802)) #f)) (cdr v.172$5704$5797))) v.173$5705$5799) #f)) (car v.172$5704$5797)) #f)) (cdr v.170$5702$5792))) v.171$5703$5794) #f)) (car v.170$5702$5792)) #f)) (cdr v.168$5700$5788))) v.169$5701$5790)) (car v.168$5700$5788)) #f)) (cdr expr$5525$5709))))) ((lambda (v.159$5691$5810) (if (pair? v.159$5691$5810) ((lambda (v.160$5692$5812) (if (compare$5527$5711 v.160$5692$5812 (rename$5526$5710 (quote ..1))) ((lambda (v.161$5693$5814) (if (pair? v.161$5693$5814) ((lambda (v.162$5694$5816) (if (list? v.162$5694$5816) ((lambda (k$5818) ((lambda (v.163$5695$5819) (if (pair? v.163$5695$5819) ((lambda (v.164$5696$5821) ((lambda (i$5822) ((lambda (v.165$5697$5823) (if (pair? v.165$5697$5823) ((lambda (v.166$5698$5825) ((lambda (v$5826) ((lambda (v.167$5699$5827) (if (null? v.167$5699$5827) (cons (append (map (lambda (k$5829) k$5829) k$5818) (cons-source v$5826 (quote ()) (quote (v)))) #f) #f)) (cdr v.165$5697$5823))) v.166$5698$5825)) (car v.165$5697$5823)) #f)) (cdr v.163$5695$5819))) v.164$5696$5821)) (car v.163$5695$5819)) #f)) (cdr v.161$5693$5814))) v.162$5694$5816) #f)) (car v.161$5693$5814)) #f)) (cdr v.159$5691$5810)) #f)) (car v.159$5691$5810)) #f)) (cdr expr$5525$5709))))) ((lambda (v.150$5682$5830) (if (pair? v.150$5682$5830) ((lambda (v.151$5683$5832) (if (compare$5527$5711 v.151$5683$5832 (rename$5526$5710 (quote ***))) ((lambda (v.152$5684$5834) (if (pair? v.152$5684$5834) ((lambda (v.153$5685$5836) (if (list? v.153$5685$5836) ((lambda (k$5838) ((lambda (v.154$5686$5839) (if (pair? v.154$5686$5839) ((lambda (v.155$5687$5841) ((lambda (i$5842) ((lambda (v.156$5688$5843) (if (pair? v.156$5688$5843) ((lambda (v.157$5689$5845) ((lambda (v$5846) ((lambda (v.158$5690$5847) (if (null? v.158$5690$5847) (cons (append (map (lambda (k$5849) k$5849) k$5838) (cons-source v$5846 (quote ()) (quote (v)))) #f) #f)) (cdr v.156$5688$5843))) v.157$5689$5845)) (car v.156$5688$5843)) #f)) (cdr v.154$5686$5839))) v.155$5687$5841)) (car v.154$5686$5839)) #f)) (cdr v.152$5684$5834))) v.153$5685$5836) #f)) (car v.152$5684$5834)) #f)) (cdr v.150$5682$5830)) #f)) (car v.150$5682$5830)) #f)) (cdr expr$5525$5709))))) ((lambda (v.141$5673$5850) (if (pair? v.141$5673$5850) ((lambda (v.142$5674$5852) (if (compare$5527$5711 v.142$5674$5852 (rename$5526$5710 (quote ___))) ((lambda (v.143$5675$5854) (if (pair? v.143$5675$5854) ((lambda (v.144$5676$5856) (if (list? v.144$5676$5856) ((lambda (k$5858) ((lambda (v.145$5677$5859) (if (pair? v.145$5677$5859) ((lambda (v.146$5678$5861) ((lambda (i$5862) ((lambda (v.147$5679$5863) (if (pair? v.147$5679$5863) ((lambda (v.148$5680$5865) ((lambda (v$5866) ((lambda (v.149$5681$5867) (if (null? v.149$5681$5867) (cons (append (map (lambda (k$5869) k$5869) k$5858) (cons-source v$5866 (quote ()) (quote (v)))) #f) #f)) (cdr v.147$5679$5863))) v.148$5680$5865)) (car v.147$5679$5863)) #f)) (cdr v.145$5677$5859))) v.146$5678$5861)) (car v.145$5677$5859)) #f)) (cdr v.143$5675$5854))) v.144$5676$5856) #f)) (car v.143$5675$5854)) #f)) (cdr v.141$5673$5850)) #f)) (car v.141$5673$5850)) #f)) (cdr expr$5525$5709))))) ((lambda (v.132$5664$5870) (if (pair? v.132$5664$5870) ((lambda (v.133$5665$5872) (if (compare$5527$5711 v.133$5665$5872 (rename$5526$5710 (quote _))) ((lambda (v.134$5666$5874) (if (pair? v.134$5666$5874) ((lambda (v.135$5667$5876) (if (list? v.135$5667$5876) ((lambda (k$5878) ((lambda (v.136$5668$5879) (if (pair? v.136$5668$5879) ((lambda (v.137$5669$5881) ((lambda (i$5882) ((lambda (v.138$5670$5883) (if (pair? v.138$5670$5883) ((lambda (v.139$5671$5885) ((lambda (v$5886) ((lambda (v.140$5672$5887) (if (null? v.140$5672$5887) (cons (append (map (lambda (k$5889) k$5889) k$5878) (cons-source v$5886 (quote ()) (quote (v)))) #f) #f)) (cdr v.138$5670$5883))) v.139$5671$5885)) (car v.138$5670$5883)) #f)) (cdr v.136$5668$5879))) v.137$5669$5881)) (car v.136$5668$5879)) #f)) (cdr v.134$5666$5874))) v.135$5667$5876) #f)) (car v.134$5666$5874)) #f)) (cdr v.132$5664$5870)) #f)) (car v.132$5664$5870)) #f)) (cdr expr$5525$5709))))) ((lambda (v.128$5660$5890) (if (pair? v.128$5660$5890) ((lambda (v.129$5661$5892) (if (vector? v.129$5661$5892) ((lambda (v.130$5662$5894) (if (list? v.130$5662$5894) ((lambda (p$5896) ((lambda (v.131$5663$5897) ((lambda (x$5898) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5896 x$5898 (quote ((p ...) . x))) (quote (match-extract-vars (p ...) . x))) #f)) v.131$5663$5897)) (cdr v.128$5660$5890))) v.130$5662$5894) #f)) (vector->list v.129$5661$5892)) #f)) (car v.128$5660$5890)) #f)) (cdr expr$5525$5709))))) ((lambda (v.117$5649$5899) (if (pair? v.117$5649$5899) ((lambda (v.118$5650$5901) (if (pair? v.118$5650$5901) ((lambda (v.119$5651$5903) ((lambda (p$5904) ((lambda (v.120$5652$5905) ((lambda (q$5906) ((lambda (v.121$5653$5907) (if (pair? v.121$5653$5907) ((lambda (v.122$5654$5909) ((lambda (k$5910) ((lambda (v.123$5655$5911) (if (pair? v.123$5655$5911) ((lambda (v.124$5656$5913) ((lambda (i$5914) ((lambda (v.125$5657$5915) (if (pair? v.125$5657$5915) ((lambda (v.126$5658$5917) ((lambda (v$5918) ((lambda (v.127$5659$5919) (if (null? v.127$5659$5919) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5904 (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars-step)) (cons-source q$5906 (cons-source k$5910 (cons-source i$5914 (cons-source v$5918 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote (q k i v))) (quote (match-extract-vars-step q k i v))) (cons-source i$5914 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step q k i v) i ()))) (quote (p (match-extract-vars-step q k i v) i ()))) (quote (match-extract-vars p (match-extract-vars-step q k i v) i ()))) #f) #f)) (cdr v.125$5657$5915))) v.126$5658$5917)) (car v.125$5657$5915)) #f)) (cdr v.123$5655$5911))) v.124$5656$5913)) (car v.123$5655$5911)) #f)) (cdr v.121$5653$5907))) v.122$5654$5909)) (car v.121$5653$5907)) #f)) (cdr v.117$5649$5899))) v.120$5652$5905)) (cdr v.118$5650$5901))) v.119$5651$5903)) (car v.118$5650$5901)) #f)) (car v.117$5649$5899)) #f)) (cdr expr$5525$5709))))) ((lambda (v.104$5636$5921) (if (pair? v.104$5636$5921) ((lambda (v.105$5637$5923) (if (pair? v.105$5637$5923) ((lambda (v.106$5638$5925) ((lambda (p$5926) ((lambda (v.107$5639$5927) (if (pair? v.107$5639$5927) ((lambda (v.108$5640$5929) ((lambda (q$5930) ((lambda (v.109$5641$5931) ((lambda (r$5932) ((lambda (v.110$5642$5933) (if (pair? v.110$5642$5933) ((lambda (v.111$5643$5935) ((lambda (k$5936) ((lambda (v.112$5644$5937) (if (pair? v.112$5644$5937) ((lambda (v.113$5645$5939) ((lambda (i$5940) ((lambda (v.114$5646$5941) (if (pair? v.114$5646$5941) ((lambda (v.115$5647$5943) ((lambda (v$5944) ((lambda (v.116$5648$5945) (if (null? v.116$5648$5945) (cons (cons-source (rename$5526$5710 (quote match-check-ellipsis)) (cons-source q$5930 (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source (cons-source p$5926 r$5932 (quote (p . r))) (cons-source k$5936 (cons-source i$5940 (cons-source v$5944 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((p . r) k i v))) (quote (match-extract-vars (p . r) k i v))) (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5926 (cons-source (cons-source (rename$5526$5710 (quote match-extract-vars-step)) (cons-source (cons-source q$5930 r$5932 (quote (q . r))) (cons-source k$5936 (cons-source i$5940 (cons-source v$5944 (quote ()) (quote (v))) (quote (i v))) (quote (k i v))) (quote ((q . r) k i v))) (quote (match-extract-vars-step (q . r) k i v))) (cons-source i$5940 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-extract-vars-step (q . r) k i v) i ()))) (quote (p (match-extract-vars-step (q . r) k i v) i ()))) (quote (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ()))) (quote ()) (quote ((match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) (quote ((match-extract-vars (p . r) k i v) (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) (quote (q (match-extract-vars (p . r) k i v) (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) (quote (match-check-ellipsis q (match-extract-vars (p . r) k i v) (match-extract-vars p (match-extract-vars-step (q . r) k i v) i ())))) #f) #f)) (cdr v.114$5646$5941))) v.115$5647$5943)) (car v.114$5646$5941)) #f)) (cdr v.112$5644$5937))) v.113$5645$5939)) (car v.112$5644$5937)) #f)) (cdr v.110$5642$5933))) v.111$5643$5935)) (car v.110$5642$5933)) #f)) (cdr v.104$5636$5921))) v.109$5641$5931)) (cdr v.107$5639$5927))) v.108$5640$5929)) (car v.107$5639$5927)) #f)) (cdr v.105$5637$5923))) v.106$5638$5925)) (car v.105$5637$5923)) #f)) (car v.104$5636$5921)) #f)) (cdr expr$5525$5709))))) ((lambda (v.99$5631$5947) (if (pair? v.99$5631$5947) ((lambda (v.100$5632$5949) (if (pair? v.100$5632$5949) ((lambda (v.101$5633$5951) (if (compare$5527$5711 v.101$5633$5951 (rename$5526$5710 (quote not))) ((lambda (v.102$5634$5953) ((lambda (p$5954) ((lambda (v.103$5635$5955) ((lambda (x$5956) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5954 x$5956 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.103$5635$5955)) (cdr v.99$5631$5947))) v.102$5634$5953)) (cdr v.100$5632$5949)) #f)) (car v.100$5632$5949)) #f)) (car v.99$5631$5947)) #f)) (cdr expr$5525$5709))))) ((lambda (v.94$5626$5957) (if (pair? v.94$5626$5957) ((lambda (v.95$5627$5959) (if (pair? v.95$5627$5959) ((lambda (v.96$5628$5961) (if (compare$5527$5711 v.96$5628$5961 (rename$5526$5710 (quote or))) ((lambda (v.97$5629$5963) ((lambda (p$5964) ((lambda (v.98$5630$5965) ((lambda (x$5966) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5964 x$5966 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.98$5630$5965)) (cdr v.94$5626$5957))) v.97$5629$5963)) (cdr v.95$5627$5959)) #f)) (car v.95$5627$5959)) #f)) (car v.94$5626$5957)) #f)) (cdr expr$5525$5709))))) ((lambda (v.89$5621$5967) (if (pair? v.89$5621$5967) ((lambda (v.90$5622$5969) (if (pair? v.90$5622$5969) ((lambda (v.91$5623$5971) (if (compare$5527$5711 v.91$5623$5971 (rename$5526$5710 (quote and))) ((lambda (v.92$5624$5973) ((lambda (p$5974) ((lambda (v.93$5625$5975) ((lambda (x$5976) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$5974 x$5976 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.93$5625$5975)) (cdr v.89$5621$5967))) v.92$5624$5973)) (cdr v.90$5622$5969)) #f)) (car v.90$5622$5969)) #f)) (car v.89$5621$5967)) #f)) (cdr expr$5525$5709))))) ((lambda (v.76$5608$5977) (if (pair? v.76$5608$5977) ((lambda (v.77$5609$5979) (if (pair? v.77$5609$5979) ((lambda (v.78$5610$5981) (if (compare$5527$5711 v.78$5610$5981 (rename$5526$5710 (quote quasiquote))) ((lambda (v.79$5611$5983) (if (pair? v.79$5611$5983) ((lambda (v.80$5612$5985) ((lambda (x$5986) ((lambda (v.81$5613$5987) (if (null? v.81$5613$5987) ((lambda (v.82$5614$5989) (if (pair? v.82$5614$5989) ((lambda (v.83$5615$5991) ((lambda (k$5992) ((lambda (v.84$5616$5993) (if (pair? v.84$5616$5993) ((lambda (v.85$5617$5995) ((lambda (i$5996) ((lambda (v.86$5618$5997) (if (pair? v.86$5618$5997) ((lambda (v.87$5619$5999) ((lambda (v$6000) ((lambda (v.88$5620$6001) (if (null? v.88$5620$6001) (cons (cons-source (rename$5526$5710 (quote match-extract-quasiquote-vars)) (cons-source x$5986 (cons-source k$5992 (cons-source i$5996 (cons-source v$6000 (cons-source (cons-source #t (quote ()) (quote (#t))) (quote ()) (quote ((#t)))) (quote (v (#t)))) (quote (i v (#t)))) (quote (k i v (#t)))) (quote (x k i v (#t)))) (quote (match-extract-quasiquote-vars x k i v (#t)))) #f) #f)) (cdr v.86$5618$5997))) v.87$5619$5999)) (car v.86$5618$5997)) #f)) (cdr v.84$5616$5993))) v.85$5617$5995)) (car v.84$5616$5993)) #f)) (cdr v.82$5614$5989))) v.83$5615$5991)) (car v.82$5614$5989)) #f)) (cdr v.76$5608$5977)) #f)) (cdr v.79$5611$5983))) v.80$5612$5985)) (car v.79$5611$5983)) #f)) (cdr v.77$5609$5979)) #f)) (car v.77$5609$5979)) #f)) (car v.76$5608$5977)) #f)) (cdr expr$5525$5709))))) ((lambda (v.63$5595$6003) (if (pair? v.63$5595$6003) ((lambda (v.64$5596$6005) (if (pair? v.64$5596$6005) ((lambda (v.65$5597$6007) (if (compare$5527$5711 v.65$5597$6007 (rename$5526$5710 (quote quote))) ((lambda (v.66$5598$6009) (if (pair? v.66$5598$6009) ((lambda (v.67$5599$6011) ((lambda (x$6012) ((lambda (v.68$5600$6013) (if (null? v.68$5600$6013) ((lambda (v.69$5601$6015) (if (pair? v.69$5601$6015) ((lambda (v.70$5602$6017) (if (list? v.70$5602$6017) ((lambda (k$6019) ((lambda (v.71$5603$6020) (if (pair? v.71$5603$6020) ((lambda (v.72$5604$6022) ((lambda (i$6023) ((lambda (v.73$5605$6024) (if (pair? v.73$5605$6024) ((lambda (v.74$5606$6026) ((lambda (v$6027) ((lambda (v.75$5607$6028) (if (null? v.75$5607$6028) (cons (append (map (lambda (k$6030) k$6030) k$6019) (cons-source v$6027 (quote ()) (quote (v)))) #f) #f)) (cdr v.73$5605$6024))) v.74$5606$6026)) (car v.73$5605$6024)) #f)) (cdr v.71$5603$6020))) v.72$5604$6022)) (car v.71$5603$6020)) #f)) (cdr v.69$5601$6015))) v.70$5602$6017) #f)) (car v.69$5601$6015)) #f)) (cdr v.63$5595$6003)) #f)) (cdr v.66$5598$6009))) v.67$5599$6011)) (car v.66$5598$6009)) #f)) (cdr v.64$5596$6005)) #f)) (car v.64$5596$6005)) #f)) (car v.63$5595$6003)) #f)) (cdr expr$5525$5709))))) ((lambda (v.54$5586$6031) (if (pair? v.54$5586$6031) ((lambda (v.55$5587$6033) (if (pair? v.55$5587$6033) ((lambda (v.56$5588$6035) (if (compare$5527$5711 v.56$5588$6035 (rename$5526$5710 (quote =))) ((lambda (v.57$5589$6037) (if (pair? v.57$5589$6037) ((lambda (v.58$5590$6039) ((lambda (proc$6040) ((lambda (v.59$5591$6041) (if (pair? v.59$5591$6041) ((lambda (v.60$5592$6043) ((lambda (p$6044) ((lambda (v.61$5593$6045) (if (null? v.61$5593$6045) ((lambda (v.62$5594$6047) ((lambda (x$6048) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6044 x$6048 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.62$5594$6047)) (cdr v.54$5586$6031)) #f)) (cdr v.59$5591$6041))) v.60$5592$6043)) (car v.59$5591$6041)) #f)) (cdr v.57$5589$6037))) v.58$5590$6039)) (car v.57$5589$6037)) #f)) (cdr v.55$5587$6033)) #f)) (car v.55$5587$6033)) #f)) (car v.54$5586$6031)) #f)) (cdr expr$5525$5709))))) ((lambda (v.38$5570$6049) (if (pair? v.38$5570$6049) ((lambda (v.39$5571$6051) (if (pair? v.39$5571$6051) ((lambda (v.40$5572$6053) (if (compare$5527$5711 v.40$5572$6053 (rename$5526$5710 (quote object))) ((lambda (v.41$5573$6055) (if (pair? v.41$5573$6055) ((lambda (v.42$5574$6057) ((lambda (rec$6058) ((lambda (v.43$5575$6059) ((lambda (w.44$5576$6061 f-ls46$5578$6062 p-ls47$5579$6063) ((lambda (lp.45$5577$6064) (set! lp.45$5577$6064 (lambda (w.44$5576$6065 f-ls46$5578$6066 p-ls47$5579$6067) (if (null? w.44$5576$6065) ((lambda (f$6068 p$6069) ((lambda (v.53$5585$6070) ((lambda (x$6071) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6069 x$6071 (quote ((p ...) . x))) (quote (match-extract-vars (p ...) . x))) #f)) v.53$5585$6070)) (cdr v.38$5570$6049))) (reverse f-ls46$5578$6066) (reverse p-ls47$5579$6067)) (if (pair? w.44$5576$6065) ((lambda (v.48$5580$6073) (if (pair? v.48$5580$6073) ((lambda (v.49$5581$6075) ((lambda (f$6076) ((lambda (v.50$5582$6077) (if (pair? v.50$5582$6077) ((lambda (v.51$5583$6079) ((lambda (p$6080) ((lambda (v.52$5584$6081) (if (null? v.52$5584$6081) (lp.45$5577$6064 (cdr w.44$5576$6065) (cons f$6076 f-ls46$5578$6066) (cons p$6080 p-ls47$5579$6067)) #f)) (cdr v.50$5582$6077))) v.51$5583$6079)) (car v.50$5582$6077)) #f)) (cdr v.48$5580$6073))) v.49$5581$6075)) (car v.48$5580$6073)) #f)) (car w.44$5576$6065)) #f)))) (lp.45$5577$6064 w.44$5576$6061 f-ls46$5578$6062 p-ls47$5579$6063)) #f)) v.43$5575$6059 (quote ()) (quote ()))) (cdr v.41$5573$6055))) v.42$5574$6057)) (car v.41$5573$6055)) #f)) (cdr v.39$5571$6051)) #f)) (car v.39$5571$6051)) #f)) (car v.38$5570$6049)) #f)) (cdr expr$5525$5709))))) ((lambda (v.22$5554$6083) (if (pair? v.22$5554$6083) ((lambda (v.23$5555$6085) (if (pair? v.23$5555$6085) ((lambda (v.24$5556$6087) (if (compare$5527$5711 v.24$5556$6087 (rename$5526$5710 (quote @))) ((lambda (v.25$5557$6089) (if (pair? v.25$5557$6089) ((lambda (v.26$5558$6091) ((lambda (rec$6092) ((lambda (v.27$5559$6093) ((lambda (w.28$5560$6095 f-ls30$5562$6096 p-ls31$5563$6097) ((lambda (lp.29$5561$6098) (set! lp.29$5561$6098 (lambda (w.28$5560$6099 f-ls30$5562$6100 p-ls31$5563$6101) (if (null? w.28$5560$6099) ((lambda (f$6102 p$6103) ((lambda (v.37$5569$6104) ((lambda (x$6105) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6103 x$6105 (quote ((p ...) . x))) (quote (match-extract-vars (p ...) . x))) #f)) v.37$5569$6104)) (cdr v.22$5554$6083))) (reverse f-ls30$5562$6100) (reverse p-ls31$5563$6101)) (if (pair? w.28$5560$6099) ((lambda (v.32$5564$6107) (if (pair? v.32$5564$6107) ((lambda (v.33$5565$6109) ((lambda (f$6110) ((lambda (v.34$5566$6111) (if (pair? v.34$5566$6111) ((lambda (v.35$5567$6113) ((lambda (p$6114) ((lambda (v.36$5568$6115) (if (null? v.36$5568$6115) (lp.29$5561$6098 (cdr w.28$5560$6099) (cons f$6110 f-ls30$5562$6100) (cons p$6114 p-ls31$5563$6101)) #f)) (cdr v.34$5566$6111))) v.35$5567$6113)) (car v.34$5566$6111)) #f)) (cdr v.32$5564$6107))) v.33$5565$6109)) (car v.32$5564$6107)) #f)) (car w.28$5560$6099)) #f)))) (lp.29$5561$6098 w.28$5560$6095 f-ls30$5562$6096 p-ls31$5563$6097)) #f)) v.27$5559$6093 (quote ()) (quote ()))) (cdr v.25$5557$6089))) v.26$5558$6091)) (car v.25$5557$6089)) #f)) (cdr v.23$5555$6085)) #f)) (car v.23$5555$6085)) #f)) (car v.22$5554$6083)) #f)) (cdr expr$5525$5709))))) ((lambda (v.15$5547$6117) (if (pair? v.15$5547$6117) ((lambda (v.16$5548$6119) (if (pair? v.16$5548$6119) ((lambda (v.17$5549$6121) (if (compare$5527$5711 v.17$5549$6121 (rename$5526$5710 (quote struct))) ((lambda (v.18$5550$6123) (if (pair? v.18$5550$6123) ((lambda (v.19$5551$6125) ((lambda (rec$6126) ((lambda (v.20$5552$6127) ((lambda (p$6128) ((lambda (v.21$5553$6129) ((lambda (x$6130) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6128 x$6130 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.21$5553$6129)) (cdr v.15$5547$6117))) v.20$5552$6127)) (cdr v.18$5550$6123))) v.19$5551$6125)) (car v.18$5550$6123)) #f)) (cdr v.16$5548$6119)) #f)) (car v.16$5548$6119)) #f)) (car v.15$5547$6117)) #f)) (cdr expr$5525$5709))))) ((lambda (v.8$5540$6131) (if (pair? v.8$5540$6131) ((lambda (v.9$5541$6133) (if (pair? v.9$5541$6133) ((lambda (v.10$5542$6135) (if (compare$5527$5711 v.10$5542$6135 (rename$5526$5710 (quote $))) ((lambda (v.11$5543$6137) (if (pair? v.11$5543$6137) ((lambda (v.12$5544$6139) ((lambda (rec$6140) ((lambda (v.13$5545$6141) ((lambda (p$6142) ((lambda (v.14$5546$6143) ((lambda (x$6144) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6142 x$6144 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.14$5546$6143)) (cdr v.8$5540$6131))) v.13$5545$6141)) (cdr v.11$5543$6137))) v.12$5544$6139)) (car v.11$5543$6137)) #f)) (cdr v.9$5541$6133)) #f)) (car v.9$5541$6133)) #f)) (car v.8$5540$6131)) #f)) (cdr expr$5525$5709))))) ((lambda (v.1$5533$6145) (if (pair? v.1$5533$6145) ((lambda (v.2$5534$6147) (if (pair? v.2$5534$6147) ((lambda (v.3$5535$6149) (if (compare$5527$5711 v.3$5535$6149 (rename$5526$5710 (quote ?))) ((lambda (v.4$5536$6151) (if (pair? v.4$5536$6151) ((lambda (v.5$5537$6153) ((lambda (pred$6154) ((lambda (v.6$5538$6155) ((lambda (p$6156) ((lambda (v.7$5539$6157) ((lambda (x$6158) (cons (cons-source (rename$5526$5710 (quote match-extract-vars)) (cons-source p$6156 x$6158 (quote (p . x))) (quote (match-extract-vars p . x))) #f)) v.7$5539$6157)) (cdr v.1$5533$6145))) v.6$5538$6155)) (cdr v.4$5536$6151))) v.5$5537$6153)) (car v.4$5536$6151)) #f)) (cdr v.2$5534$6147)) #f)) (car v.2$5534$6147)) #f)) (car v.1$5533$6145)) #f)) (cdr expr$5525$5709))))) (match-record-named-refs lambda (expr$5335$5379 rename$5336$5380 compare$5337$5381) (car ((lambda (tmp$5383$5385) (if tmp$5383$5385 tmp$5383$5385 ((lambda (tmp$5387$5389) (if tmp$5387$5389 tmp$5387$5389 (cons (error/loc "no expansion for" expr$5335$5379) #f))) ((lambda (v.22$5364$5390) (if (pair? v.22$5364$5390) ((lambda (v.23$5365$5392) ((lambda (v$5393) ((lambda (v.24$5366$5394) (if (pair? v.24$5366$5394) ((lambda (v.25$5367$5396) ((lambda (rec$5397) ((lambda (v.26$5368$5398) (if (pair? v.26$5368$5398) ((lambda (v.27$5369$5400) (if (null? v.27$5369$5400) ((lambda (v.28$5370$5402) (if (pair? v.28$5370$5402) ((lambda (v.29$5371$5404) ((lambda (g+s$5405) ((lambda (v.30$5372$5406) (if (pair? v.30$5372$5406) ((lambda (v.31$5373$5408) (if (list? v.31$5373$5408) ((lambda (sk$5410) ((lambda (v.32$5374$5411) (if (pair? v.32$5374$5411) ((lambda (v.33$5375$5413) ((lambda (fk$5414) ((lambda (v.34$5376$5415) (if (pair? v.34$5376$5415) ((lambda (v.35$5377$5417) ((lambda (i$5418) ((lambda (v.36$5378$5419) (if (null? v.36$5378$5419) (cons (append (map (lambda (sk$5421) sk$5421) sk$5410) (cons-source i$5418 (quote ()) (quote (i)))) #f) #f)) (cdr v.34$5376$5415))) v.35$5377$5417)) (car v.34$5376$5415)) #f)) (cdr v.32$5374$5411))) v.33$5375$5413)) (car v.32$5374$5411)) #f)) (cdr v.30$5372$5406))) v.31$5373$5408) #f)) (car v.30$5372$5406)) #f)) (cdr v.28$5370$5402))) v.29$5371$5404)) (car v.28$5370$5402)) #f)) (cdr v.26$5368$5398)) #f)) (car v.26$5368$5398)) #f)) (cdr v.24$5366$5394))) v.25$5367$5396)) (car v.24$5366$5394)) #f)) (cdr v.22$5364$5390))) v.23$5365$5392)) (car v.22$5364$5390)) #f)) (cdr expr$5335$5379))))) ((lambda (v.1$5343$5422) (if (pair? v.1$5343$5422) ((lambda (v.2$5344$5424) ((lambda (v$5425) ((lambda (v.3$5345$5426) (if (pair? v.3$5345$5426) ((lambda (v.4$5346$5428) ((lambda (rec$5429) ((lambda (v.5$5347$5430) (if (pair? v.5$5347$5430) ((lambda (v.6$5348$5432) (if (pair? v.6$5348$5432) ((lambda (v.7$5349$5434) (if (pair? v.7$5349$5434) ((lambda (v.8$5350$5436) ((lambda (f$5437) ((lambda (v.9$5351$5438) (if (pair? v.9$5351$5438) ((lambda (v.10$5352$5440) ((lambda (p$5441) ((lambda (v.11$5353$5442) (if (null? v.11$5353$5442) ((lambda (v.12$5354$5444) ((lambda (q$5445) ((lambda (v.13$5355$5446) (if (pair? v.13$5355$5446) ((lambda (v.14$5356$5448) ((lambda (g+s$5449) ((lambda (v.15$5357$5450) (if (pair? v.15$5357$5450) ((lambda (v.16$5358$5452) ((lambda (sk$5453) ((lambda (v.17$5359$5454) (if (pair? v.17$5359$5454) ((lambda (v.18$5360$5456) ((lambda (fk$5457) ((lambda (v.19$5361$5458) (if (pair? v.19$5361$5458) ((lambda (v.20$5362$5460) ((lambda (i$5461) ((lambda (v.21$5363$5462) (if (null? v.21$5363$5462) (cons (cons-source (rename$5336$5380 (quote let)) (cons-source (cons-source (cons-source (rename$5336$5380 (quote w)) (cons-source (cons-source (rename$5336$5380 (quote slot-ref)) (cons-source rec$5429 (cons-source v$5425 (cons-source (cons-source (rename$5336$5380 (quote quote)) (cons-source f$5437 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (quote ()) (quote ((slot-ref rec v (quote f))))) (quote (w (slot-ref rec v (quote f))))) (quote ()) (quote ((w (slot-ref rec v (quote f)))))) (cons-source (cons-source (rename$5336$5380 (quote match-one)) (cons-source (rename$5336$5380 (quote w)) (cons-source p$5441 (cons-source (cons-source (cons-source (rename$5336$5380 (quote slot-ref)) (cons-source rec$5429 (cons-source v$5425 (cons-source (cons-source (rename$5336$5380 (quote quote)) (cons-source f$5437 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-ref rec v (quote f)))) (cons-source (cons-source (rename$5336$5380 (quote slot-set!)) (cons-source rec$5429 (cons-source v$5425 (cons-source (cons-source (rename$5336$5380 (quote quote)) (cons-source f$5437 (quote ()) (quote (f))) (quote (quote f))) (quote ()) (quote ((quote f)))) (quote (v (quote f)))) (quote (rec v (quote f)))) (quote (slot-set! rec v (quote f)))) (quote ()) (quote ((slot-set! rec v (quote f))))) (quote ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))))) (cons-source (cons-source (rename$5336$5380 (quote match-record-named-refs)) (cons-source v$5425 (cons-source rec$5429 (cons-source q$5445 (cons-source g+s$5449 (cons-source sk$5453 (cons-source fk$5457 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote (rec q g+s sk fk))) (quote (v rec q g+s sk fk))) (quote (match-record-named-refs v rec q g+s sk fk))) (cons-source fk$5457 (cons-source i$5461 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-named-refs v rec q g+s sk fk) fk i))) (quote (((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v (quote f)))) (match-one w p ((slot-ref rec v (quote f)) (slot-set! rec v (quote f))) (match-record-named-refs v rec q g+s sk fk) fk i)))) #f) #f)) (cdr v.19$5361$5458))) v.20$5362$5460)) (car v.19$5361$5458)) #f)) (cdr v.17$5359$5454))) v.18$5360$5456)) (car v.17$5359$5454)) #f)) (cdr v.15$5357$5450))) v.16$5358$5452)) (car v.15$5357$5450)) #f)) (cdr v.13$5355$5446))) v.14$5356$5448)) (car v.13$5355$5446)) #f)) (cdr v.5$5347$5430))) v.12$5354$5444)) (cdr v.6$5348$5432)) #f)) (cdr v.9$5351$5438))) v.10$5352$5440)) (car v.9$5351$5438)) #f)) (cdr v.7$5349$5434))) v.8$5350$5436)) (car v.7$5349$5434)) #f)) (car v.6$5348$5432)) #f)) (car v.5$5347$5430)) #f)) (cdr v.3$5345$5426))) v.4$5346$5428)) (car v.3$5345$5426)) #f)) (cdr v.1$5343$5422))) v.2$5344$5424)) (car v.1$5343$5422)) #f)) (cdr expr$5335$5379))))) (match-record-refs lambda (expr$5144$5188 rename$5145$5189 compare$5146$5190) (car ((lambda (tmp$5192$5194) (if tmp$5192$5194 tmp$5192$5194 ((lambda (tmp$5196$5198) (if tmp$5196$5198 tmp$5196$5198 (cons (error/loc "no expansion for" expr$5144$5188) #f))) ((lambda (v.20$5171$5199) (if (pair? v.20$5171$5199) ((lambda (v.21$5172$5201) ((lambda (v$5202) ((lambda (v.22$5173$5203) (if (pair? v.22$5173$5203) ((lambda (v.23$5174$5205) ((lambda (rec$5206) ((lambda (v.24$5175$5207) (if (pair? v.24$5175$5207) ((lambda (v.25$5176$5209) ((lambda (n$5210) ((lambda (v.26$5177$5211) (if (pair? v.26$5177$5211) ((lambda (v.27$5178$5213) (if (null? v.27$5178$5213) ((lambda (v.28$5179$5215) (if (pair? v.28$5179$5215) ((lambda (v.29$5180$5217) ((lambda (g+s$5218) ((lambda (v.30$5181$5219) (if (pair? v.30$5181$5219) ((lambda (v.31$5182$5221) (if (list? v.31$5182$5221) ((lambda (sk$5223) ((lambda (v.32$5183$5224) (if (pair? v.32$5183$5224) ((lambda (v.33$5184$5226) ((lambda (fk$5227) ((lambda (v.34$5185$5228) (if (pair? v.34$5185$5228) ((lambda (v.35$5186$5230) ((lambda (i$5231) ((lambda (v.36$5187$5232) (if (null? v.36$5187$5232) (cons (append (map (lambda (sk$5234) sk$5234) sk$5223) (cons-source i$5231 (quote ()) (quote (i)))) #f) #f)) (cdr v.34$5185$5228))) v.35$5186$5230)) (car v.34$5185$5228)) #f)) (cdr v.32$5183$5224))) v.33$5184$5226)) (car v.32$5183$5224)) #f)) (cdr v.30$5181$5219))) v.31$5182$5221) #f)) (car v.30$5181$5219)) #f)) (cdr v.28$5179$5215))) v.29$5180$5217)) (car v.28$5179$5215)) #f)) (cdr v.26$5177$5211)) #f)) (car v.26$5177$5211)) #f)) (cdr v.24$5175$5207))) v.25$5176$5209)) (car v.24$5175$5207)) #f)) (cdr v.22$5173$5203))) v.23$5174$5205)) (car v.22$5173$5203)) #f)) (cdr v.20$5171$5199))) v.21$5172$5201)) (car v.20$5171$5199)) #f)) (cdr expr$5144$5188))))) ((lambda (v.1$5152$5235) (if (pair? v.1$5152$5235) ((lambda (v.2$5153$5237) ((lambda (v$5238) ((lambda (v.3$5154$5239) (if (pair? v.3$5154$5239) ((lambda (v.4$5155$5241) ((lambda (rec$5242) ((lambda (v.5$5156$5243) (if (pair? v.5$5156$5243) ((lambda (v.6$5157$5245) ((lambda (n$5246) ((lambda (v.7$5158$5247) (if (pair? v.7$5158$5247) ((lambda (v.8$5159$5249) (if (pair? v.8$5159$5249) ((lambda (v.9$5160$5251) ((lambda (p$5252) ((lambda (v.10$5161$5253) ((lambda (q$5254) ((lambda (v.11$5162$5255) (if (pair? v.11$5162$5255) ((lambda (v.12$5163$5257) ((lambda (g+s$5258) ((lambda (v.13$5164$5259) (if (pair? v.13$5164$5259) ((lambda (v.14$5165$5261) ((lambda (sk$5262) ((lambda (v.15$5166$5263) (if (pair? v.15$5166$5263) ((lambda (v.16$5167$5265) ((lambda (fk$5266) ((lambda (v.17$5168$5267) (if (pair? v.17$5168$5267) ((lambda (v.18$5169$5269) ((lambda (i$5270) ((lambda (v.19$5170$5271) (if (null? v.19$5170$5271) (cons (cons-source (rename$5145$5189 (quote let)) (cons-source (cons-source (cons-source (rename$5145$5189 (quote w)) (cons-source (cons-source (rename$5145$5189 (quote slot-ref)) (cons-source rec$5242 (cons-source v$5238 (cons-source n$5246 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (quote ()) (quote ((slot-ref rec v n)))) (quote (w (slot-ref rec v n)))) (quote ()) (quote ((w (slot-ref rec v n))))) (cons-source (cons-source (rename$5145$5189 (quote match-one)) (cons-source (rename$5145$5189 (quote w)) (cons-source p$5252 (cons-source (cons-source (cons-source (rename$5145$5189 (quote slot-ref)) (cons-source rec$5242 (cons-source v$5238 (cons-source n$5246 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-ref rec v n))) (cons-source (cons-source (rename$5145$5189 (quote slot-set!)) (cons-source rec$5242 (cons-source v$5238 (cons-source n$5246 (quote ()) (quote (n))) (quote (v n))) (quote (rec v n))) (quote (slot-set! rec v n))) (quote ()) (quote ((slot-set! rec v n)))) (quote ((slot-ref rec v n) (slot-set! rec v n)))) (cons-source (cons-source (rename$5145$5189 (quote match-record-refs)) (cons-source v$5238 (cons-source rec$5242 (cons-source (cons-source (rename$5145$5189 (quote +)) (cons-source n$5246 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source q$5254 (cons-source g+s$5258 (cons-source sk$5262 (cons-source fk$5266 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (q g+s sk fk))) (quote ((+ n 1) q g+s sk fk))) (quote (rec (+ n 1) q g+s sk fk))) (quote (v rec (+ n 1) q g+s sk fk))) (quote (match-record-refs v rec (+ n 1) q g+s sk fk))) (cons-source fk$5266 (cons-source i$5270 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i))) (quote ()) (quote ((match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) (quote (let ((w (slot-ref rec v n))) (match-one w p ((slot-ref rec v n) (slot-set! rec v n)) (match-record-refs v rec (+ n 1) q g+s sk fk) fk i)))) #f) #f)) (cdr v.17$5168$5267))) v.18$5169$5269)) (car v.17$5168$5267)) #f)) (cdr v.15$5166$5263))) v.16$5167$5265)) (car v.15$5166$5263)) #f)) (cdr v.13$5164$5259))) v.14$5165$5261)) (car v.13$5164$5259)) #f)) (cdr v.11$5162$5255))) v.12$5163$5257)) (car v.11$5162$5255)) #f)) (cdr v.7$5158$5247))) v.10$5161$5253)) (cdr v.8$5159$5249))) v.9$5160$5251)) (car v.8$5159$5249)) #f)) (car v.7$5158$5247)) #f)) (cdr v.5$5156$5243))) v.6$5157$5245)) (car v.5$5156$5243)) #f)) (cdr v.3$5154$5239))) v.4$5155$5241)) (car v.3$5154$5239)) #f)) (cdr v.1$5152$5235))) v.2$5153$5237)) (car v.1$5152$5235)) #f)) (cdr expr$5144$5188))))) (match-vector-tail-two lambda (expr$4988$5022 rename$4989$5023 compare$4990$5024) (car ((lambda (tmp$5026$5028) (if tmp$5026$5028 tmp$5026$5028 (cons (error/loc "no expansion for" expr$4988$5022) #f))) ((lambda (v.1$4996$5029) (if (pair? v.1$4996$5029) ((lambda (v.2$4997$5031) ((lambda (v$5032) ((lambda (v.3$4998$5033) (if (pair? v.3$4998$5033) ((lambda (v.4$4999$5035) ((lambda (p$5036) ((lambda (v.5$5000$5037) (if (pair? v.5$5000$5037) ((lambda (v.6$5001$5039) ((lambda (n$5040) ((lambda (v.7$5002$5041) (if (pair? v.7$5002$5041) ((lambda (v.8$5003$5043) ((lambda (len$5044) ((lambda (v.9$5004$5045) (if (pair? v.9$5004$5045) ((lambda (v.10$5005$5047) (if (list? v.10$5005$5047) ((lambda (sk$5049) ((lambda (v.11$5006$5050) (if (pair? v.11$5006$5050) ((lambda (v.12$5007$5052) ((lambda (fk$5053) ((lambda (v.13$5008$5054) (if (pair? v.13$5008$5054) ((lambda (v.14$5009$5056) ((lambda (i$5057) ((lambda (v.15$5010$5058) (if (pair? v.15$5010$5058) ((lambda (v.16$5011$5060) ((lambda (w.17$5012$5062 id-ls19$5014$5063 id-ls-ls20$5015$5064) ((lambda (lp.18$5013$5065) (set! lp.18$5013$5065 (lambda (w.17$5012$5066 id-ls19$5014$5067 id-ls-ls20$5015$5068) (if (null? w.17$5012$5066) ((lambda (id$5069 id-ls$5070) ((lambda (v.26$5021$5071) (if (null? v.26$5021$5071) (cons (cons-source (rename$4989$5023 (quote let)) (cons-source (rename$4989$5023 (quote loop)) (cons-source (cons-source (cons-source (rename$4989$5023 (quote j)) (cons-source n$5040 (quote ()) (quote (n))) (quote (j n))) (map (lambda (id-ls$5073) (cons-source id-ls$5073 (cons-source (cons-source (rename$4989$5023 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$5070) (quote ((j n) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$4989$5023 (quote if)) (cons-source (cons-source (rename$4989$5023 (quote >=)) (cons-source (rename$4989$5023 (quote j)) (cons-source len$5044 (quote ()) (quote (len))) (quote (j len))) (quote (>= j len))) (cons-source (cons-source (rename$4989$5023 (quote let)) (cons-source (map (lambda (id$5074 id-ls$5075) (cons-source id$5074 (cons-source (cons-source (rename$4989$5023 (quote reverse)) (cons-source id-ls$5075 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$5069 id-ls$5070) (cons-source (append (map (lambda (sk$5076) sk$5076) sk$5049) (cons-source i$5057 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (cons-source (cons-source (rename$4989$5023 (quote let)) (cons-source (cons-source (cons-source (rename$4989$5023 (quote w)) (cons-source (cons-source (rename$4989$5023 (quote vector-ref)) (cons-source v$5032 (cons-source (rename$4989$5023 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (quote ()) (quote ((vector-ref v j)))) (quote (w (vector-ref v j)))) (quote ()) (quote ((w (vector-ref v j))))) (cons-source (cons-source (rename$4989$5023 (quote match-one)) (cons-source (rename$4989$5023 (quote w)) (cons-source p$5036 (cons-source (cons-source (cons-source (rename$4989$5023 (quote vector-ref)) (cons-source v$5032 (cons-source (rename$4989$5023 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-ref v j))) (cons-source (cons-source (rename$4989$5023 (quote vector-set!)) (cons-source v$5032 (cons-source (rename$4989$5023 (quote j)) (quote ()) (quote (j))) (quote (v j))) (quote (vector-set! v j))) (quote ()) (quote ((vector-set! v j)))) (quote ((vector-ref v j) (vector-set! v j)))) (cons-source (cons-source (rename$4989$5023 (quote match-drop-ids)) (cons-source (cons-source (rename$4989$5023 (quote loop)) (cons-source (cons-source (rename$4989$5023 (quote +)) (cons-source (rename$4989$5023 (quote j)) (cons-source 1 (quote ()) (quote (1))) (quote (j 1))) (quote (+ j 1))) (map (lambda (id$5077 id-ls$5078) (cons-source (rename$4989$5023 (quote cons)) (cons-source id$5077 (cons-source id-ls$5078 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$5069 id-ls$5070) (quote ((+ j 1) (cons id id-ls) ...))) (quote (loop (+ j 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (+ j 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)))) (cons-source fk$5053 (cons-source i$5057 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ((>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i))))) (quote ()) (quote ((if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) (quote (let loop ((j n) (id-ls (quote ())) ...) (if (>= j len) (let ((id (reverse id-ls)) ...) (sk ... i)) (let ((w (vector-ref v j))) (match-one w p ((vector-ref v j) (vector-set! v j)) (match-drop-ids (loop (+ j 1) (cons id id-ls) ...)) fk i)))))) #f) #f)) (cdr v.15$5010$5058))) (reverse id-ls19$5014$5067) (reverse id-ls-ls20$5015$5068)) (if (pair? w.17$5012$5066) ((lambda (v.21$5016$5080) (if (pair? v.21$5016$5080) ((lambda (v.22$5017$5082) ((lambda (id$5083) ((lambda (v.23$5018$5084) (if (pair? v.23$5018$5084) ((lambda (v.24$5019$5086) ((lambda (id-ls$5087) ((lambda (v.25$5020$5088) (if (null? v.25$5020$5088) (lp.18$5013$5065 (cdr w.17$5012$5066) (cons id$5083 id-ls19$5014$5067) (cons id-ls$5087 id-ls-ls20$5015$5068)) #f)) (cdr v.23$5018$5084))) v.24$5019$5086)) (car v.23$5018$5084)) #f)) (cdr v.21$5016$5080))) v.22$5017$5082)) (car v.21$5016$5080)) #f)) (car w.17$5012$5066)) #f)))) (lp.18$5013$5065 w.17$5012$5062 id-ls19$5014$5063 id-ls-ls20$5015$5064)) #f)) v.16$5011$5060 (quote ()) (quote ()))) (car v.15$5010$5058)) #f)) (cdr v.13$5008$5054))) v.14$5009$5056)) (car v.13$5008$5054)) #f)) (cdr v.11$5006$5050))) v.12$5007$5052)) (car v.11$5006$5050)) #f)) (cdr v.9$5004$5045))) v.10$5005$5047) #f)) (car v.9$5004$5045)) #f)) (cdr v.7$5002$5041))) v.8$5003$5043)) (car v.7$5002$5041)) #f)) (cdr v.5$5000$5037))) v.6$5001$5039)) (car v.5$5000$5037)) #f)) (cdr v.3$4998$5033))) v.4$4999$5035)) (car v.3$4998$5033)) #f)) (cdr v.1$4996$5029))) v.2$4997$5031)) (car v.1$4996$5029)) #f)) (cdr expr$4988$5022))))) (match-vector-tail lambda (expr$4898$4921 rename$4899$4922 compare$4900$4923) (car ((lambda (tmp$4925$4927) (if tmp$4925$4927 tmp$4925$4927 (cons (error/loc "no expansion for" expr$4898$4921) #f))) ((lambda (v.1$4906$4928) (if (pair? v.1$4906$4928) ((lambda (v.2$4907$4930) ((lambda (v$4931) ((lambda (v.3$4908$4932) (if (pair? v.3$4908$4932) ((lambda (v.4$4909$4934) ((lambda (p$4935) ((lambda (v.5$4910$4936) (if (pair? v.5$4910$4936) ((lambda (v.6$4911$4938) ((lambda (n$4939) ((lambda (v.7$4912$4940) (if (pair? v.7$4912$4940) ((lambda (v.8$4913$4942) ((lambda (len$4943) ((lambda (v.9$4914$4944) (if (pair? v.9$4914$4944) ((lambda (v.10$4915$4946) ((lambda (sk$4947) ((lambda (v.11$4916$4948) (if (pair? v.11$4916$4948) ((lambda (v.12$4917$4950) ((lambda (fk$4951) ((lambda (v.13$4918$4952) (if (pair? v.13$4918$4952) ((lambda (v.14$4919$4954) ((lambda (i$4955) ((lambda (v.15$4920$4956) (if (null? v.15$4920$4956) (cons (cons-source (rename$4899$4922 (quote match-extract-vars)) (cons-source p$4935 (cons-source (cons-source (rename$4899$4922 (quote match-vector-tail-two)) (cons-source v$4931 (cons-source p$4935 (cons-source n$4939 (cons-source len$4943 (cons-source sk$4947 (cons-source fk$4951 (cons-source i$4955 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (len sk fk i))) (quote (n len sk fk i))) (quote (p n len sk fk i))) (quote (v p n len sk fk i))) (quote (match-vector-tail-two v p n len sk fk i))) (cons-source i$4955 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-vector-tail-two v p n len sk fk i) i ()))) (quote (p (match-vector-tail-two v p n len sk fk i) i ()))) (quote (match-extract-vars p (match-vector-tail-two v p n len sk fk i) i ()))) #f) #f)) (cdr v.13$4918$4952))) v.14$4919$4954)) (car v.13$4918$4952)) #f)) (cdr v.11$4916$4948))) v.12$4917$4950)) (car v.11$4916$4948)) #f)) (cdr v.9$4914$4944))) v.10$4915$4946)) (car v.9$4914$4944)) #f)) (cdr v.7$4912$4940))) v.8$4913$4942)) (car v.7$4912$4940)) #f)) (cdr v.5$4910$4936))) v.6$4911$4938)) (car v.5$4910$4936)) #f)) (cdr v.3$4908$4932))) v.4$4909$4934)) (car v.3$4908$4932)) #f)) (cdr v.1$4906$4928))) v.2$4907$4930)) (car v.1$4906$4928)) #f)) (cdr expr$4898$4921))))) (match-gen-vector-ellipsis lambda (expr$4760$4792 rename$4761$4793 compare$4762$4794) (car ((lambda (tmp$4796$4798) (if tmp$4796$4798 tmp$4796$4798 (cons (error/loc "no expansion for" expr$4760$4792) #f))) ((lambda (v.1$4768$4799) (if (pair? v.1$4768$4799) ((lambda (v.2$4769$4801) ((lambda (v$4802) ((lambda (v.3$4770$4803) (if (pair? v.3$4770$4803) ((lambda (v.4$4771$4805) ((lambda (n$4806) ((lambda (v.5$4772$4807) (if (pair? v.5$4772$4807) ((lambda (v.6$4773$4809) ((lambda (w.7$4774$4811 pat-ls9$4776$4812 index-ls10$4777$4813) ((lambda (lp.8$4775$4814) (set! lp.8$4775$4814 (lambda (w.7$4774$4815 pat-ls9$4776$4816 index-ls10$4777$4817) (if (null? w.7$4774$4815) ((lambda (pat$4818 index$4819) ((lambda (v.16$4783$4820) (if (pair? v.16$4783$4820) ((lambda (v.17$4784$4822) ((lambda (p$4823) ((lambda (v.18$4785$4824) (if (pair? v.18$4785$4824) ((lambda (v.19$4786$4826) ((lambda (sk$4827) ((lambda (v.20$4787$4828) (if (pair? v.20$4787$4828) ((lambda (v.21$4788$4830) ((lambda (fk$4831) ((lambda (v.22$4789$4832) (if (pair? v.22$4789$4832) ((lambda (v.23$4790$4834) ((lambda (i$4835) ((lambda (v.24$4791$4836) (if (null? v.24$4791$4836) (cons (cons-source (rename$4761$4793 (quote if)) (cons-source (cons-source (rename$4761$4793 (quote vector?)) (cons-source v$4802 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$4761$4793 (quote let)) (cons-source (cons-source (cons-source (rename$4761$4793 (quote len)) (cons-source (cons-source (rename$4761$4793 (quote vector-length)) (cons-source v$4802 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$4761$4793 (quote if)) (cons-source (cons-source (rename$4761$4793 (quote >=)) (cons-source (rename$4761$4793 (quote len)) (cons-source n$4806 (quote ()) (quote (n))) (quote (len n))) (quote (>= len n))) (cons-source (cons-source (rename$4761$4793 (quote match-vector-step)) (cons-source v$4802 (cons-source (map (lambda (pat$4838 index$4839) (cons-source pat$4838 (cons-source index$4839 (quote ()) (quote (index))) (quote (pat index)))) pat$4818 index$4819) (cons-source (cons-source (rename$4761$4793 (quote match-vector-tail)) (cons-source v$4802 (cons-source p$4823 (cons-source n$4806 (cons-source (rename$4761$4793 (quote len)) (cons-source sk$4827 (cons-source fk$4831 (quote ()) (quote (fk))) (quote (sk fk))) (quote (len sk fk))) (quote (n len sk fk))) (quote (p n len sk fk))) (quote (v p n len sk fk))) (quote (match-vector-tail v p n len sk fk))) (cons-source fk$4831 (cons-source i$4835 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-tail v p n len sk fk) fk i))) (quote (((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (quote (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i))) (cons-source fk$4831 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ((>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk))) (quote ()) (quote ((if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (quote (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)))) (cons-source fk$4831 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (>= len n) (match-vector-step v ((pat index) ...) (match-vector-tail v p n len sk fk) fk i) fk)) fk))) #f) #f)) (cdr v.22$4789$4832))) v.23$4790$4834)) (car v.22$4789$4832)) #f)) (cdr v.20$4787$4828))) v.21$4788$4830)) (car v.20$4787$4828)) #f)) (cdr v.18$4785$4824))) v.19$4786$4826)) (car v.18$4785$4824)) #f)) (cdr v.16$4783$4820))) v.17$4784$4822)) (car v.16$4783$4820)) #f)) (cdr v.5$4772$4807))) (reverse pat-ls9$4776$4816) (reverse index-ls10$4777$4817)) (if (pair? w.7$4774$4815) ((lambda (v.11$4778$4841) (if (pair? v.11$4778$4841) ((lambda (v.12$4779$4843) ((lambda (pat$4844) ((lambda (v.13$4780$4845) (if (pair? v.13$4780$4845) ((lambda (v.14$4781$4847) ((lambda (index$4848) ((lambda (v.15$4782$4849) (if (null? v.15$4782$4849) (lp.8$4775$4814 (cdr w.7$4774$4815) (cons pat$4844 pat-ls9$4776$4816) (cons index$4848 index-ls10$4777$4817)) #f)) (cdr v.13$4780$4845))) v.14$4781$4847)) (car v.13$4780$4845)) #f)) (cdr v.11$4778$4841))) v.12$4779$4843)) (car v.11$4778$4841)) #f)) (car w.7$4774$4815)) #f)))) (lp.8$4775$4814 w.7$4774$4811 pat-ls9$4776$4812 index-ls10$4777$4813)) #f)) v.6$4773$4809 (quote ()) (quote ()))) (car v.5$4772$4807)) #f)) (cdr v.3$4770$4803))) v.4$4771$4805)) (car v.3$4770$4803)) #f)) (cdr v.1$4768$4799))) v.2$4769$4801)) (car v.1$4768$4799)) #f)) (cdr expr$4760$4792))))) (match-vector-step lambda (expr$4606$4642 rename$4607$4643 compare$4608$4644) (car ((lambda (tmp$4646$4648) (if tmp$4646$4648 tmp$4646$4648 ((lambda (tmp$4650$4652) (if tmp$4650$4652 tmp$4650$4652 (cons (error/loc "no expansion for" expr$4606$4642) #f))) ((lambda (v.12$4625$4653) (if (pair? v.12$4625$4653) ((lambda (v.13$4626$4655) ((lambda (v$4656) ((lambda (v.14$4627$4657) (if (pair? v.14$4627$4657) ((lambda (v.15$4628$4659) (if (pair? v.15$4628$4659) ((lambda (v.16$4629$4661) (if (pair? v.16$4629$4661) ((lambda (v.17$4630$4663) ((lambda (pat$4664) ((lambda (v.18$4631$4665) (if (pair? v.18$4631$4665) ((lambda (v.19$4632$4667) ((lambda (index$4668) ((lambda (v.20$4633$4669) (if (null? v.20$4633$4669) ((lambda (v.21$4634$4671) ((lambda (rest$4672) ((lambda (v.22$4635$4673) (if (pair? v.22$4635$4673) ((lambda (v.23$4636$4675) ((lambda (sk$4676) ((lambda (v.24$4637$4677) (if (pair? v.24$4637$4677) ((lambda (v.25$4638$4679) ((lambda (fk$4680) ((lambda (v.26$4639$4681) (if (pair? v.26$4639$4681) ((lambda (v.27$4640$4683) ((lambda (i$4684) ((lambda (v.28$4641$4685) (if (null? v.28$4641$4685) (cons (cons-source (rename$4607$4643 (quote let)) (cons-source (cons-source (cons-source (rename$4607$4643 (quote w)) (cons-source (cons-source (rename$4607$4643 (quote vector-ref)) (cons-source v$4656 (cons-source index$4668 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (quote ()) (quote ((vector-ref v index)))) (quote (w (vector-ref v index)))) (quote ()) (quote ((w (vector-ref v index))))) (cons-source (cons-source (rename$4607$4643 (quote match-one)) (cons-source (rename$4607$4643 (quote w)) (cons-source pat$4664 (cons-source (cons-source (cons-source (rename$4607$4643 (quote vector-ref)) (cons-source v$4656 (cons-source index$4668 (quote ()) (quote (index))) (quote (v index))) (quote (vector-ref v index))) (cons-source (cons-source (rename$4607$4643 (quote vector-set!)) (cons-source v$4656 (cons-source index$4668 (quote ()) (quote (index))) (quote (v index))) (quote (vector-set! v index))) (quote ()) (quote ((vector-set! v index)))) (quote ((vector-ref v index) (vector-set! v index)))) (cons-source (cons-source (rename$4607$4643 (quote match-vector-step)) (cons-source v$4656 (cons-source rest$4672 (cons-source sk$4676 (cons-source fk$4680 (quote ()) (quote (fk))) (quote (sk fk))) (quote (rest sk fk))) (quote (v rest sk fk))) (quote (match-vector-step v rest sk fk))) (cons-source fk$4680 (cons-source i$4684 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-vector-step v rest sk fk) fk i))) (quote (((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i))) (quote ()) (quote ((match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) (quote (let ((w (vector-ref v index))) (match-one w pat ((vector-ref v index) (vector-set! v index)) (match-vector-step v rest sk fk) fk i)))) #f) #f)) (cdr v.26$4639$4681))) v.27$4640$4683)) (car v.26$4639$4681)) #f)) (cdr v.24$4637$4677))) v.25$4638$4679)) (car v.24$4637$4677)) #f)) (cdr v.22$4635$4673))) v.23$4636$4675)) (car v.22$4635$4673)) #f)) (cdr v.14$4627$4657))) v.21$4634$4671)) (cdr v.15$4628$4659)) #f)) (cdr v.18$4631$4665))) v.19$4632$4667)) (car v.18$4631$4665)) #f)) (cdr v.16$4629$4661))) v.17$4630$4663)) (car v.16$4629$4661)) #f)) (car v.15$4628$4659)) #f)) (car v.14$4627$4657)) #f)) (cdr v.12$4625$4653))) v.13$4626$4655)) (car v.12$4625$4653)) #f)) (cdr expr$4606$4642))))) ((lambda (v.1$4614$4687) (if (pair? v.1$4614$4687) ((lambda (v.2$4615$4689) ((lambda (v$4690) ((lambda (v.3$4616$4691) (if (pair? v.3$4616$4691) ((lambda (v.4$4617$4693) (if (null? v.4$4617$4693) ((lambda (v.5$4618$4695) (if (pair? v.5$4618$4695) ((lambda (v.6$4619$4697) (if (list? v.6$4619$4697) ((lambda (sk$4699) ((lambda (v.7$4620$4700) (if (pair? v.7$4620$4700) ((lambda (v.8$4621$4702) ((lambda (fk$4703) ((lambda (v.9$4622$4704) (if (pair? v.9$4622$4704) ((lambda (v.10$4623$4706) ((lambda (i$4707) ((lambda (v.11$4624$4708) (if (null? v.11$4624$4708) (cons (append (map (lambda (sk$4710) sk$4710) sk$4699) (cons-source i$4707 (quote ()) (quote (i)))) #f) #f)) (cdr v.9$4622$4704))) v.10$4623$4706)) (car v.9$4622$4704)) #f)) (cdr v.7$4620$4700))) v.8$4621$4702)) (car v.7$4620$4700)) #f)) (cdr v.5$4618$4695))) v.6$4619$4697) #f)) (car v.5$4618$4695)) #f)) (cdr v.3$4616$4691)) #f)) (car v.3$4616$4691)) #f)) (cdr v.1$4614$4687))) v.2$4615$4689)) (car v.1$4614$4687)) #f)) (cdr expr$4606$4642))))) (match-vector-two lambda (expr$4411$4454 rename$4412$4455 compare$4413$4456) (car ((lambda (tmp$4458$4460) (if tmp$4458$4460 tmp$4458$4460 ((lambda (tmp$4462$4464) (if tmp$4462$4464 tmp$4462$4464 (cons (error/loc "no expansion for" expr$4411$4454) #f))) ((lambda (v.25$4443$4465) (if (pair? v.25$4443$4465) ((lambda (v.26$4444$4467) ((lambda (v$4468) ((lambda (v.27$4445$4469) (if (pair? v.27$4445$4469) ((lambda (v.28$4446$4471) ((lambda (n$4472) ((lambda (v.29$4447$4473) (if (pair? v.29$4447$4473) ((lambda (v.30$4448$4475) (if (list? v.30$4448$4475) ((lambda (pats$4477) ((lambda (v.31$4449$4478) (if (pair? v.31$4449$4478) ((lambda (v.32$4450$4480) (if (pair? v.32$4450$4480) ((lambda (v.33$4451$4482) ((lambda (p$4483) ((lambda (v.34$4452$4484) ((lambda (q$4485) ((lambda (v.35$4453$4486) ((lambda (x$4487) (cons (cons-source (rename$4412$4455 (quote match-vector)) (cons-source v$4468 (cons-source (cons-source (rename$4412$4455 (quote +)) (cons-source n$4472 (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (+ n 1))) (cons-source (append (map (lambda (pats$4488) pats$4488) pats$4477) (cons-source (cons-source p$4483 (cons-source n$4472 (quote ()) (quote (n))) (quote (p n))) (quote ()) (quote ((p n))))) (cons-source q$4485 x$4487 (quote (q . x))) (quote ((pats ... (p n)) q . x))) (quote ((+ n 1) (pats ... (p n)) q . x))) (quote (v (+ n 1) (pats ... (p n)) q . x))) (quote (match-vector v (+ n 1) (pats ... (p n)) q . x))) #f)) v.35$4453$4486)) (cdr v.31$4449$4478))) v.34$4452$4484)) (cdr v.32$4450$4480))) v.33$4451$4482)) (car v.32$4450$4480)) #f)) (car v.31$4449$4478)) #f)) (cdr v.29$4447$4473))) v.30$4448$4475) #f)) (car v.29$4447$4473)) #f)) (cdr v.27$4445$4469))) v.28$4446$4471)) (car v.27$4445$4469)) #f)) (cdr v.25$4443$4465))) v.26$4444$4467)) (car v.25$4443$4465)) #f)) (cdr expr$4411$4454))))) ((lambda (v.1$4419$4489) (if (pair? v.1$4419$4489) ((lambda (v.2$4420$4491) ((lambda (v$4492) ((lambda (v.3$4421$4493) (if (pair? v.3$4421$4493) ((lambda (v.4$4422$4495) ((lambda (n$4496) ((lambda (v.5$4423$4497) (if (pair? v.5$4423$4497) ((lambda (v.6$4424$4499) ((lambda (w.7$4425$4501 pat-ls9$4427$4502 index-ls10$4428$4503) ((lambda (lp.8$4426$4504) (set! lp.8$4426$4504 (lambda (w.7$4425$4505 pat-ls9$4427$4506 index-ls10$4428$4507) (if (null? w.7$4425$4505) ((lambda (pat$4508 index$4509) ((lambda (v.16$4434$4510) (if (pair? v.16$4434$4510) ((lambda (v.17$4435$4512) (if (null? v.17$4435$4512) ((lambda (v.18$4436$4514) (if (pair? v.18$4436$4514) ((lambda (v.19$4437$4516) ((lambda (sk$4517) ((lambda (v.20$4438$4518) (if (pair? v.20$4438$4518) ((lambda (v.21$4439$4520) ((lambda (fk$4521) ((lambda (v.22$4440$4522) (if (pair? v.22$4440$4522) ((lambda (v.23$4441$4524) ((lambda (i$4525) ((lambda (v.24$4442$4526) (if (null? v.24$4442$4526) (cons (cons-source (rename$4412$4455 (quote if)) (cons-source (cons-source (rename$4412$4455 (quote vector?)) (cons-source v$4492 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$4412$4455 (quote let)) (cons-source (cons-source (cons-source (rename$4412$4455 (quote len)) (cons-source (cons-source (rename$4412$4455 (quote vector-length)) (cons-source v$4492 (quote ()) (quote (v))) (quote (vector-length v))) (quote ()) (quote ((vector-length v)))) (quote (len (vector-length v)))) (quote ()) (quote ((len (vector-length v))))) (cons-source (cons-source (rename$4412$4455 (quote if)) (cons-source (cons-source (rename$4412$4455 (quote =)) (cons-source (rename$4412$4455 (quote len)) (cons-source n$4496 (quote ()) (quote (n))) (quote (len n))) (quote (= len n))) (cons-source (cons-source (rename$4412$4455 (quote match-vector-step)) (cons-source v$4492 (cons-source (map (lambda (pat$4528 index$4529) (cons-source pat$4528 (cons-source index$4529 (quote ()) (quote (index))) (quote (pat index)))) pat$4508 index$4509) (cons-source sk$4517 (cons-source fk$4521 (cons-source i$4525 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((pat index) ...) sk fk i))) (quote (v ((pat index) ...) sk fk i))) (quote (match-vector-step v ((pat index) ...) sk fk i))) (cons-source fk$4521 (quote ()) (quote (fk))) (quote ((match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ((= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk))) (quote ()) (quote ((if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (quote (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)))) (cons-source fk$4521 (quote ()) (quote (fk))) (quote ((let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote ((vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) (quote (if (vector? v) (let ((len (vector-length v))) (if (= len n) (match-vector-step v ((pat index) ...) sk fk i) fk)) fk))) #f) #f)) (cdr v.22$4440$4522))) v.23$4441$4524)) (car v.22$4440$4522)) #f)) (cdr v.20$4438$4518))) v.21$4439$4520)) (car v.20$4438$4518)) #f)) (cdr v.18$4436$4514))) v.19$4437$4516)) (car v.18$4436$4514)) #f)) (cdr v.16$4434$4510)) #f)) (car v.16$4434$4510)) #f)) (cdr v.5$4423$4497))) (reverse pat-ls9$4427$4506) (reverse index-ls10$4428$4507)) (if (pair? w.7$4425$4505) ((lambda (v.11$4429$4531) (if (pair? v.11$4429$4531) ((lambda (v.12$4430$4533) ((lambda (pat$4534) ((lambda (v.13$4431$4535) (if (pair? v.13$4431$4535) ((lambda (v.14$4432$4537) ((lambda (index$4538) ((lambda (v.15$4433$4539) (if (null? v.15$4433$4539) (lp.8$4426$4504 (cdr w.7$4425$4505) (cons pat$4534 pat-ls9$4427$4506) (cons index$4538 index-ls10$4428$4507)) #f)) (cdr v.13$4431$4535))) v.14$4432$4537)) (car v.13$4431$4535)) #f)) (cdr v.11$4429$4531))) v.12$4430$4533)) (car v.11$4429$4531)) #f)) (car w.7$4425$4505)) #f)))) (lp.8$4426$4504 w.7$4425$4501 pat-ls9$4427$4502 index-ls10$4428$4503)) #f)) v.6$4424$4499 (quote ()) (quote ()))) (car v.5$4423$4497)) #f)) (cdr v.3$4421$4493))) v.4$4422$4495)) (car v.3$4421$4493)) #f)) (cdr v.1$4419$4489))) v.2$4420$4491)) (car v.1$4419$4489)) #f)) (cdr expr$4411$4454))))) (match-vector lambda (expr$4232$4273 rename$4233$4274 compare$4234$4275) (car ((lambda (tmp$4277$4279) (if tmp$4277$4279 tmp$4277$4279 ((lambda (tmp$4281$4283) (if tmp$4281$4283 tmp$4281$4283 ((lambda (tmp$4285$4287) (if tmp$4285$4287 tmp$4285$4287 (cons (error/loc "no expansion for" expr$4232$4273) #f))) ((lambda (v.33$4272$4288) ((lambda (x$4289) (cons (cons-source (rename$4233$4274 (quote match-vector-two)) x$4289 (quote (match-vector-two . x))) #f)) v.33$4272$4288)) (cdr expr$4232$4273))))) ((lambda (v.14$4253$4290) (if (pair? v.14$4253$4290) ((lambda (v.15$4254$4292) ((lambda (v$4293) ((lambda (v.16$4255$4294) (if (pair? v.16$4255$4294) ((lambda (v.17$4256$4296) ((lambda (n$4297) ((lambda (v.18$4257$4298) (if (pair? v.18$4257$4298) ((lambda (v.19$4258$4300) ((lambda (pats$4301) ((lambda (v.20$4259$4302) (if (pair? v.20$4259$4302) ((lambda (v.21$4260$4304) (if (pair? v.21$4260$4304) ((lambda (v.22$4261$4306) ((lambda (p$4307) ((lambda (v.23$4262$4308) (if (pair? v.23$4262$4308) ((lambda (v.24$4263$4310) (if (compare$4234$4275 v.24$4263$4310 (rename$4233$4274 (quote ___))) ((lambda (v.25$4264$4312) (if (null? v.25$4264$4312) ((lambda (v.26$4265$4314) (if (pair? v.26$4265$4314) ((lambda (v.27$4266$4316) ((lambda (sk$4317) ((lambda (v.28$4267$4318) (if (pair? v.28$4267$4318) ((lambda (v.29$4268$4320) ((lambda (fk$4321) ((lambda (v.30$4269$4322) (if (pair? v.30$4269$4322) ((lambda (v.31$4270$4324) ((lambda (i$4325) ((lambda (v.32$4271$4326) (if (null? v.32$4271$4326) (cons (cons-source (rename$4233$4274 (quote match-gen-vector-ellipsis)) (cons-source v$4293 (cons-source n$4297 (cons-source pats$4301 (cons-source p$4307 (cons-source sk$4317 (cons-source fk$4321 (cons-source i$4325 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (p sk fk i))) (quote (pats p sk fk i))) (quote (n pats p sk fk i))) (quote (v n pats p sk fk i))) (quote (match-gen-vector-ellipsis v n pats p sk fk i))) #f) #f)) (cdr v.30$4269$4322))) v.31$4270$4324)) (car v.30$4269$4322)) #f)) (cdr v.28$4267$4318))) v.29$4268$4320)) (car v.28$4267$4318)) #f)) (cdr v.26$4265$4314))) v.27$4266$4316)) (car v.26$4265$4314)) #f)) (cdr v.20$4259$4302)) #f)) (cdr v.23$4262$4308)) #f)) (car v.23$4262$4308)) #f)) (cdr v.21$4260$4304))) v.22$4261$4306)) (car v.21$4260$4304)) #f)) (car v.20$4259$4302)) #f)) (cdr v.18$4257$4298))) v.19$4258$4300)) (car v.18$4257$4298)) #f)) (cdr v.16$4255$4294))) v.17$4256$4296)) (car v.16$4255$4294)) #f)) (cdr v.14$4253$4290))) v.15$4254$4292)) (car v.14$4253$4290)) #f)) (cdr expr$4232$4273))))) ((lambda (v.1$4240$4328) (if (pair? v.1$4240$4328) ((lambda (v.2$4241$4330) ((lambda (v$4331) ((lambda (v.3$4242$4332) (if (pair? v.3$4242$4332) ((lambda (v.4$4243$4334) ((lambda (n$4335) ((lambda (v.5$4244$4336) (if (pair? v.5$4244$4336) ((lambda (v.6$4245$4338) ((lambda (pats$4339) ((lambda (v.7$4246$4340) (if (pair? v.7$4246$4340) ((lambda (v.8$4247$4342) (if (pair? v.8$4247$4342) ((lambda (v.9$4248$4344) ((lambda (p$4345) ((lambda (v.10$4249$4346) (if (pair? v.10$4249$4346) ((lambda (v.11$4250$4348) ((lambda (q$4349) ((lambda (v.12$4251$4350) (if (null? v.12$4251$4350) ((lambda (v.13$4252$4352) ((lambda (x$4353) (cons (cons-source (rename$4233$4274 (quote match-check-ellipsis)) (cons-source q$4349 (cons-source (cons-source (rename$4233$4274 (quote match-gen-vector-ellipsis)) (cons-source v$4331 (cons-source n$4335 (cons-source pats$4339 (cons-source p$4345 x$4353 (quote (p . x))) (quote (pats p . x))) (quote (n pats p . x))) (quote (v n pats p . x))) (quote (match-gen-vector-ellipsis v n pats p . x))) (cons-source (cons-source (rename$4233$4274 (quote match-vector-two)) (cons-source v$4331 (cons-source n$4335 (cons-source pats$4339 (cons-source (cons-source p$4345 (cons-source q$4349 (quote ()) (quote (q))) (quote (p q))) x$4353 (quote ((p q) . x))) (quote (pats (p q) . x))) (quote (n pats (p q) . x))) (quote (v n pats (p q) . x))) (quote (match-vector-two v n pats (p q) . x))) (quote ()) (quote ((match-vector-two v n pats (p q) . x)))) (quote ((match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) (quote (match-check-ellipsis q (match-gen-vector-ellipsis v n pats p . x) (match-vector-two v n pats (p q) . x)))) #f)) v.13$4252$4352)) (cdr v.7$4246$4340)) #f)) (cdr v.10$4249$4346))) v.11$4250$4348)) (car v.10$4249$4346)) #f)) (cdr v.8$4247$4342))) v.9$4248$4344)) (car v.8$4247$4342)) #f)) (car v.7$4246$4340)) #f)) (cdr v.5$4244$4336))) v.6$4245$4338)) (car v.5$4244$4336)) #f)) (cdr v.3$4242$4332))) v.4$4243$4334)) (car v.3$4242$4332)) #f)) (cdr v.1$4240$4328))) v.2$4241$4330)) (car v.1$4240$4328)) #f)) (cdr expr$4232$4273))))) (match-gen-search lambda (expr$4079$4113 rename$4080$4114 compare$4081$4115) (car ((lambda (tmp$4117$4119) (if tmp$4117$4119 tmp$4117$4119 (cons (error/loc "no expansion for" expr$4079$4113) #f))) ((lambda (v.1$4087$4120) (if (pair? v.1$4087$4120) ((lambda (v.2$4088$4122) ((lambda (v$4123) ((lambda (v.3$4089$4124) (if (pair? v.3$4089$4124) ((lambda (v.4$4090$4126) ((lambda (p$4127) ((lambda (v.5$4091$4128) (if (pair? v.5$4091$4128) ((lambda (v.6$4092$4130) ((lambda (q$4131) ((lambda (v.7$4093$4132) (if (pair? v.7$4093$4132) ((lambda (v.8$4094$4134) ((lambda (g+s$4135) ((lambda (v.9$4095$4136) (if (pair? v.9$4095$4136) ((lambda (v.10$4096$4138) ((lambda (sk$4139) ((lambda (v.11$4097$4140) (if (pair? v.11$4097$4140) ((lambda (v.12$4098$4142) ((lambda (fk$4143) ((lambda (v.13$4099$4144) (if (pair? v.13$4099$4144) ((lambda (v.14$4100$4146) ((lambda (i$4147) ((lambda (v.15$4101$4148) (if (pair? v.15$4101$4148) ((lambda (v.16$4102$4150) ((lambda (w.17$4103$4152 id-ls19$4105$4153 id-ls-ls20$4106$4154) ((lambda (lp.18$4104$4155) (set! lp.18$4104$4155 (lambda (w.17$4103$4156 id-ls19$4105$4157 id-ls-ls20$4106$4158) (if (null? w.17$4103$4156) ((lambda (id$4159 id-ls$4160) ((lambda (v.26$4112$4161) (if (null? v.26$4112$4161) (cons (cons-source (rename$4080$4114 (quote letrec)) (cons-source (cons-source (cons-source (rename$4080$4114 (quote try)) (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (cons-source (rename$4080$4114 (quote w)) (cons-source (rename$4080$4114 (quote fail)) id-ls$4160 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4080$4114 (quote match-one)) (cons-source (rename$4080$4114 (quote w)) (cons-source q$4131 (cons-source g+s$4135 (cons-source (cons-source (rename$4080$4114 (quote match-tuck-ids)) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (map (lambda (id$4163 id-ls$4164) (cons-source id$4163 (cons-source (cons-source (rename$4080$4114 (quote reverse)) (cons-source id-ls$4164 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$4159 id-ls$4160) (cons-source sk$4139 (quote ()) (quote (sk))) (quote (((id (reverse id-ls)) ...) sk))) (quote (let ((id (reverse id-ls)) ...) sk))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) sk)))) (quote (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)))) (cons-source (cons-source (rename$4080$4114 (quote next)) (cons-source (rename$4080$4114 (quote w)) (cons-source (rename$4080$4114 (quote fail)) id-ls$4160 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (quote (next w fail id-ls ...))) (cons-source i$4147 (quote ()) (quote (i))) (quote ((next w fail id-ls ...) i))) (quote ((match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (quote ()) (quote ((match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ((w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i)))) (quote ()) (quote ((lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (quote (try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))))) (cons-source (cons-source (rename$4080$4114 (quote next)) (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (cons-source (rename$4080$4114 (quote w)) (cons-source (rename$4080$4114 (quote fail)) id-ls$4160 (quote (fail id-ls ...))) (quote (w fail id-ls ...))) (cons-source (cons-source (rename$4080$4114 (quote if)) (cons-source (cons-source (rename$4080$4114 (quote not)) (cons-source (cons-source (rename$4080$4114 (quote pair?)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (pair? w))) (quote ()) (quote ((pair? w)))) (quote (not (pair? w)))) (cons-source (cons-source (rename$4080$4114 (quote fail)) (quote ()) (quote (fail))) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (cons-source (cons-source (rename$4080$4114 (quote u)) (cons-source (cons-source (rename$4080$4114 (quote car)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (car w))) (quote ()) (quote ((car w)))) (quote (u (car w)))) (quote ()) (quote ((u (car w))))) (cons-source (cons-source (rename$4080$4114 (quote match-one)) (cons-source (rename$4080$4114 (quote u)) (cons-source p$4127 (cons-source (cons-source (cons-source (rename$4080$4114 (quote car)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (car w))) (cons-source (cons-source (rename$4080$4114 (quote set-car!)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (set-car! w))) (quote ()) (quote ((set-car! w)))) (quote ((car w) (set-car! w)))) (cons-source (cons-source (rename$4080$4114 (quote match-drop-ids)) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (map (lambda (id$4165 id-ls$4166) (cons-source id-ls$4166 (cons-source (cons-source (rename$4080$4114 (quote cons)) (cons-source id$4165 (cons-source id-ls$4166 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls))) (quote ()) (quote ((cons id id-ls)))) (quote (id-ls (cons id id-ls))))) id$4159 id-ls$4160) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (rename$4080$4114 (quote lp)) (cons-source (cons-source (cons-source (rename$4080$4114 (quote ls)) (cons-source (cons-source (rename$4080$4114 (quote cdr)) (cons-source (rename$4080$4114 (quote w)) (quote ()) (quote (w))) (quote (cdr w))) (quote ()) (quote ((cdr w)))) (quote (ls (cdr w)))) (quote ()) (quote ((ls (cdr w))))) (cons-source (cons-source (rename$4080$4114 (quote if)) (cons-source (cons-source (rename$4080$4114 (quote pair?)) (cons-source (rename$4080$4114 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$4080$4114 (quote try)) (cons-source (cons-source (rename$4080$4114 (quote car)) (cons-source (rename$4080$4114 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$4080$4114 (quote lp)) (cons-source (cons-source (rename$4080$4114 (quote cdr)) (cons-source (rename$4080$4114 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (quote ()) (quote ((cdr ls)))) (quote (lp (cdr ls)))) (quote ()) (quote ((lp (cdr ls))))) (quote (() (lp (cdr ls))))) (quote (lambda () (lp (cdr ls))))) id-ls$4160 (quote ((lambda () (lp (cdr ls))) id-ls ...))) (quote ((car ls) (lambda () (lp (cdr ls))) id-ls ...))) (quote (try (car ls) (lambda () (lp (cdr ls))) id-ls ...))) (cons-source (cons-source (rename$4080$4114 (quote fail)) (quote ()) (quote (fail))) (quote ()) (quote ((fail)))) (quote ((try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ((pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))) (quote ()) (quote ((if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (quote ()) (quote ((let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail)))))) (quote ()) (quote ((let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (quote (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))))) (cons-source (cons-source (rename$4080$4114 (quote fail)) (quote ()) (quote (fail))) (cons-source i$4147 (quote ()) (quote (i))) (quote ((fail) i))) (quote ((match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))) (quote ()) (quote ((match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))) (quote ()) (quote ((let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ((not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))) (quote ()) (quote ((if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ((w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (quote ()) (quote ((lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i))))))) (quote ()) (quote ((next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (quote ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))))) (cons-source (cons-source (rename$4080$4114 (quote let)) (cons-source (map (lambda (id-ls$4167) (cons-source id-ls$4167 (cons-source (cons-source (rename$4080$4114 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$4160) (cons-source (cons-source (rename$4080$4114 (quote try)) (cons-source v$4123 (cons-source (cons-source (rename$4080$4114 (quote lambda)) (cons-source (quote ()) (cons-source fk$4143 (quote ()) (quote (fk))) (quote (() fk))) (quote (lambda () fk))) id-ls$4160 (quote ((lambda () fk) id-ls ...))) (quote (v (lambda () fk) id-ls ...))) (quote (try v (lambda () fk) id-ls ...))) (quote ()) (quote ((try v (lambda () fk) id-ls ...)))) (quote (((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...)))) (quote ()) (quote ((let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) (quote (letrec ((try (lambda (w fail id-ls ...) (match-one w q g+s (match-tuck-ids (let ((id (reverse id-ls)) ...) sk)) (next w fail id-ls ...) i))) (next (lambda (w fail id-ls ...) (if (not (pair? w)) (fail) (let ((u (car w))) (match-one u p ((car w) (set-car! w)) (match-drop-ids (let ((id-ls (cons id id-ls)) ...) (let lp ((ls (cdr w))) (if (pair? ls) (try (car ls) (lambda () (lp (cdr ls))) id-ls ...) (fail))))) (fail) i)))))) (let ((id-ls (quote ())) ...) (try v (lambda () fk) id-ls ...))))) #f) #f)) (cdr v.15$4101$4148))) (reverse id-ls19$4105$4157) (reverse id-ls-ls20$4106$4158)) (if (pair? w.17$4103$4156) ((lambda (v.21$4107$4169) (if (pair? v.21$4107$4169) ((lambda (v.22$4108$4171) ((lambda (id$4172) ((lambda (v.23$4109$4173) (if (pair? v.23$4109$4173) ((lambda (v.24$4110$4175) ((lambda (id-ls$4176) ((lambda (v.25$4111$4177) (if (null? v.25$4111$4177) (lp.18$4104$4155 (cdr w.17$4103$4156) (cons id$4172 id-ls19$4105$4157) (cons id-ls$4176 id-ls-ls20$4106$4158)) #f)) (cdr v.23$4109$4173))) v.24$4110$4175)) (car v.23$4109$4173)) #f)) (cdr v.21$4107$4169))) v.22$4108$4171)) (car v.21$4107$4169)) #f)) (car w.17$4103$4156)) #f)))) (lp.18$4104$4155 w.17$4103$4152 id-ls19$4105$4153 id-ls-ls20$4106$4154)) #f)) v.16$4102$4150 (quote ()) (quote ()))) (car v.15$4101$4148)) #f)) (cdr v.13$4099$4144))) v.14$4100$4146)) (car v.13$4099$4144)) #f)) (cdr v.11$4097$4140))) v.12$4098$4142)) (car v.11$4097$4140)) #f)) (cdr v.9$4095$4136))) v.10$4096$4138)) (car v.9$4095$4136)) #f)) (cdr v.7$4093$4132))) v.8$4094$4134)) (car v.7$4093$4132)) #f)) (cdr v.5$4091$4128))) v.6$4092$4130)) (car v.5$4091$4128)) #f)) (cdr v.3$4089$4124))) v.4$4090$4126)) (car v.3$4089$4124)) #f)) (cdr v.1$4087$4120))) v.2$4088$4122)) (car v.1$4087$4120)) #f)) (cdr expr$4079$4113))))) (match-verify-no-ellipsis lambda (expr$3972$3997 rename$3973$3998 compare$3974$3999) (car ((lambda (tmp$4001$4003) (if tmp$4001$4003 tmp$4001$4003 ((lambda (tmp$4005$4007) (if tmp$4005$4007 tmp$4005$4007 ((lambda (tmp$4009$4011) (if tmp$4009$4011 tmp$4009$4011 (cons (error/loc "no expansion for" expr$3972$3997) #f))) ((lambda (v.13$3992$4012) (if (pair? v.13$3992$4012) ((lambda (v.14$3993$4014) ((lambda (x$4015) ((lambda (v.15$3994$4016) (if (pair? v.15$3994$4016) ((lambda (v.16$3995$4018) ((lambda (sk$4019) ((lambda (v.17$3996$4020) (if (null? v.17$3996$4020) (cons (cons-source (rename$3973$3998 (quote match-syntax-error)) (cons-source "dotted tail not allowed after ellipsis" (cons-source x$4015 (quote ()) (quote (x))) (quote ("dotted tail not allowed after ellipsis" x))) (quote (match-syntax-error "dotted tail not allowed after ellipsis" x))) #f) #f)) (cdr v.15$3994$4016))) v.16$3995$4018)) (car v.15$3994$4016)) #f)) (cdr v.13$3992$4012))) v.14$3993$4014)) (car v.13$3992$4012)) #f)) (cdr expr$3972$3997))))) ((lambda (v.8$3987$4022) (if (pair? v.8$3987$4022) ((lambda (v.9$3988$4024) (if (null? v.9$3988$4024) ((lambda (v.10$3989$4026) (if (pair? v.10$3989$4026) ((lambda (v.11$3990$4028) ((lambda (sk$4029) ((lambda (v.12$3991$4030) (if (null? v.12$3991$4030) (cons sk$4029 #f) #f)) (cdr v.10$3989$4026))) v.11$3990$4028)) (car v.10$3989$4026)) #f)) (cdr v.8$3987$4022)) #f)) (car v.8$3987$4022)) #f)) (cdr expr$3972$3997))))) ((lambda (v.1$3980$4032) (if (pair? v.1$3980$4032) ((lambda (v.2$3981$4034) (if (pair? v.2$3981$4034) ((lambda (v.3$3982$4036) ((lambda (x$4037) ((lambda (v.4$3983$4038) ((lambda (y$4039) ((lambda (v.5$3984$4040) (if (pair? v.5$3984$4040) ((lambda (v.6$3985$4042) ((lambda (sk$4043) ((lambda (v.7$3986$4044) (if (null? v.7$3986$4044) (cons (cons-source (rename$3973$3998 (quote match-check-ellipsis)) (cons-source x$4037 (cons-source (cons-source (rename$3973$3998 (quote match-syntax-error)) (cons-source "multiple ellipsis patterns not allowed at same level" (quote ()) (quote ("multiple ellipsis patterns not allowed at same level"))) (quote (match-syntax-error "multiple ellipsis patterns not allowed at same level"))) (cons-source (cons-source (rename$3973$3998 (quote match-verify-no-ellipsis)) (cons-source y$4039 (cons-source sk$4043 (quote ()) (quote (sk))) (quote (y sk))) (quote (match-verify-no-ellipsis y sk))) (quote ()) (quote ((match-verify-no-ellipsis y sk)))) (quote ((match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) (quote (match-check-ellipsis x (match-syntax-error "multiple ellipsis patterns not allowed at same level") (match-verify-no-ellipsis y sk)))) #f) #f)) (cdr v.5$3984$4040))) v.6$3985$4042)) (car v.5$3984$4040)) #f)) (cdr v.1$3980$4032))) v.4$3983$4038)) (cdr v.2$3981$4034))) v.3$3982$4036)) (car v.2$3981$4034)) #f)) (car v.1$3980$4032)) #f)) (cdr expr$3972$3997))))) (match-gen-ellipsis lambda (expr$3679$3739 rename$3680$3740 compare$3681$3741) (car ((lambda (tmp$3743$3745) (if tmp$3743$3745 tmp$3743$3745 ((lambda (tmp$3747$3749) (if tmp$3747$3749 tmp$3747$3749 (cons (error/loc "no expansion for" expr$3679$3739) #f))) ((lambda (v.27$3713$3750) (if (pair? v.27$3713$3750) ((lambda (v.28$3714$3752) ((lambda (v$3753) ((lambda (v.29$3715$3754) (if (pair? v.29$3715$3754) ((lambda (v.30$3716$3756) ((lambda (p$3757) ((lambda (v.31$3717$3758) (if (pair? v.31$3717$3758) ((lambda (v.32$3718$3760) ((lambda (r$3761) ((lambda (v.33$3719$3762) (if (pair? v.33$3719$3762) ((lambda (v.34$3720$3764) ((lambda (g+s$3765) ((lambda (v.35$3721$3766) (if (pair? v.35$3721$3766) ((lambda (v.36$3722$3768) (if (list? v.36$3722$3768) ((lambda (sk$3770) ((lambda (v.37$3723$3771) (if (pair? v.37$3723$3771) ((lambda (v.38$3724$3773) ((lambda (fk$3774) ((lambda (v.39$3725$3775) (if (pair? v.39$3725$3775) ((lambda (v.40$3726$3777) ((lambda (i$3778) ((lambda (v.41$3727$3779) (if (pair? v.41$3727$3779) ((lambda (v.42$3728$3781) ((lambda (w.43$3729$3783 id-ls45$3731$3784 id-ls-ls46$3732$3785) ((lambda (lp.44$3730$3786) (set! lp.44$3730$3786 (lambda (w.43$3729$3787 id-ls45$3731$3788 id-ls-ls46$3732$3789) (if (null? w.43$3729$3787) ((lambda (id$3790 id-ls$3791) ((lambda (v.52$3738$3792) (if (null? v.52$3738$3792) (cons (cons-source (rename$3680$3740 (quote match-verify-no-ellipsis)) (cons-source r$3761 (cons-source (cons-source (rename$3680$3740 (quote let*)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote tail-len)) (cons-source (cons-source (rename$3680$3740 (quote length)) (cons-source (cons-source (rename$3680$3740 (quote quote)) (cons-source r$3761 (quote ()) (quote (r))) (quote (quote r))) (quote ()) (quote ((quote r)))) (quote (length (quote r)))) (quote ()) (quote ((length (quote r))))) (quote (tail-len (length (quote r))))) (cons-source (cons-source (rename$3680$3740 (quote ls)) (cons-source v$3753 (quote ()) (quote (v))) (quote (ls v))) (cons-source (cons-source (rename$3680$3740 (quote len)) (cons-source (cons-source (rename$3680$3740 (quote and)) (cons-source (cons-source (rename$3680$3740 (quote list?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (list? ls))) (cons-source (cons-source (rename$3680$3740 (quote length)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (length ls))) (quote ()) (quote ((length ls)))) (quote ((list? ls) (length ls)))) (quote (and (list? ls) (length ls)))) (quote ()) (quote ((and (list? ls) (length ls))))) (quote (len (and (list? ls) (length ls))))) (quote ()) (quote ((len (and (list? ls) (length ls)))))) (quote ((ls v) (len (and (list? ls) (length ls)))))) (quote ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))))) (cons-source (cons-source (rename$3680$3740 (quote if)) (cons-source (cons-source (rename$3680$3740 (quote or)) (cons-source (cons-source (rename$3680$3740 (quote not)) (cons-source (rename$3680$3740 (quote len)) (quote ()) (quote (len))) (quote (not len))) (cons-source (cons-source (rename$3680$3740 (quote <)) (cons-source (rename$3680$3740 (quote len)) (cons-source (rename$3680$3740 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (len tail-len))) (quote (< len tail-len))) (quote ()) (quote ((< len tail-len)))) (quote ((not len) (< len tail-len)))) (quote (or (not len) (< len tail-len)))) (cons-source fk$3774 (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote ls)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (ls ls))) (cons-source (cons-source (rename$3680$3740 (quote n)) (cons-source (rename$3680$3740 (quote len)) (quote ()) (quote (len))) (quote (n len))) (map (lambda (id-ls$3794) (cons-source id-ls$3794 (cons-source (cons-source (rename$3680$3740 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$3791) (quote ((n len) (id-ls (quote ())) ...))) (quote ((ls ls) (n len) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3680$3740 (quote cond)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote =)) (cons-source (rename$3680$3740 (quote n)) (cons-source (rename$3680$3740 (quote tail-len)) (quote ()) (quote (tail-len))) (quote (n tail-len))) (quote (= n tail-len))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (map (lambda (id$3795 id-ls$3796) (cons-source id$3795 (cons-source (cons-source (rename$3680$3740 (quote reverse)) (cons-source id-ls$3796 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$3790 id-ls$3791) (cons-source (cons-source (rename$3680$3740 (quote match-one)) (cons-source (rename$3680$3740 (quote ls)) (cons-source r$3761 (cons-source (cons-source #f (cons-source #f (quote ()) (quote (#f))) (quote (#f #f))) (cons-source sk$3770 (cons-source fk$3774 (cons-source i$3778 (quote ()) (quote (i))) (quote (fk i))) (quote ((sk ...) fk i))) (quote ((#f #f) (sk ...) fk i))) (quote (r (#f #f) (sk ...) fk i))) (quote (ls r (#f #f) (sk ...) fk i))) (quote (match-one ls r (#f #f) (sk ...) fk i))) (quote ()) (quote ((match-one ls r (#f #f) (sk ...) fk i)))) (quote (((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i)))) (quote (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i)))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))))) (quote ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))))) (cons-source (cons-source (cons-source (rename$3680$3740 (quote pair?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote w)) (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3680$3740 (quote match-one)) (cons-source (rename$3680$3740 (quote w)) (cons-source p$3757 (cons-source (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3680$3740 (quote set-car!)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3680$3740 (quote match-drop-ids)) (cons-source (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (rename$3680$3740 (quote cdr)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (cons-source (cons-source (rename$3680$3740 (quote -)) (cons-source (rename$3680$3740 (quote n)) (cons-source 1 (quote ()) (quote (1))) (quote (n 1))) (quote (- n 1))) (map (lambda (id$3797 id-ls$3798) (cons-source (rename$3680$3740 (quote cons)) (cons-source id$3797 (cons-source id-ls$3798 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$3790 id-ls$3791) (quote ((- n 1) (cons id id-ls) ...))) (quote ((cdr ls) (- n 1) (cons id id-ls) ...))) (quote (loop (cdr ls) (- n 1) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)))) (cons-source fk$3774 (cons-source i$3778 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i)))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i)))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))))) (cons-source (cons-source (rename$3680$3740 (quote else)) (cons-source fk$3774 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))) (quote ()) (quote ((cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))) (quote ()) (quote ((let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ((or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ()) (quote ((if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))))) (quote (((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))))) (quote (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk))))))) (quote ()) (quote ((let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))))) (quote (r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))))) (quote (match-verify-no-ellipsis r (let* ((tail-len (length (quote r))) (ls v) (len (and (list? ls) (length ls)))) (if (or (not len) (< len tail-len)) fk (let loop ((ls ls) (n len) (id-ls (quote ())) ...) (cond ((= n tail-len) (let ((id (reverse id-ls)) ...) (match-one ls r (#f #f) (sk ...) fk i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (- n 1) (cons id id-ls) ...)) fk i))) (else fk)))))))) #f) #f)) (cdr v.41$3727$3779))) (reverse id-ls45$3731$3788) (reverse id-ls-ls46$3732$3789)) (if (pair? w.43$3729$3787) ((lambda (v.47$3733$3800) (if (pair? v.47$3733$3800) ((lambda (v.48$3734$3802) ((lambda (id$3803) ((lambda (v.49$3735$3804) (if (pair? v.49$3735$3804) ((lambda (v.50$3736$3806) ((lambda (id-ls$3807) ((lambda (v.51$3737$3808) (if (null? v.51$3737$3808) (lp.44$3730$3786 (cdr w.43$3729$3787) (cons id$3803 id-ls45$3731$3788) (cons id-ls$3807 id-ls-ls46$3732$3789)) #f)) (cdr v.49$3735$3804))) v.50$3736$3806)) (car v.49$3735$3804)) #f)) (cdr v.47$3733$3800))) v.48$3734$3802)) (car v.47$3733$3800)) #f)) (car w.43$3729$3787)) #f)))) (lp.44$3730$3786 w.43$3729$3783 id-ls45$3731$3784 id-ls-ls46$3732$3785)) #f)) v.42$3728$3781 (quote ()) (quote ()))) (car v.41$3727$3779)) #f)) (cdr v.39$3725$3775))) v.40$3726$3777)) (car v.39$3725$3775)) #f)) (cdr v.37$3723$3771))) v.38$3724$3773)) (car v.37$3723$3771)) #f)) (cdr v.35$3721$3766))) v.36$3722$3768) #f)) (car v.35$3721$3766)) #f)) (cdr v.33$3719$3762))) v.34$3720$3764)) (car v.33$3719$3762)) #f)) (cdr v.31$3717$3758))) v.32$3718$3760)) (car v.31$3717$3758)) #f)) (cdr v.29$3715$3754))) v.30$3716$3756)) (car v.29$3715$3754)) #f)) (cdr v.27$3713$3750))) v.28$3714$3752)) (car v.27$3713$3750)) #f)) (cdr expr$3679$3739))))) ((lambda (v.1$3687$3810) (if (pair? v.1$3687$3810) ((lambda (v.2$3688$3812) ((lambda (v$3813) ((lambda (v.3$3689$3814) (if (pair? v.3$3689$3814) ((lambda (v.4$3690$3816) ((lambda (p$3817) ((lambda (v.5$3691$3818) (if (pair? v.5$3691$3818) ((lambda (v.6$3692$3820) (if (null? v.6$3692$3820) ((lambda (v.7$3693$3822) (if (pair? v.7$3693$3822) ((lambda (v.8$3694$3824) ((lambda (g+s$3825) ((lambda (v.9$3695$3826) (if (pair? v.9$3695$3826) ((lambda (v.10$3696$3828) (if (list? v.10$3696$3828) ((lambda (sk$3830) ((lambda (v.11$3697$3831) (if (pair? v.11$3697$3831) ((lambda (v.12$3698$3833) ((lambda (fk$3834) ((lambda (v.13$3699$3835) (if (pair? v.13$3699$3835) ((lambda (v.14$3700$3837) ((lambda (i$3838) ((lambda (v.15$3701$3839) (if (pair? v.15$3701$3839) ((lambda (v.16$3702$3841) ((lambda (w.17$3703$3843 id-ls19$3705$3844 id-ls-ls20$3706$3845) ((lambda (lp.18$3704$3846) (set! lp.18$3704$3846 (lambda (w.17$3703$3847 id-ls19$3705$3848 id-ls-ls20$3706$3849) (if (null? w.17$3703$3847) ((lambda (id$3850 id-ls$3851) ((lambda (v.26$3712$3852) (if (null? v.26$3712$3852) (cons (cons-source (rename$3680$3740 (quote match-check-identifier)) (cons-source p$3817 (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (cons-source (cons-source p$3817 (cons-source v$3813 (quote ()) (quote (v))) (quote (p v))) (quote ()) (quote ((p v)))) (cons-source (cons-source (rename$3680$3740 (quote if)) (cons-source (cons-source (rename$3680$3740 (quote list?)) (cons-source p$3817 (quote ()) (quote (p))) (quote (list? p))) (cons-source (append (map (lambda (sk$3854) sk$3854) sk$3830) (cons-source i$3838 (quote ()) (quote (i)))) (cons-source fk$3834 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((list? p) (sk ... i) fk))) (quote (if (list? p) (sk ... i) fk))) (quote ()) (quote ((if (list? p) (sk ... i) fk)))) (quote (((p v)) (if (list? p) (sk ... i) fk)))) (quote (let ((p v)) (if (list? p) (sk ... i) fk)))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote ls)) (cons-source v$3813 (quote ()) (quote (v))) (quote (ls v))) (map (lambda (id-ls$3855) (cons-source id-ls$3855 (cons-source (cons-source (rename$3680$3740 (quote quote)) (cons-source (quote ()) (quote ()) (quote (()))) (quote (quote ()))) (quote ()) (quote ((quote ())))) (quote (id-ls (quote ()))))) id-ls$3851) (quote ((ls v) (id-ls (quote ())) ...))) (cons-source (cons-source (rename$3680$3740 (quote cond)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote null?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (null? ls))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (map (lambda (id$3856 id-ls$3857) (cons-source id$3856 (cons-source (cons-source (rename$3680$3740 (quote reverse)) (cons-source id-ls$3857 (quote ()) (quote (id-ls))) (quote (reverse id-ls))) (quote ()) (quote ((reverse id-ls)))) (quote (id (reverse id-ls))))) id$3850 id-ls$3851) (cons-source (append (map (lambda (sk$3858) sk$3858) sk$3830) (cons-source i$3838 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((id (reverse id-ls)) ...) (sk ... i)))) (quote (let ((id (reverse id-ls)) ...) (sk ... i)))) (quote ()) (quote ((let ((id (reverse id-ls)) ...) (sk ... i))))) (quote ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))))) (cons-source (cons-source (cons-source (rename$3680$3740 (quote pair?)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (pair? ls))) (cons-source (cons-source (rename$3680$3740 (quote let)) (cons-source (cons-source (cons-source (rename$3680$3740 (quote w)) (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (quote ()) (quote ((car ls)))) (quote (w (car ls)))) (quote ()) (quote ((w (car ls))))) (cons-source (cons-source (rename$3680$3740 (quote match-one)) (cons-source (rename$3680$3740 (quote w)) (cons-source p$3817 (cons-source (cons-source (cons-source (rename$3680$3740 (quote car)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (car ls))) (cons-source (cons-source (rename$3680$3740 (quote set-car!)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (set-car! ls))) (quote ()) (quote ((set-car! ls)))) (quote ((car ls) (set-car! ls)))) (cons-source (cons-source (rename$3680$3740 (quote match-drop-ids)) (cons-source (cons-source (rename$3680$3740 (quote loop)) (cons-source (cons-source (rename$3680$3740 (quote cdr)) (cons-source (rename$3680$3740 (quote ls)) (quote ()) (quote (ls))) (quote (cdr ls))) (map (lambda (id$3859 id-ls$3860) (cons-source (rename$3680$3740 (quote cons)) (cons-source id$3859 (cons-source id-ls$3860 (quote ()) (quote (id-ls))) (quote (id id-ls))) (quote (cons id id-ls)))) id$3850 id-ls$3851) (quote ((cdr ls) (cons id id-ls) ...))) (quote (loop (cdr ls) (cons id id-ls) ...))) (quote ()) (quote ((loop (cdr ls) (cons id id-ls) ...)))) (quote (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)))) (cons-source fk$3834 (cons-source i$3838 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (quote ()) (quote ((match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i)))) (quote ()) (quote ((let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (quote ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))))) (cons-source (cons-source (rename$3680$3740 (quote else)) (cons-source fk$3834 (quote ()) (quote (fk))) (quote (else fk))) (quote ()) (quote ((else fk)))) (quote (((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))) (quote ()) (quote ((cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk))))) (quote ()) (quote ((let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote ((let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) (quote (match-check-identifier p (let ((p v)) (if (list? p) (sk ... i) fk)) (let loop ((ls v) (id-ls (quote ())) ...) (cond ((null? ls) (let ((id (reverse id-ls)) ...) (sk ... i))) ((pair? ls) (let ((w (car ls))) (match-one w p ((car ls) (set-car! ls)) (match-drop-ids (loop (cdr ls) (cons id id-ls) ...)) fk i))) (else fk)))))) #f) #f)) (cdr v.15$3701$3839))) (reverse id-ls19$3705$3848) (reverse id-ls-ls20$3706$3849)) (if (pair? w.17$3703$3847) ((lambda (v.21$3707$3862) (if (pair? v.21$3707$3862) ((lambda (v.22$3708$3864) ((lambda (id$3865) ((lambda (v.23$3709$3866) (if (pair? v.23$3709$3866) ((lambda (v.24$3710$3868) ((lambda (id-ls$3869) ((lambda (v.25$3711$3870) (if (null? v.25$3711$3870) (lp.18$3704$3846 (cdr w.17$3703$3847) (cons id$3865 id-ls19$3705$3848) (cons id-ls$3869 id-ls-ls20$3706$3849)) #f)) (cdr v.23$3709$3866))) v.24$3710$3868)) (car v.23$3709$3866)) #f)) (cdr v.21$3707$3862))) v.22$3708$3864)) (car v.21$3707$3862)) #f)) (car w.17$3703$3847)) #f)))) (lp.18$3704$3846 w.17$3703$3843 id-ls19$3705$3844 id-ls-ls20$3706$3845)) #f)) v.16$3702$3841 (quote ()) (quote ()))) (car v.15$3701$3839)) #f)) (cdr v.13$3699$3835))) v.14$3700$3837)) (car v.13$3699$3835)) #f)) (cdr v.11$3697$3831))) v.12$3698$3833)) (car v.11$3697$3831)) #f)) (cdr v.9$3695$3826))) v.10$3696$3828) #f)) (car v.9$3695$3826)) #f)) (cdr v.7$3693$3822))) v.8$3694$3824)) (car v.7$3693$3822)) #f)) (cdr v.5$3691$3818)) #f)) (car v.5$3691$3818)) #f)) (cdr v.3$3689$3814))) v.4$3690$3816)) (car v.3$3689$3814)) #f)) (cdr v.1$3687$3810))) v.2$3688$3812)) (car v.1$3687$3810)) #f)) (cdr expr$3679$3739))))) (match-gen-or-step lambda (expr$3499$3540 rename$3500$3541 compare$3501$3542) (car ((lambda (tmp$3544$3546) (if tmp$3544$3546 tmp$3544$3546 ((lambda (tmp$3548$3550) (if tmp$3548$3550 tmp$3548$3550 ((lambda (tmp$3552$3554) (if tmp$3552$3554 tmp$3552$3554 (cons (error/loc "no expansion for" expr$3499$3540) #f))) ((lambda (v.19$3525$3555) (if (pair? v.19$3525$3555) ((lambda (v.20$3526$3557) ((lambda (v$3558) ((lambda (v.21$3527$3559) (if (pair? v.21$3527$3559) ((lambda (v.22$3528$3561) (if (pair? v.22$3528$3561) ((lambda (v.23$3529$3563) ((lambda (p$3564) ((lambda (v.24$3530$3565) ((lambda (q$3566) ((lambda (v.25$3531$3567) (if (pair? v.25$3531$3567) ((lambda (v.26$3532$3569) ((lambda (g+s$3570) ((lambda (v.27$3533$3571) (if (pair? v.27$3533$3571) ((lambda (v.28$3534$3573) ((lambda (sk$3574) ((lambda (v.29$3535$3575) (if (pair? v.29$3535$3575) ((lambda (v.30$3536$3577) ((lambda (fk$3578) ((lambda (v.31$3537$3579) (if (pair? v.31$3537$3579) ((lambda (v.32$3538$3581) ((lambda (i$3582) ((lambda (v.33$3539$3583) (if (null? v.33$3539$3583) (cons (cons-source (rename$3500$3541 (quote let)) (cons-source (cons-source (cons-source (rename$3500$3541 (quote fk2)) (cons-source (cons-source (rename$3500$3541 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$3500$3541 (quote match-gen-or-step)) (cons-source v$3558 (cons-source q$3566 (cons-source g+s$3570 (cons-source sk$3574 (cons-source fk$3578 (cons-source i$3582 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (v q g+s sk fk i))) (quote (match-gen-or-step v q g+s sk fk i))) (quote ()) (quote ((match-gen-or-step v q g+s sk fk i)))) (quote (() (match-gen-or-step v q g+s sk fk i)))) (quote (lambda () (match-gen-or-step v q g+s sk fk i)))) (quote ()) (quote ((lambda () (match-gen-or-step v q g+s sk fk i))))) (quote (fk2 (lambda () (match-gen-or-step v q g+s sk fk i))))) (quote ()) (quote ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))))) (cons-source (cons-source (rename$3500$3541 (quote match-one)) (cons-source v$3558 (cons-source p$3564 (cons-source g+s$3570 (cons-source sk$3574 (cons-source (cons-source (rename$3500$3541 (quote fk2)) (quote ()) (quote (fk2))) (cons-source i$3582 (quote ()) (quote (i))) (quote ((fk2) i))) (quote (sk (fk2) i))) (quote (g+s sk (fk2) i))) (quote (p g+s sk (fk2) i))) (quote (v p g+s sk (fk2) i))) (quote (match-one v p g+s sk (fk2) i))) (quote ()) (quote ((match-one v p g+s sk (fk2) i)))) (quote (((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) (quote (let ((fk2 (lambda () (match-gen-or-step v q g+s sk fk i)))) (match-one v p g+s sk (fk2) i)))) #f) #f)) (cdr v.31$3537$3579))) v.32$3538$3581)) (car v.31$3537$3579)) #f)) (cdr v.29$3535$3575))) v.30$3536$3577)) (car v.29$3535$3575)) #f)) (cdr v.27$3533$3571))) v.28$3534$3573)) (car v.27$3533$3571)) #f)) (cdr v.25$3531$3567))) v.26$3532$3569)) (car v.25$3531$3567)) #f)) (cdr v.21$3527$3559))) v.24$3530$3565)) (cdr v.22$3528$3561))) v.23$3529$3563)) (car v.22$3528$3561)) #f)) (car v.21$3527$3559)) #f)) (cdr v.19$3525$3555))) v.20$3526$3557)) (car v.19$3525$3555)) #f)) (cdr expr$3499$3540))))) ((lambda (v.12$3518$3585) (if (pair? v.12$3518$3585) ((lambda (v.13$3519$3587) ((lambda (v$3588) ((lambda (v.14$3520$3589) (if (pair? v.14$3520$3589) ((lambda (v.15$3521$3591) (if (pair? v.15$3521$3591) ((lambda (v.16$3522$3593) ((lambda (p$3594) ((lambda (v.17$3523$3595) (if (null? v.17$3523$3595) ((lambda (v.18$3524$3597) ((lambda (x$3598) (cons (cons-source (rename$3500$3541 (quote match-one)) (cons-source v$3588 (cons-source p$3594 x$3598 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.18$3524$3597)) (cdr v.14$3520$3589)) #f)) (cdr v.15$3521$3591))) v.16$3522$3593)) (car v.15$3521$3591)) #f)) (car v.14$3520$3589)) #f)) (cdr v.12$3518$3585))) v.13$3519$3587)) (car v.12$3518$3585)) #f)) (cdr expr$3499$3540))))) ((lambda (v.1$3507$3599) (if (pair? v.1$3507$3599) ((lambda (v.2$3508$3601) ((lambda (v$3602) ((lambda (v.3$3509$3603) (if (pair? v.3$3509$3603) ((lambda (v.4$3510$3605) (if (null? v.4$3510$3605) ((lambda (v.5$3511$3607) (if (pair? v.5$3511$3607) ((lambda (v.6$3512$3609) ((lambda (g+s$3610) ((lambda (v.7$3513$3611) (if (pair? v.7$3513$3611) ((lambda (v.8$3514$3613) ((lambda (sk$3614) ((lambda (v.9$3515$3615) (if (pair? v.9$3515$3615) ((lambda (v.10$3516$3617) ((lambda (fk$3618) ((lambda (v.11$3517$3619) ((lambda (x$3620) (cons fk$3618 #f)) v.11$3517$3619)) (cdr v.9$3515$3615))) v.10$3516$3617)) (car v.9$3515$3615)) #f)) (cdr v.7$3513$3611))) v.8$3514$3613)) (car v.7$3513$3611)) #f)) (cdr v.5$3511$3607))) v.6$3512$3609)) (car v.5$3511$3607)) #f)) (cdr v.3$3509$3603)) #f)) (car v.3$3509$3603)) #f)) (cdr v.1$3507$3599))) v.2$3508$3601)) (car v.1$3507$3599)) #f)) (cdr expr$3499$3540))))) (match-gen-or lambda (expr$3359$3391 rename$3360$3392 compare$3361$3393) (car ((lambda (tmp$3395$3397) (if tmp$3395$3397 tmp$3395$3397 (cons (error/loc "no expansion for" expr$3359$3391) #f))) ((lambda (v.1$3367$3398) (if (pair? v.1$3367$3398) ((lambda (v.2$3368$3400) ((lambda (v$3401) ((lambda (v.3$3369$3402) (if (pair? v.3$3369$3402) ((lambda (v.4$3370$3404) ((lambda (p$3405) ((lambda (v.5$3371$3406) (if (pair? v.5$3371$3406) ((lambda (v.6$3372$3408) ((lambda (g+s$3409) ((lambda (v.7$3373$3410) (if (pair? v.7$3373$3410) ((lambda (v.8$3374$3412) (if (list? v.8$3374$3412) ((lambda (sk$3414) ((lambda (v.9$3375$3415) (if (pair? v.9$3375$3415) ((lambda (v.10$3376$3417) ((lambda (fk$3418) ((lambda (v.11$3377$3419) (if (pair? v.11$3377$3419) ((lambda (v.12$3378$3421) (if (list? v.12$3378$3421) ((lambda (i$3423) ((lambda (v.13$3379$3424) (if (pair? v.13$3379$3424) ((lambda (v.14$3380$3426) ((lambda (w.15$3381$3428 id-ls17$3383$3429 id-ls-ls18$3384$3430) ((lambda (lp.16$3382$3431) (set! lp.16$3382$3431 (lambda (w.15$3381$3432 id-ls17$3383$3433 id-ls-ls18$3384$3434) (if (null? w.15$3381$3432) ((lambda (id$3435 id-ls$3436) ((lambda (v.24$3390$3437) (if (null? v.24$3390$3437) (cons (cons-source (rename$3360$3392 (quote let)) (cons-source (cons-source (cons-source (rename$3360$3392 (quote sk2)) (cons-source (cons-source (rename$3360$3392 (quote lambda)) (cons-source id$3435 (cons-source (append (map (lambda (sk$3439) sk$3439) sk$3414) (cons-source (append (map (lambda (i$3440) i$3440) i$3423) id$3435) (quote ()) (quote ((i ... id ...))))) (quote ()) (quote ((sk ... (i ... id ...))))) (quote ((id ...) (sk ... (i ... id ...))))) (quote (lambda (id ...) (sk ... (i ... id ...))))) (quote ()) (quote ((lambda (id ...) (sk ... (i ... id ...)))))) (quote (sk2 (lambda (id ...) (sk ... (i ... id ...)))))) (quote ()) (quote ((sk2 (lambda (id ...) (sk ... (i ... id ...))))))) (cons-source (cons-source (rename$3360$3392 (quote match-gen-or-step)) (cons-source v$3401 (cons-source p$3405 (cons-source g+s$3409 (cons-source (cons-source (rename$3360$3392 (quote match-drop-ids)) (cons-source (cons-source (rename$3360$3392 (quote sk2)) id$3435 (quote (sk2 id ...))) (quote ()) (quote ((sk2 id ...)))) (quote (match-drop-ids (sk2 id ...)))) (cons-source fk$3418 (cons-source i$3423 (quote ()) (quote ((i ...)))) (quote (fk (i ...)))) (quote ((match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...)))) (quote ()) (quote ((match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (((sk2 (lambda (id ...) (sk ... (i ... id ...))))) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) (quote (let ((sk2 (lambda (id ...) (sk ... (i ... id ...))))) (match-gen-or-step v p g+s (match-drop-ids (sk2 id ...)) fk (i ...))))) #f) #f)) (cdr v.13$3379$3424))) (reverse id-ls17$3383$3433) (reverse id-ls-ls18$3384$3434)) (if (pair? w.15$3381$3432) ((lambda (v.19$3385$3442) (if (pair? v.19$3385$3442) ((lambda (v.20$3386$3444) ((lambda (id$3445) ((lambda (v.21$3387$3446) (if (pair? v.21$3387$3446) ((lambda (v.22$3388$3448) ((lambda (id-ls$3449) ((lambda (v.23$3389$3450) (if (null? v.23$3389$3450) (lp.16$3382$3431 (cdr w.15$3381$3432) (cons id$3445 id-ls17$3383$3433) (cons id-ls$3449 id-ls-ls18$3384$3434)) #f)) (cdr v.21$3387$3446))) v.22$3388$3448)) (car v.21$3387$3446)) #f)) (cdr v.19$3385$3442))) v.20$3386$3444)) (car v.19$3385$3442)) #f)) (car w.15$3381$3432)) #f)))) (lp.16$3382$3431 w.15$3381$3428 id-ls17$3383$3429 id-ls-ls18$3384$3430)) #f)) v.14$3380$3426 (quote ()) (quote ()))) (car v.13$3379$3424)) #f)) (cdr v.11$3377$3419))) v.12$3378$3421) #f)) (car v.11$3377$3419)) #f)) (cdr v.9$3375$3415))) v.10$3376$3417)) (car v.9$3375$3415)) #f)) (cdr v.7$3373$3410))) v.8$3374$3412) #f)) (car v.7$3373$3410)) #f)) (cdr v.5$3371$3406))) v.6$3372$3408)) (car v.5$3371$3406)) #f)) (cdr v.3$3369$3402))) v.4$3370$3404)) (car v.3$3369$3402)) #f)) (cdr v.1$3367$3398))) v.2$3368$3400)) (car v.1$3367$3398)) #f)) (cdr expr$3359$3391))))) (match-drop-first-arg lambda (expr$3314$3327 rename$3315$3328 compare$3316$3329) (car ((lambda (tmp$3331$3333) (if tmp$3331$3333 tmp$3331$3333 (cons (error/loc "no expansion for" expr$3314$3327) #f))) ((lambda (v.1$3322$3334) (if (pair? v.1$3322$3334) ((lambda (v.2$3323$3336) ((lambda (arg$3337) ((lambda (v.3$3324$3338) (if (pair? v.3$3324$3338) ((lambda (v.4$3325$3340) ((lambda (expr$3341) ((lambda (v.5$3326$3342) (if (null? v.5$3326$3342) (cons expr$3341 #f) #f)) (cdr v.3$3324$3338))) v.4$3325$3340)) (car v.3$3324$3338)) #f)) (cdr v.1$3322$3334))) v.2$3323$3336)) (car v.1$3322$3334)) #f)) (cdr expr$3314$3327))))) (match-tuck-ids lambda (expr$3247$3264 rename$3248$3265 compare$3249$3266) (car ((lambda (tmp$3268$3270) (if tmp$3268$3270 tmp$3268$3270 (cons (error/loc "no expansion for" expr$3247$3264) #f))) ((lambda (v.1$3255$3271) (if (pair? v.1$3255$3271) ((lambda (v.2$3256$3273) (if (pair? v.2$3256$3273) ((lambda (v.3$3257$3275) ((lambda (letish$3276) ((lambda (v.4$3258$3277) (if (pair? v.4$3258$3277) ((lambda (v.5$3259$3279) ((lambda (args$3280) ((lambda (v.6$3260$3281) (if (pair? v.6$3260$3281) ((lambda (v.7$3261$3283) (if (list? v.7$3261$3283) ((lambda (expr$3285) ((lambda (v.8$3262$3286) (if (null? v.8$3262$3286) ((lambda (v.9$3263$3288) (if (list? v.9$3263$3288) ((lambda (ids$3290) (cons (cons-source letish$3276 (cons-source args$3280 (cons-source (append (map (lambda (expr$3291) expr$3291) expr$3285) ids$3290) (quote ()) (quote ((expr ... ids ...)))) (quote (args (expr ... ids ...)))) (quote (letish args (expr ... ids ...)))) #f)) v.9$3263$3288) #f)) (cdr v.1$3255$3271)) #f)) (cdr v.6$3260$3281))) v.7$3261$3283) #f)) (car v.6$3260$3281)) #f)) (cdr v.4$3258$3277))) v.5$3259$3279)) (car v.4$3258$3277)) #f)) (cdr v.2$3256$3273))) v.3$3257$3275)) (car v.2$3256$3273)) #f)) (car v.1$3255$3271)) #f)) (cdr expr$3247$3264))))) (match-drop-ids lambda (expr$3209$3220 rename$3210$3221 compare$3211$3222) (car ((lambda (tmp$3224$3226) (if tmp$3224$3226 tmp$3224$3226 (cons (error/loc "no expansion for" expr$3209$3220) #f))) ((lambda (v.1$3217$3227) (if (pair? v.1$3217$3227) ((lambda (v.2$3218$3229) ((lambda (expr$3230) ((lambda (v.3$3219$3231) (if (list? v.3$3219$3231) ((lambda (ids$3233) (cons expr$3230 #f)) v.3$3219$3231) #f)) (cdr v.1$3217$3227))) v.2$3218$3229)) (car v.1$3217$3227)) #f)) (cdr expr$3209$3220))))) (match-quasiquote-step lambda (expr$3119$3142 rename$3120$3143 compare$3121$3144) (car ((lambda (tmp$3146$3148) (if tmp$3146$3148 tmp$3146$3148 (cons (error/loc "no expansion for" expr$3119$3142) #f))) ((lambda (v.1$3127$3149) (if (pair? v.1$3127$3149) ((lambda (v.2$3128$3151) ((lambda (x$3152) ((lambda (v.3$3129$3153) (if (pair? v.3$3129$3153) ((lambda (v.4$3130$3155) ((lambda (q$3156) ((lambda (v.5$3131$3157) (if (pair? v.5$3131$3157) ((lambda (v.6$3132$3159) ((lambda (g+s$3160) ((lambda (v.7$3133$3161) (if (pair? v.7$3133$3161) ((lambda (v.8$3134$3163) ((lambda (sk$3164) ((lambda (v.9$3135$3165) (if (pair? v.9$3135$3165) ((lambda (v.10$3136$3167) ((lambda (fk$3168) ((lambda (v.11$3137$3169) (if (pair? v.11$3137$3169) ((lambda (v.12$3138$3171) ((lambda (depth$3172) ((lambda (v.13$3139$3173) (if (pair? v.13$3139$3173) ((lambda (v.14$3140$3175) ((lambda (i$3176) ((lambda (v.15$3141$3177) (if (null? v.15$3141$3177) (cons (cons-source (rename$3120$3143 (quote match-quasiquote)) (cons-source x$3152 (cons-source q$3156 (cons-source g+s$3160 (cons-source sk$3164 (cons-source fk$3168 (cons-source i$3176 depth$3172 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (q g+s sk fk i . depth))) (quote (x q g+s sk fk i . depth))) (quote (match-quasiquote x q g+s sk fk i . depth))) #f) #f)) (cdr v.13$3139$3173))) v.14$3140$3175)) (car v.13$3139$3173)) #f)) (cdr v.11$3137$3169))) v.12$3138$3171)) (car v.11$3137$3169)) #f)) (cdr v.9$3135$3165))) v.10$3136$3167)) (car v.9$3135$3165)) #f)) (cdr v.7$3133$3161))) v.8$3134$3163)) (car v.7$3133$3161)) #f)) (cdr v.5$3131$3157))) v.6$3132$3159)) (car v.5$3131$3157)) #f)) (cdr v.3$3129$3153))) v.4$3130$3155)) (car v.3$3129$3153)) #f)) (cdr v.1$3127$3149))) v.2$3128$3151)) (car v.1$3127$3149)) #f)) (cdr expr$3119$3142))))) (match-quasiquote lambda (expr$2470$2611 rename$2471$2612 compare$2472$2613) (car ((lambda (tmp$2615$2617) (if tmp$2615$2617 tmp$2615$2617 ((lambda (tmp$2619$2621) (if tmp$2619$2621 tmp$2619$2621 ((lambda (tmp$2623$2625) (if tmp$2623$2625 tmp$2623$2625 ((lambda (tmp$2627$2629) (if tmp$2627$2629 tmp$2627$2629 ((lambda (tmp$2631$2633) (if tmp$2631$2633 tmp$2631$2633 ((lambda (tmp$2635$2637) (if tmp$2635$2637 tmp$2635$2637 ((lambda (tmp$2639$2641) (if tmp$2639$2641 tmp$2639$2641 ((lambda (tmp$2643$2645) (if tmp$2643$2645 tmp$2643$2645 (cons (error/loc "no expansion for" expr$2470$2611) #f))) ((lambda (v.121$2598$2646) (if (pair? v.121$2598$2646) ((lambda (v.122$2599$2648) ((lambda (v$2649) ((lambda (v.123$2600$2650) (if (pair? v.123$2600$2650) ((lambda (v.124$2601$2652) ((lambda (x$2653) ((lambda (v.125$2602$2654) (if (pair? v.125$2602$2654) ((lambda (v.126$2603$2656) ((lambda (g+s$2657) ((lambda (v.127$2604$2658) (if (pair? v.127$2604$2658) ((lambda (v.128$2605$2660) ((lambda (sk$2661) ((lambda (v.129$2606$2662) (if (pair? v.129$2606$2662) ((lambda (v.130$2607$2664) ((lambda (fk$2665) ((lambda (v.131$2608$2666) (if (pair? v.131$2608$2666) ((lambda (v.132$2609$2668) ((lambda (i$2669) ((lambda (v.133$2610$2670) ((lambda (depth$2671) (cons (cons-source (rename$2471$2612 (quote match-one)) (cons-source v$2649 (cons-source (cons-source (rename$2471$2612 (quote quote)) (cons-source x$2653 (quote ()) (quote (x))) (quote (quote x))) (cons-source g+s$2657 (cons-source sk$2661 (cons-source fk$2665 (cons-source i$2669 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((quote x) g+s sk fk i))) (quote (v (quote x) g+s sk fk i))) (quote (match-one v (quote x) g+s sk fk i))) #f)) v.133$2610$2670)) (cdr v.131$2608$2666))) v.132$2609$2668)) (car v.131$2608$2666)) #f)) (cdr v.129$2606$2662))) v.130$2607$2664)) (car v.129$2606$2662)) #f)) (cdr v.127$2604$2658))) v.128$2605$2660)) (car v.127$2604$2658)) #f)) (cdr v.125$2602$2654))) v.126$2603$2656)) (car v.125$2602$2654)) #f)) (cdr v.123$2600$2650))) v.124$2601$2652)) (car v.123$2600$2650)) #f)) (cdr v.121$2598$2646))) v.122$2599$2648)) (car v.121$2598$2646)) #f)) (cdr expr$2470$2611))))) ((lambda (v.107$2584$2672) (if (pair? v.107$2584$2672) ((lambda (v.108$2585$2674) ((lambda (v$2675) ((lambda (v.109$2586$2676) (if (pair? v.109$2586$2676) ((lambda (v.110$2587$2678) (if (vector? v.110$2587$2678) ((lambda (v.111$2588$2680) (if (list? v.111$2588$2680) ((lambda (elt$2682) ((lambda (v.112$2589$2683) (if (pair? v.112$2589$2683) ((lambda (v.113$2590$2685) ((lambda (g+s$2686) ((lambda (v.114$2591$2687) (if (pair? v.114$2591$2687) ((lambda (v.115$2592$2689) ((lambda (sk$2690) ((lambda (v.116$2593$2691) (if (pair? v.116$2593$2691) ((lambda (v.117$2594$2693) ((lambda (fk$2694) ((lambda (v.118$2595$2695) (if (pair? v.118$2595$2695) ((lambda (v.119$2596$2697) ((lambda (i$2698) ((lambda (v.120$2597$2699) ((lambda (depth$2700) (cons (cons-source (rename$2471$2612 (quote if)) (cons-source (cons-source (rename$2471$2612 (quote vector?)) (cons-source v$2675 (quote ()) (quote (v))) (quote (vector? v))) (cons-source (cons-source (rename$2471$2612 (quote let)) (cons-source (cons-source (cons-source (rename$2471$2612 (quote ls)) (cons-source (cons-source (rename$2471$2612 (quote vector->list)) (cons-source v$2675 (quote ()) (quote (v))) (quote (vector->list v))) (quote ()) (quote ((vector->list v)))) (quote (ls (vector->list v)))) (quote ()) (quote ((ls (vector->list v))))) (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source (rename$2471$2612 (quote ls)) (cons-source elt$2682 (cons-source g+s$2686 (cons-source sk$2690 (cons-source fk$2694 (cons-source i$2698 depth$2700 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote ((elt ...) g+s sk fk i . depth))) (quote (ls (elt ...) g+s sk fk i . depth))) (quote (match-quasiquote ls (elt ...) g+s sk fk i . depth))) (quote ()) (quote ((match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (quote (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)))) (cons-source fk$2694 (quote ()) (quote (fk))) (quote ((let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote ((vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) (quote (if (vector? v) (let ((ls (vector->list v))) (match-quasiquote ls (elt ...) g+s sk fk i . depth)) fk))) #f)) v.120$2597$2699)) (cdr v.118$2595$2695))) v.119$2596$2697)) (car v.118$2595$2695)) #f)) (cdr v.116$2593$2691))) v.117$2594$2693)) (car v.116$2593$2691)) #f)) (cdr v.114$2591$2687))) v.115$2592$2689)) (car v.114$2591$2687)) #f)) (cdr v.112$2589$2683))) v.113$2590$2685)) (car v.112$2589$2683)) #f)) (cdr v.109$2586$2676))) v.111$2588$2680) #f)) (vector->list v.110$2587$2678)) #f)) (car v.109$2586$2676)) #f)) (cdr v.107$2584$2672))) v.108$2585$2674)) (car v.107$2584$2672)) #f)) (cdr expr$2470$2611))))) ((lambda (v.92$2569$2701) (if (pair? v.92$2569$2701) ((lambda (v.93$2570$2703) ((lambda (v$2704) ((lambda (v.94$2571$2705) (if (pair? v.94$2571$2705) ((lambda (v.95$2572$2707) (if (pair? v.95$2572$2707) ((lambda (v.96$2573$2709) ((lambda (p$2710) ((lambda (v.97$2574$2711) ((lambda (q$2712) ((lambda (v.98$2575$2713) (if (pair? v.98$2575$2713) ((lambda (v.99$2576$2715) ((lambda (g+s$2716) ((lambda (v.100$2577$2717) (if (pair? v.100$2577$2717) ((lambda (v.101$2578$2719) ((lambda (sk$2720) ((lambda (v.102$2579$2721) (if (pair? v.102$2579$2721) ((lambda (v.103$2580$2723) ((lambda (fk$2724) ((lambda (v.104$2581$2725) (if (pair? v.104$2581$2725) ((lambda (v.105$2582$2727) ((lambda (i$2728) ((lambda (v.106$2583$2729) ((lambda (depth$2730) (cons (cons-source (rename$2471$2612 (quote if)) (cons-source (cons-source (rename$2471$2612 (quote pair?)) (cons-source v$2704 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$2471$2612 (quote let)) (cons-source (cons-source (cons-source (rename$2471$2612 (quote w)) (cons-source (cons-source (rename$2471$2612 (quote car)) (cons-source v$2704 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$2471$2612 (quote x)) (cons-source (cons-source (rename$2471$2612 (quote cdr)) (cons-source v$2704 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source (rename$2471$2612 (quote w)) (cons-source p$2710 (cons-source g+s$2716 (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote-step)) (cons-source (rename$2471$2612 (quote x)) (cons-source q$2712 (cons-source g+s$2716 (cons-source sk$2720 (cons-source fk$2724 (cons-source depth$2730 (quote ()) (quote (depth))) (quote (fk depth))) (quote (sk fk depth))) (quote (g+s sk fk depth))) (quote (q g+s sk fk depth))) (quote (x q g+s sk fk depth))) (quote (match-quasiquote-step x q g+s sk fk depth))) (cons-source fk$2724 (cons-source i$2728 depth$2730 (quote (i . depth))) (quote (fk i . depth))) (quote ((match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth))) (quote ()) (quote ((match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (quote (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)))) (cons-source fk$2724 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-quasiquote w p g+s (match-quasiquote-step x q g+s sk fk depth) fk i . depth)) fk))) #f)) v.106$2583$2729)) (cdr v.104$2581$2725))) v.105$2582$2727)) (car v.104$2581$2725)) #f)) (cdr v.102$2579$2721))) v.103$2580$2723)) (car v.102$2579$2721)) #f)) (cdr v.100$2577$2717))) v.101$2578$2719)) (car v.100$2577$2717)) #f)) (cdr v.98$2575$2713))) v.99$2576$2715)) (car v.98$2575$2713)) #f)) (cdr v.94$2571$2705))) v.97$2574$2711)) (cdr v.95$2572$2707))) v.96$2573$2709)) (car v.95$2572$2707)) #f)) (car v.94$2571$2705)) #f)) (cdr v.92$2569$2701))) v.93$2570$2703)) (car v.92$2569$2701)) #f)) (cdr expr$2470$2611))))) ((lambda (v.73$2550$2731) (if (pair? v.73$2550$2731) ((lambda (v.74$2551$2733) ((lambda (v$2734) ((lambda (v.75$2552$2735) (if (pair? v.75$2552$2735) ((lambda (v.76$2553$2737) (if (pair? v.76$2553$2737) ((lambda (v.77$2554$2739) (if (compare$2472$2613 v.77$2554$2739 (rename$2471$2612 (quote unquote-splicing))) ((lambda (v.78$2555$2741) (if (pair? v.78$2555$2741) ((lambda (v.79$2556$2743) ((lambda (p$2744) ((lambda (v.80$2557$2745) (if (null? v.80$2557$2745) ((lambda (v.81$2558$2747) (if (pair? v.81$2558$2747) ((lambda (v.82$2559$2749) ((lambda (g+s$2750) ((lambda (v.83$2560$2751) (if (pair? v.83$2560$2751) ((lambda (v.84$2561$2753) ((lambda (sk$2754) ((lambda (v.85$2562$2755) (if (pair? v.85$2562$2755) ((lambda (v.86$2563$2757) ((lambda (fk$2758) ((lambda (v.87$2564$2759) (if (pair? v.87$2564$2759) ((lambda (v.88$2565$2761) ((lambda (i$2762) ((lambda (v.89$2566$2763) (if (pair? v.89$2566$2763) ((lambda (v.90$2567$2765) ((lambda (x$2766) ((lambda (v.91$2568$2767) ((lambda (depth$2768) (cons (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source v$2734 (cons-source p$2744 (cons-source g+s$2750 (cons-source sk$2754 (cons-source fk$2758 (cons-source i$2762 depth$2768 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.91$2568$2767)) (cdr v.89$2566$2763))) v.90$2567$2765)) (car v.89$2566$2763)) #f)) (cdr v.87$2564$2759))) v.88$2565$2761)) (car v.87$2564$2759)) #f)) (cdr v.85$2562$2755))) v.86$2563$2757)) (car v.85$2562$2755)) #f)) (cdr v.83$2560$2751))) v.84$2561$2753)) (car v.83$2560$2751)) #f)) (cdr v.81$2558$2747))) v.82$2559$2749)) (car v.81$2558$2747)) #f)) (cdr v.75$2552$2735)) #f)) (cdr v.78$2555$2741))) v.79$2556$2743)) (car v.78$2555$2741)) #f)) (cdr v.76$2553$2737)) #f)) (car v.76$2553$2737)) #f)) (car v.75$2552$2735)) #f)) (cdr v.73$2550$2731))) v.74$2551$2733)) (car v.73$2550$2731)) #f)) (cdr expr$2470$2611))))) ((lambda (v.54$2531$2769) (if (pair? v.54$2531$2769) ((lambda (v.55$2532$2771) ((lambda (v$2772) ((lambda (v.56$2533$2773) (if (pair? v.56$2533$2773) ((lambda (v.57$2534$2775) (if (pair? v.57$2534$2775) ((lambda (v.58$2535$2777) (if (compare$2472$2613 v.58$2535$2777 (rename$2471$2612 (quote unquote))) ((lambda (v.59$2536$2779) (if (pair? v.59$2536$2779) ((lambda (v.60$2537$2781) ((lambda (p$2782) ((lambda (v.61$2538$2783) (if (null? v.61$2538$2783) ((lambda (v.62$2539$2785) (if (pair? v.62$2539$2785) ((lambda (v.63$2540$2787) ((lambda (g+s$2788) ((lambda (v.64$2541$2789) (if (pair? v.64$2541$2789) ((lambda (v.65$2542$2791) ((lambda (sk$2792) ((lambda (v.66$2543$2793) (if (pair? v.66$2543$2793) ((lambda (v.67$2544$2795) ((lambda (fk$2796) ((lambda (v.68$2545$2797) (if (pair? v.68$2545$2797) ((lambda (v.69$2546$2799) ((lambda (i$2800) ((lambda (v.70$2547$2801) (if (pair? v.70$2547$2801) ((lambda (v.71$2548$2803) ((lambda (x$2804) ((lambda (v.72$2549$2805) ((lambda (depth$2806) (cons (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source v$2772 (cons-source p$2782 (cons-source g+s$2788 (cons-source sk$2792 (cons-source fk$2796 (cons-source i$2800 depth$2806 (quote (i . depth))) (quote (fk i . depth))) (quote (sk fk i . depth))) (quote (g+s sk fk i . depth))) (quote (p g+s sk fk i . depth))) (quote (v p g+s sk fk i . depth))) (quote (match-quasiquote v p g+s sk fk i . depth))) #f)) v.72$2549$2805)) (cdr v.70$2547$2801))) v.71$2548$2803)) (car v.70$2547$2801)) #f)) (cdr v.68$2545$2797))) v.69$2546$2799)) (car v.68$2545$2797)) #f)) (cdr v.66$2543$2793))) v.67$2544$2795)) (car v.66$2543$2793)) #f)) (cdr v.64$2541$2789))) v.65$2542$2791)) (car v.64$2541$2789)) #f)) (cdr v.62$2539$2785))) v.63$2540$2787)) (car v.62$2539$2785)) #f)) (cdr v.56$2533$2773)) #f)) (cdr v.59$2536$2779))) v.60$2537$2781)) (car v.59$2536$2779)) #f)) (cdr v.57$2534$2775)) #f)) (car v.57$2534$2775)) #f)) (car v.56$2533$2773)) #f)) (cdr v.54$2531$2769))) v.55$2532$2771)) (car v.54$2531$2769)) #f)) (cdr expr$2470$2611))))) ((lambda (v.37$2514$2807) (if (pair? v.37$2514$2807) ((lambda (v.38$2515$2809) ((lambda (v$2810) ((lambda (v.39$2516$2811) (if (pair? v.39$2516$2811) ((lambda (v.40$2517$2813) (if (pair? v.40$2517$2813) ((lambda (v.41$2518$2815) (if (compare$2472$2613 v.41$2518$2815 (rename$2471$2612 (quote quasiquote))) ((lambda (v.42$2519$2817) (if (pair? v.42$2519$2817) ((lambda (v.43$2520$2819) ((lambda (p$2820) ((lambda (v.44$2521$2821) (if (null? v.44$2521$2821) ((lambda (v.45$2522$2823) (if (pair? v.45$2522$2823) ((lambda (v.46$2523$2825) ((lambda (g+s$2826) ((lambda (v.47$2524$2827) (if (pair? v.47$2524$2827) ((lambda (v.48$2525$2829) ((lambda (sk$2830) ((lambda (v.49$2526$2831) (if (pair? v.49$2526$2831) ((lambda (v.50$2527$2833) ((lambda (fk$2834) ((lambda (v.51$2528$2835) (if (pair? v.51$2528$2835) ((lambda (v.52$2529$2837) ((lambda (i$2838) ((lambda (v.53$2530$2839) ((lambda (depth$2840) (cons (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source v$2810 (cons-source p$2820 (cons-source g+s$2826 (cons-source sk$2830 (cons-source fk$2834 (cons-source i$2838 (cons-source #f depth$2840 (quote (#f . depth))) (quote (i #f . depth))) (quote (fk i #f . depth))) (quote (sk fk i #f . depth))) (quote (g+s sk fk i #f . depth))) (quote (p g+s sk fk i #f . depth))) (quote (v p g+s sk fk i #f . depth))) (quote (match-quasiquote v p g+s sk fk i #f . depth))) #f)) v.53$2530$2839)) (cdr v.51$2528$2835))) v.52$2529$2837)) (car v.51$2528$2835)) #f)) (cdr v.49$2526$2831))) v.50$2527$2833)) (car v.49$2526$2831)) #f)) (cdr v.47$2524$2827))) v.48$2525$2829)) (car v.47$2524$2827)) #f)) (cdr v.45$2522$2823))) v.46$2523$2825)) (car v.45$2522$2823)) #f)) (cdr v.39$2516$2811)) #f)) (cdr v.42$2519$2817))) v.43$2520$2819)) (car v.42$2519$2817)) #f)) (cdr v.40$2517$2813)) #f)) (car v.40$2517$2813)) #f)) (car v.39$2516$2811)) #f)) (cdr v.37$2514$2807))) v.38$2515$2809)) (car v.37$2514$2807)) #f)) (cdr expr$2470$2611))))) ((lambda (v.18$2495$2841) (if (pair? v.18$2495$2841) ((lambda (v.19$2496$2843) ((lambda (v$2844) ((lambda (v.20$2497$2845) (if (pair? v.20$2497$2845) ((lambda (v.21$2498$2847) (if (pair? v.21$2498$2847) ((lambda (v.22$2499$2849) (if (pair? v.22$2499$2849) ((lambda (v.23$2500$2851) (if (compare$2472$2613 v.23$2500$2851 (rename$2471$2612 (quote unquote-splicing))) ((lambda (v.24$2501$2853) (if (pair? v.24$2501$2853) ((lambda (v.25$2502$2855) ((lambda (p$2856) ((lambda (v.26$2503$2857) (if (null? v.26$2503$2857) ((lambda (v.27$2504$2859) ((lambda (rest$2860) ((lambda (v.28$2505$2861) (if (pair? v.28$2505$2861) ((lambda (v.29$2506$2863) ((lambda (g+s$2864) ((lambda (v.30$2507$2865) (if (pair? v.30$2507$2865) ((lambda (v.31$2508$2867) ((lambda (sk$2868) ((lambda (v.32$2509$2869) (if (pair? v.32$2509$2869) ((lambda (v.33$2510$2871) ((lambda (fk$2872) ((lambda (v.34$2511$2873) (if (pair? v.34$2511$2873) ((lambda (v.35$2512$2875) ((lambda (i$2876) ((lambda (v.36$2513$2877) (if (null? v.36$2513$2877) (cons (cons-source (rename$2471$2612 (quote if)) (cons-source (cons-source (rename$2471$2612 (quote pair?)) (cons-source v$2844 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$2471$2612 (quote match-one)) (cons-source v$2844 (cons-source (cons-source p$2856 (rename$2471$2612 (quote tmp)) (quote (p . tmp))) (cons-source (cons-source (rename$2471$2612 (quote match-quasiquote)) (cons-source (rename$2471$2612 (quote tmp)) (cons-source rest$2860 (cons-source g+s$2864 (cons-source sk$2868 (cons-source fk$2872 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote (rest g+s sk fk))) (quote (tmp rest g+s sk fk))) (quote (match-quasiquote tmp rest g+s sk fk))) (cons-source fk$2872 (cons-source i$2876 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-quasiquote tmp rest g+s sk fk) fk i))) (quote ((p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i))) (quote (v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i))) (quote (match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i))) (cons-source fk$2872 (quote ()) (quote (fk))) (quote ((match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i) fk))) (quote ((pair? v) (match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i) fk))) (quote (if (pair? v) (match-one v (p . tmp) (match-quasiquote tmp rest g+s sk fk) fk i) fk))) #f) #f)) (cdr v.34$2511$2873))) v.35$2512$2875)) (car v.34$2511$2873)) #f)) (cdr v.32$2509$2869))) v.33$2510$2871)) (car v.32$2509$2869)) #f)) (cdr v.30$2507$2865))) v.31$2508$2867)) (car v.30$2507$2865)) #f)) (cdr v.28$2505$2861))) v.29$2506$2863)) (car v.28$2505$2861)) #f)) (cdr v.20$2497$2845))) v.27$2504$2859)) (cdr v.21$2498$2847)) #f)) (cdr v.24$2501$2853))) v.25$2502$2855)) (car v.24$2501$2853)) #f)) (cdr v.22$2499$2849)) #f)) (car v.22$2499$2849)) #f)) (car v.21$2498$2847)) #f)) (car v.20$2497$2845)) #f)) (cdr v.18$2495$2841))) v.19$2496$2843)) (car v.18$2495$2841)) #f)) (cdr expr$2470$2611))))) ((lambda (v.1$2478$2879) (if (pair? v.1$2478$2879) ((lambda (v.2$2479$2881) ((lambda (v$2882) ((lambda (v.3$2480$2883) (if (pair? v.3$2480$2883) ((lambda (v.4$2481$2885) (if (pair? v.4$2481$2885) ((lambda (v.5$2482$2887) (if (compare$2472$2613 v.5$2482$2887 (rename$2471$2612 (quote unquote))) ((lambda (v.6$2483$2889) (if (pair? v.6$2483$2889) ((lambda (v.7$2484$2891) ((lambda (p$2892) ((lambda (v.8$2485$2893) (if (null? v.8$2485$2893) ((lambda (v.9$2486$2895) (if (pair? v.9$2486$2895) ((lambda (v.10$2487$2897) ((lambda (g+s$2898) ((lambda (v.11$2488$2899) (if (pair? v.11$2488$2899) ((lambda (v.12$2489$2901) ((lambda (sk$2902) ((lambda (v.13$2490$2903) (if (pair? v.13$2490$2903) ((lambda (v.14$2491$2905) ((lambda (fk$2906) ((lambda (v.15$2492$2907) (if (pair? v.15$2492$2907) ((lambda (v.16$2493$2909) ((lambda (i$2910) ((lambda (v.17$2494$2911) (if (null? v.17$2494$2911) (cons (cons-source (rename$2471$2612 (quote match-one)) (cons-source v$2882 (cons-source p$2892 (cons-source g+s$2898 (cons-source sk$2902 (cons-source fk$2906 (cons-source i$2910 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (p g+s sk fk i))) (quote (v p g+s sk fk i))) (quote (match-one v p g+s sk fk i))) #f) #f)) (cdr v.15$2492$2907))) v.16$2493$2909)) (car v.15$2492$2907)) #f)) (cdr v.13$2490$2903))) v.14$2491$2905)) (car v.13$2490$2903)) #f)) (cdr v.11$2488$2899))) v.12$2489$2901)) (car v.11$2488$2899)) #f)) (cdr v.9$2486$2895))) v.10$2487$2897)) (car v.9$2486$2895)) #f)) (cdr v.3$2480$2883)) #f)) (cdr v.6$2483$2889))) v.7$2484$2891)) (car v.6$2483$2889)) #f)) (cdr v.4$2481$2885)) #f)) (car v.4$2481$2885)) #f)) (car v.3$2480$2883)) #f)) (cdr v.1$2478$2879))) v.2$2479$2881)) (car v.1$2478$2879)) #f)) (cdr expr$2470$2611))))) (match-two lambda (expr$531$938 rename$532$939 compare$533$940) (car ((lambda (tmp$942$944) (if tmp$942$944 tmp$942$944 ((lambda (tmp$946$948) (if tmp$946$948 tmp$946$948 ((lambda (tmp$950$952) (if tmp$950$952 tmp$950$952 ((lambda (tmp$954$956) (if tmp$954$956 tmp$954$956 ((lambda (tmp$958$960) (if tmp$958$960 tmp$958$960 ((lambda (tmp$962$964) (if tmp$962$964 tmp$962$964 ((lambda (tmp$966$968) (if tmp$966$968 tmp$966$968 ((lambda (tmp$970$972) (if tmp$970$972 tmp$970$972 ((lambda (tmp$974$976) (if tmp$974$976 tmp$974$976 ((lambda (tmp$978$980) (if tmp$978$980 tmp$978$980 ((lambda (tmp$982$984) (if tmp$982$984 tmp$982$984 ((lambda (tmp$986$988) (if tmp$986$988 tmp$986$988 ((lambda (tmp$990$992) (if tmp$990$992 tmp$990$992 ((lambda (tmp$994$996) (if tmp$994$996 tmp$994$996 ((lambda (tmp$998$1000) (if tmp$998$1000 tmp$998$1000 ((lambda (tmp$1002$1004) (if tmp$1002$1004 tmp$1002$1004 ((lambda (tmp$1006$1008) (if tmp$1006$1008 tmp$1006$1008 ((lambda (tmp$1010$1012) (if tmp$1010$1012 tmp$1010$1012 ((lambda (tmp$1014$1016) (if tmp$1014$1016 tmp$1014$1016 ((lambda (tmp$1018$1020) (if tmp$1018$1020 tmp$1018$1020 ((lambda (tmp$1022$1024) (if tmp$1022$1024 tmp$1022$1024 ((lambda (tmp$1026$1028) (if tmp$1026$1028 tmp$1026$1028 ((lambda (tmp$1030$1032) (if tmp$1030$1032 tmp$1030$1032 ((lambda (tmp$1034$1036) (if tmp$1034$1036 tmp$1034$1036 ((lambda (tmp$1038$1040) (if tmp$1038$1040 tmp$1038$1040 ((lambda (tmp$1042$1044) (if tmp$1042$1044 tmp$1042$1044 (cons (error/loc "no expansion for" expr$531$938) #f))) ((lambda (v.387$925$1045) (if (pair? v.387$925$1045) ((lambda (v.388$926$1047) ((lambda (v$1048) ((lambda (v.389$927$1049) (if (pair? v.389$927$1049) ((lambda (v.390$928$1051) ((lambda (x$1052) ((lambda (v.391$929$1053) (if (pair? v.391$929$1053) ((lambda (v.392$930$1055) ((lambda (g+s$1056) ((lambda (v.393$931$1057) (if (pair? v.393$931$1057) ((lambda (v.394$932$1059) (if (list? v.394$932$1059) ((lambda (sk$1061) ((lambda (v.395$933$1062) (if (pair? v.395$933$1062) ((lambda (v.396$934$1064) ((lambda (fk$1065) ((lambda (v.397$935$1066) (if (pair? v.397$935$1066) ((lambda (v.398$936$1068) (if (list? v.398$936$1068) ((lambda (id$1070) ((lambda (v.399$937$1071) (if (null? v.399$937$1071) (cons (cons-source (rename$532$939 (quote match-check-identifier)) (cons-source x$1052 (cons-source (cons-source (rename$532$939 (quote let-syntax)) (cons-source (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source (cons-source (rename$532$939 (quote syntax-rules)) (cons-source id$1070 (cons-source (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source x$1052 (cons-source (rename$532$939 (quote sk2)) (cons-source (rename$532$939 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (x sk2 fk2))) (quote (new-sym? x sk2 fk2))) (cons-source (rename$532$939 (quote sk2)) (quote ()) (quote (sk2))) (quote ((new-sym? x sk2 fk2) sk2))) (cons-source (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source (rename$532$939 (quote y)) (cons-source (rename$532$939 (quote sk2)) (cons-source (rename$532$939 (quote fk2)) (quote ()) (quote (fk2))) (quote (sk2 fk2))) (quote (y sk2 fk2))) (quote (new-sym? y sk2 fk2))) (cons-source (rename$532$939 (quote fk2)) (quote ()) (quote (fk2))) (quote ((new-sym? y sk2 fk2) fk2))) (quote ()) (quote (((new-sym? y sk2 fk2) fk2)))) (quote (((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ((id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (quote ()) (quote ((syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote (new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2))))) (quote ()) (quote ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))))) (cons-source (cons-source (rename$532$939 (quote new-sym?)) (cons-source (rename$532$939 (quote random-sym-to-match)) (cons-source (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source x$1052 (cons-source v$1048 (quote ()) (quote (v))) (quote (x v))) (quote ()) (quote ((x v)))) (cons-source (append (map (lambda (sk$1073) sk$1073) sk$1061) (cons-source (append (map (lambda (id$1074) id$1074) id$1070) (cons-source x$1052 (quote ()) (quote (x)))) (quote ()) (quote ((id ... x))))) (quote ()) (quote ((sk ... (id ... x))))) (quote (((x v)) (sk ... (id ... x))))) (quote (let ((x v)) (sk ... (id ... x))))) (cons-source (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote equal?)) (cons-source v$1048 (cons-source x$1052 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1075) sk$1075) sk$1061) (cons-source id$1070 (quote ()) (quote ((id ...))))) (cons-source fk$1065 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote ()) (quote ((new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (quote (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))))) (cons-source (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote equal?)) (cons-source v$1048 (cons-source x$1052 (quote ()) (quote (x))) (quote (v x))) (quote (equal? v x))) (cons-source (append (map (lambda (sk$1076) sk$1076) sk$1061) (cons-source id$1070 (quote ()) (quote ((id ...))))) (cons-source fk$1065 (quote ()) (quote (fk))) (quote ((sk ... (id ...)) fk))) (quote ((equal? v x) (sk ... (id ...)) fk))) (quote (if (equal? v x) (sk ... (id ...)) fk))) (quote ()) (quote ((if (equal? v x) (sk ... (id ...)) fk)))) (quote ((let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) (quote (match-check-identifier x (let-syntax ((new-sym? (syntax-rules (id ...) ((new-sym? x sk2 fk2) sk2) ((new-sym? y sk2 fk2) fk2)))) (new-sym? random-sym-to-match (let ((x v)) (sk ... (id ... x))) (if (equal? v x) (sk ... (id ...)) fk))) (if (equal? v x) (sk ... (id ...)) fk)))) #f) #f)) (cdr v.397$935$1066))) v.398$936$1068) #f)) (car v.397$935$1066)) #f)) (cdr v.395$933$1062))) v.396$934$1064)) (car v.395$933$1062)) #f)) (cdr v.393$931$1057))) v.394$932$1059) #f)) (car v.393$931$1057)) #f)) (cdr v.391$929$1053))) v.392$930$1055)) (car v.391$929$1053)) #f)) (cdr v.389$927$1049))) v.390$928$1051)) (car v.389$927$1049)) #f)) (cdr v.387$925$1045))) v.388$926$1047)) (car v.387$925$1045)) #f)) (cdr expr$531$938))))) ((lambda (v.374$912$1077) (if (pair? v.374$912$1077) ((lambda (v.375$913$1079) ((lambda (v$1080) ((lambda (v.376$914$1081) (if (pair? v.376$914$1081) ((lambda (v.377$915$1083) (if (compare$533$940 v.377$915$1083 (rename$532$939 (quote _))) ((lambda (v.378$916$1085) (if (pair? v.378$916$1085) ((lambda (v.379$917$1087) ((lambda (g+s$1088) ((lambda (v.380$918$1089) (if (pair? v.380$918$1089) ((lambda (v.381$919$1091) (if (list? v.381$919$1091) ((lambda (sk$1093) ((lambda (v.382$920$1094) (if (pair? v.382$920$1094) ((lambda (v.383$921$1096) ((lambda (fk$1097) ((lambda (v.384$922$1098) (if (pair? v.384$922$1098) ((lambda (v.385$923$1100) ((lambda (i$1101) ((lambda (v.386$924$1102) (if (null? v.386$924$1102) (cons (append (map (lambda (sk$1104) sk$1104) sk$1093) (cons-source i$1101 (quote ()) (quote (i)))) #f) #f)) (cdr v.384$922$1098))) v.385$923$1100)) (car v.384$922$1098)) #f)) (cdr v.382$920$1094))) v.383$921$1096)) (car v.382$920$1094)) #f)) (cdr v.380$918$1089))) v.381$919$1091) #f)) (car v.380$918$1089)) #f)) (cdr v.378$916$1085))) v.379$917$1087)) (car v.378$916$1085)) #f)) (cdr v.376$914$1081)) #f)) (car v.376$914$1081)) #f)) (cdr v.374$912$1077))) v.375$913$1079)) (car v.374$912$1077)) #f)) (cdr expr$531$938))))) ((lambda (v.366$904$1105) (if (pair? v.366$904$1105) ((lambda (v.367$905$1107) ((lambda (v$1108) ((lambda (v.368$906$1109) (if (pair? v.368$906$1109) ((lambda (v.369$907$1111) (if (vector? v.369$907$1111) ((lambda (v.370$908$1113) (if (list? v.370$908$1113) ((lambda (p$1115) ((lambda (v.371$909$1116) (if (pair? v.371$909$1116) ((lambda (v.372$910$1118) ((lambda (g+s$1119) ((lambda (v.373$911$1120) ((lambda (x$1121) (cons (cons-source (rename$532$939 (quote match-vector)) (cons-source v$1108 (cons-source 0 (cons-source (quote ()) (cons-source p$1115 x$1121 (quote ((p ...) . x))) (quote (() (p ...) . x))) (quote (0 () (p ...) . x))) (quote (v 0 () (p ...) . x))) (quote (match-vector v 0 () (p ...) . x))) #f)) v.373$911$1120)) (cdr v.371$909$1116))) v.372$910$1118)) (car v.371$909$1116)) #f)) (cdr v.368$906$1109))) v.370$908$1113) #f)) (vector->list v.369$907$1111)) #f)) (car v.368$906$1109)) #f)) (cdr v.366$904$1105))) v.367$905$1107)) (car v.366$904$1105)) #f)) (cdr expr$531$938))))) ((lambda (v.351$889$1122) (if (pair? v.351$889$1122) ((lambda (v.352$890$1124) ((lambda (v$1125) ((lambda (v.353$891$1126) (if (pair? v.353$891$1126) ((lambda (v.354$892$1128) (if (pair? v.354$892$1128) ((lambda (v.355$893$1130) ((lambda (p$1131) ((lambda (v.356$894$1132) ((lambda (q$1133) ((lambda (v.357$895$1134) (if (pair? v.357$895$1134) ((lambda (v.358$896$1136) ((lambda (g+s$1137) ((lambda (v.359$897$1138) (if (pair? v.359$897$1138) ((lambda (v.360$898$1140) ((lambda (sk$1141) ((lambda (v.361$899$1142) (if (pair? v.361$899$1142) ((lambda (v.362$900$1144) ((lambda (fk$1145) ((lambda (v.363$901$1146) (if (pair? v.363$901$1146) ((lambda (v.364$902$1148) ((lambda (i$1149) ((lambda (v.365$903$1150) (if (null? v.365$903$1150) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote pair?)) (cons-source v$1125 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source (rename$532$939 (quote w)) (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1125 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (cons-source (cons-source (rename$532$939 (quote x)) (cons-source (cons-source (rename$532$939 (quote cdr)) (cons-source v$1125 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (x (cdr v)))) (quote ()) (quote ((x (cdr v))))) (quote ((w (car v)) (x (cdr v))))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote w)) (cons-source p$1131 (cons-source (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1125 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$532$939 (quote set-car!)) (cons-source v$1125 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote x)) (cons-source q$1133 (cons-source (cons-source (cons-source (rename$532$939 (quote cdr)) (cons-source v$1125 (quote ()) (quote (v))) (quote (cdr v))) (cons-source (cons-source (rename$532$939 (quote set-cdr!)) (cons-source v$1125 (quote ()) (quote (v))) (quote (set-cdr! v))) (quote ()) (quote ((set-cdr! v)))) (quote ((cdr v) (set-cdr! v)))) (cons-source sk$1141 (cons-source fk$1145 (quote ()) (quote (fk))) (quote (sk fk))) (quote (((cdr v) (set-cdr! v)) sk fk))) (quote (q ((cdr v) (set-cdr! v)) sk fk))) (quote (x q ((cdr v) (set-cdr! v)) sk fk))) (quote (match-one x q ((cdr v) (set-cdr! v)) sk fk))) (cons-source fk$1145 (cons-source i$1149 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (quote (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)))) (cons-source fk$1145 (quote ()) (quote (fk))) (quote ((let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote ((pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) (quote (if (pair? v) (let ((w (car v)) (x (cdr v))) (match-one w p ((car v) (set-car! v)) (match-one x q ((cdr v) (set-cdr! v)) sk fk) fk i)) fk))) #f) #f)) (cdr v.363$901$1146))) v.364$902$1148)) (car v.363$901$1146)) #f)) (cdr v.361$899$1142))) v.362$900$1144)) (car v.361$899$1142)) #f)) (cdr v.359$897$1138))) v.360$898$1140)) (car v.359$897$1138)) #f)) (cdr v.357$895$1134))) v.358$896$1136)) (car v.357$895$1134)) #f)) (cdr v.353$891$1126))) v.356$894$1132)) (cdr v.354$892$1128))) v.355$893$1130)) (car v.354$892$1128)) #f)) (car v.353$891$1126)) #f)) (cdr v.351$889$1122))) v.352$890$1124)) (car v.351$889$1122)) #f)) (cdr expr$531$938))))) ((lambda (v.334$872$1152) (if (pair? v.334$872$1152) ((lambda (v.335$873$1154) ((lambda (v$1155) ((lambda (v.336$874$1156) (if (pair? v.336$874$1156) ((lambda (v.337$875$1158) (if (pair? v.337$875$1158) ((lambda (v.338$876$1160) (if (compare$533$940 v.338$876$1160 (rename$532$939 (quote object))) ((lambda (v.339$877$1162) (if (pair? v.339$877$1162) ((lambda (v.340$878$1164) ((lambda (rec$1165) ((lambda (v.341$879$1166) (if (list? v.341$879$1166) ((lambda (p$1168) ((lambda (v.342$880$1169) (if (pair? v.342$880$1169) ((lambda (v.343$881$1171) ((lambda (g+s$1172) ((lambda (v.344$882$1173) (if (pair? v.344$882$1173) ((lambda (v.345$883$1175) ((lambda (sk$1176) ((lambda (v.346$884$1177) (if (pair? v.346$884$1177) ((lambda (v.347$885$1179) ((lambda (fk$1180) ((lambda (v.348$886$1181) (if (pair? v.348$886$1181) ((lambda (v.349$887$1183) ((lambda (i$1184) ((lambda (v.350$888$1185) (if (null? v.350$888$1185) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1155 (cons-source rec$1165 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-named-refs)) (cons-source v$1155 (cons-source rec$1165 (cons-source p$1168 (cons-source g+s$1172 (cons-source sk$1176 (cons-source fk$1180 (cons-source i$1184 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (rec (p ...) g+s sk fk i))) (quote (v rec (p ...) g+s sk fk i))) (quote (match-record-named-refs v rec (p ...) g+s sk fk i))) (cons-source fk$1180 (quote ()) (quote (fk))) (quote ((match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.348$886$1181))) v.349$887$1183)) (car v.348$886$1181)) #f)) (cdr v.346$884$1177))) v.347$885$1179)) (car v.346$884$1177)) #f)) (cdr v.344$882$1173))) v.345$883$1175)) (car v.344$882$1173)) #f)) (cdr v.342$880$1169))) v.343$881$1171)) (car v.342$880$1169)) #f)) (cdr v.336$874$1156))) v.341$879$1166) #f)) (cdr v.339$877$1162))) v.340$878$1164)) (car v.339$877$1162)) #f)) (cdr v.337$875$1158)) #f)) (car v.337$875$1158)) #f)) (car v.336$874$1156)) #f)) (cdr v.334$872$1152))) v.335$873$1154)) (car v.334$872$1152)) #f)) (cdr expr$531$938))))) ((lambda (v.317$855$1187) (if (pair? v.317$855$1187) ((lambda (v.318$856$1189) ((lambda (v$1190) ((lambda (v.319$857$1191) (if (pair? v.319$857$1191) ((lambda (v.320$858$1193) (if (pair? v.320$858$1193) ((lambda (v.321$859$1195) (if (compare$533$940 v.321$859$1195 (rename$532$939 (quote @))) ((lambda (v.322$860$1197) (if (pair? v.322$860$1197) ((lambda (v.323$861$1199) ((lambda (rec$1200) ((lambda (v.324$862$1201) (if (list? v.324$862$1201) ((lambda (p$1203) ((lambda (v.325$863$1204) (if (pair? v.325$863$1204) ((lambda (v.326$864$1206) ((lambda (g+s$1207) ((lambda (v.327$865$1208) (if (pair? v.327$865$1208) ((lambda (v.328$866$1210) ((lambda (sk$1211) ((lambda (v.329$867$1212) (if (pair? v.329$867$1212) ((lambda (v.330$868$1214) ((lambda (fk$1215) ((lambda (v.331$869$1216) (if (pair? v.331$869$1216) ((lambda (v.332$870$1218) ((lambda (i$1219) ((lambda (v.333$871$1220) (if (null? v.333$871$1220) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1190 (cons-source rec$1200 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-named-refs)) (cons-source v$1190 (cons-source rec$1200 (cons-source p$1203 (cons-source g+s$1207 (cons-source sk$1211 (cons-source fk$1215 (cons-source i$1219 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (rec (p ...) g+s sk fk i))) (quote (v rec (p ...) g+s sk fk i))) (quote (match-record-named-refs v rec (p ...) g+s sk fk i))) (cons-source fk$1215 (quote ()) (quote (fk))) (quote ((match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-named-refs v rec (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.331$869$1216))) v.332$870$1218)) (car v.331$869$1216)) #f)) (cdr v.329$867$1212))) v.330$868$1214)) (car v.329$867$1212)) #f)) (cdr v.327$865$1208))) v.328$866$1210)) (car v.327$865$1208)) #f)) (cdr v.325$863$1204))) v.326$864$1206)) (car v.325$863$1204)) #f)) (cdr v.319$857$1191))) v.324$862$1201) #f)) (cdr v.322$860$1197))) v.323$861$1199)) (car v.322$860$1197)) #f)) (cdr v.320$858$1193)) #f)) (car v.320$858$1193)) #f)) (car v.319$857$1191)) #f)) (cdr v.317$855$1187))) v.318$856$1189)) (car v.317$855$1187)) #f)) (cdr expr$531$938))))) ((lambda (v.300$838$1222) (if (pair? v.300$838$1222) ((lambda (v.301$839$1224) ((lambda (v$1225) ((lambda (v.302$840$1226) (if (pair? v.302$840$1226) ((lambda (v.303$841$1228) (if (pair? v.303$841$1228) ((lambda (v.304$842$1230) (if (compare$533$940 v.304$842$1230 (rename$532$939 (quote struct))) ((lambda (v.305$843$1232) (if (pair? v.305$843$1232) ((lambda (v.306$844$1234) ((lambda (rec$1235) ((lambda (v.307$845$1236) (if (list? v.307$845$1236) ((lambda (p$1238) ((lambda (v.308$846$1239) (if (pair? v.308$846$1239) ((lambda (v.309$847$1241) ((lambda (g+s$1242) ((lambda (v.310$848$1243) (if (pair? v.310$848$1243) ((lambda (v.311$849$1245) ((lambda (sk$1246) ((lambda (v.312$850$1247) (if (pair? v.312$850$1247) ((lambda (v.313$851$1249) ((lambda (fk$1250) ((lambda (v.314$852$1251) (if (pair? v.314$852$1251) ((lambda (v.315$853$1253) ((lambda (i$1254) ((lambda (v.316$854$1255) (if (null? v.316$854$1255) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1225 (cons-source rec$1235 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-refs)) (cons-source v$1225 (cons-source rec$1235 (cons-source 0 (cons-source p$1238 (cons-source g+s$1242 (cons-source sk$1246 (cons-source fk$1250 (cons-source i$1254 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1250 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.314$852$1251))) v.315$853$1253)) (car v.314$852$1251)) #f)) (cdr v.312$850$1247))) v.313$851$1249)) (car v.312$850$1247)) #f)) (cdr v.310$848$1243))) v.311$849$1245)) (car v.310$848$1243)) #f)) (cdr v.308$846$1239))) v.309$847$1241)) (car v.308$846$1239)) #f)) (cdr v.302$840$1226))) v.307$845$1236) #f)) (cdr v.305$843$1232))) v.306$844$1234)) (car v.305$843$1232)) #f)) (cdr v.303$841$1228)) #f)) (car v.303$841$1228)) #f)) (car v.302$840$1226)) #f)) (cdr v.300$838$1222))) v.301$839$1224)) (car v.300$838$1222)) #f)) (cdr expr$531$938))))) ((lambda (v.283$821$1257) (if (pair? v.283$821$1257) ((lambda (v.284$822$1259) ((lambda (v$1260) ((lambda (v.285$823$1261) (if (pair? v.285$823$1261) ((lambda (v.286$824$1263) (if (pair? v.286$824$1263) ((lambda (v.287$825$1265) (if (compare$533$940 v.287$825$1265 (rename$532$939 (quote $))) ((lambda (v.288$826$1267) (if (pair? v.288$826$1267) ((lambda (v.289$827$1269) ((lambda (rec$1270) ((lambda (v.290$828$1271) (if (list? v.290$828$1271) ((lambda (p$1273) ((lambda (v.291$829$1274) (if (pair? v.291$829$1274) ((lambda (v.292$830$1276) ((lambda (g+s$1277) ((lambda (v.293$831$1278) (if (pair? v.293$831$1278) ((lambda (v.294$832$1280) ((lambda (sk$1281) ((lambda (v.295$833$1282) (if (pair? v.295$833$1282) ((lambda (v.296$834$1284) ((lambda (fk$1285) ((lambda (v.297$835$1286) (if (pair? v.297$835$1286) ((lambda (v.298$836$1288) ((lambda (i$1289) ((lambda (v.299$837$1290) (if (null? v.299$837$1290) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote is-a?)) (cons-source v$1260 (cons-source rec$1270 (quote ()) (quote (rec))) (quote (v rec))) (quote (is-a? v rec))) (cons-source (cons-source (rename$532$939 (quote match-record-refs)) (cons-source v$1260 (cons-source rec$1270 (cons-source 0 (cons-source p$1273 (cons-source g+s$1277 (cons-source sk$1281 (cons-source fk$1285 (cons-source i$1289 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (0 (p ...) g+s sk fk i))) (quote (rec 0 (p ...) g+s sk fk i))) (quote (v rec 0 (p ...) g+s sk fk i))) (quote (match-record-refs v rec 0 (p ...) g+s sk fk i))) (cons-source fk$1285 (quote ()) (quote (fk))) (quote ((match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote ((is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) (quote (if (is-a? v rec) (match-record-refs v rec 0 (p ...) g+s sk fk i) fk))) #f) #f)) (cdr v.297$835$1286))) v.298$836$1288)) (car v.297$835$1286)) #f)) (cdr v.295$833$1282))) v.296$834$1284)) (car v.295$833$1282)) #f)) (cdr v.293$831$1278))) v.294$832$1280)) (car v.293$831$1278)) #f)) (cdr v.291$829$1274))) v.292$830$1276)) (car v.291$829$1274)) #f)) (cdr v.285$823$1261))) v.290$828$1271) #f)) (cdr v.288$826$1267))) v.289$827$1269)) (car v.288$826$1267)) #f)) (cdr v.286$824$1263)) #f)) (car v.286$824$1263)) #f)) (car v.285$823$1261)) #f)) (cdr v.283$821$1257))) v.284$822$1259)) (car v.283$821$1257)) #f)) (cdr expr$531$938))))) ((lambda (v.266$804$1292) (if (pair? v.266$804$1292) ((lambda (v.267$805$1294) ((lambda (v$1295) ((lambda (v.268$806$1296) (if (pair? v.268$806$1296) ((lambda (v.269$807$1298) (if (pair? v.269$807$1298) ((lambda (v.270$808$1300) ((lambda (p$1301) ((lambda (v.271$809$1302) (if (pair? v.271$809$1302) ((lambda (v.272$810$1304) (if (compare$533$940 v.272$810$1304 (rename$532$939 (quote ..1))) ((lambda (v.273$811$1306) (if (null? v.273$811$1306) ((lambda (v.274$812$1308) (if (pair? v.274$812$1308) ((lambda (v.275$813$1310) ((lambda (g+s$1311) ((lambda (v.276$814$1312) (if (pair? v.276$814$1312) ((lambda (v.277$815$1314) ((lambda (sk$1315) ((lambda (v.278$816$1316) (if (pair? v.278$816$1316) ((lambda (v.279$817$1318) ((lambda (fk$1319) ((lambda (v.280$818$1320) (if (pair? v.280$818$1320) ((lambda (v.281$819$1322) ((lambda (i$1323) ((lambda (v.282$820$1324) (if (null? v.282$820$1324) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote pair?)) (cons-source v$1295 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source v$1295 (cons-source (cons-source p$1301 (cons-source (rename$532$939 (quote ___)) (quote ()) (quote (___))) (quote (p ___))) (cons-source g+s$1311 (cons-source sk$1315 (cons-source fk$1319 (cons-source i$1323 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ___) g+s sk fk i))) (quote (v (p ___) g+s sk fk i))) (quote (match-one v (p ___) g+s sk fk i))) (cons-source fk$1319 (quote ()) (quote (fk))) (quote ((match-one v (p ___) g+s sk fk i) fk))) (quote ((pair? v) (match-one v (p ___) g+s sk fk i) fk))) (quote (if (pair? v) (match-one v (p ___) g+s sk fk i) fk))) #f) #f)) (cdr v.280$818$1320))) v.281$819$1322)) (car v.280$818$1320)) #f)) (cdr v.278$816$1316))) v.279$817$1318)) (car v.278$816$1316)) #f)) (cdr v.276$814$1312))) v.277$815$1314)) (car v.276$814$1312)) #f)) (cdr v.274$812$1308))) v.275$813$1310)) (car v.274$812$1308)) #f)) (cdr v.268$806$1296)) #f)) (cdr v.271$809$1302)) #f)) (car v.271$809$1302)) #f)) (cdr v.269$807$1298))) v.270$808$1300)) (car v.269$807$1298)) #f)) (car v.268$806$1296)) #f)) (cdr v.266$804$1292))) v.267$805$1294)) (car v.266$804$1292)) #f)) (cdr expr$531$938))))) ((lambda (v.249$787$1326) (if (pair? v.249$787$1326) ((lambda (v.250$788$1328) ((lambda (v$1329) ((lambda (v.251$789$1330) (if (pair? v.251$789$1330) ((lambda (v.252$790$1332) (if (pair? v.252$790$1332) ((lambda (v.253$791$1334) ((lambda (p$1335) ((lambda (v.254$792$1336) (if (pair? v.254$792$1336) ((lambda (v.255$793$1338) (if (compare$533$940 v.255$793$1338 (rename$532$939 (quote ***))) ((lambda (v.256$794$1340) ((lambda (q$1341) ((lambda (v.257$795$1342) (if (pair? v.257$795$1342) ((lambda (v.258$796$1344) ((lambda (g+s$1345) ((lambda (v.259$797$1346) (if (pair? v.259$797$1346) ((lambda (v.260$798$1348) ((lambda (sk$1349) ((lambda (v.261$799$1350) (if (pair? v.261$799$1350) ((lambda (v.262$800$1352) ((lambda (fk$1353) ((lambda (v.263$801$1354) (if (pair? v.263$801$1354) ((lambda (v.264$802$1356) ((lambda (i$1357) ((lambda (v.265$803$1358) (if (null? v.265$803$1358) (cons (cons-source (rename$532$939 (quote match-syntax-error)) (cons-source "invalid use of ***" (cons-source (cons-source p$1335 (cons-source (rename$532$939 (quote ***)) q$1341 (quote (*** . q))) (quote (p *** . q))) (quote ()) (quote ((p *** . q)))) (quote ("invalid use of ***" (p *** . q)))) (quote (match-syntax-error "invalid use of ***" (p *** . q)))) #f) #f)) (cdr v.263$801$1354))) v.264$802$1356)) (car v.263$801$1354)) #f)) (cdr v.261$799$1350))) v.262$800$1352)) (car v.261$799$1350)) #f)) (cdr v.259$797$1346))) v.260$798$1348)) (car v.259$797$1346)) #f)) (cdr v.257$795$1342))) v.258$796$1344)) (car v.257$795$1342)) #f)) (cdr v.251$789$1330))) v.256$794$1340)) (cdr v.254$792$1336)) #f)) (car v.254$792$1336)) #f)) (cdr v.252$790$1332))) v.253$791$1334)) (car v.252$790$1332)) #f)) (car v.251$789$1330)) #f)) (cdr v.249$787$1326))) v.250$788$1328)) (car v.249$787$1326)) #f)) (cdr expr$531$938))))) ((lambda (v.230$768$1360) (if (pair? v.230$768$1360) ((lambda (v.231$769$1362) ((lambda (v$1363) ((lambda (v.232$770$1364) (if (pair? v.232$770$1364) ((lambda (v.233$771$1366) (if (pair? v.233$771$1366) ((lambda (v.234$772$1368) ((lambda (p$1369) ((lambda (v.235$773$1370) (if (pair? v.235$773$1370) ((lambda (v.236$774$1372) (if (compare$533$940 v.236$774$1372 (rename$532$939 (quote ***))) ((lambda (v.237$775$1374) (if (pair? v.237$775$1374) ((lambda (v.238$776$1376) ((lambda (q$1377) ((lambda (v.239$777$1378) (if (null? v.239$777$1378) ((lambda (v.240$778$1380) (if (pair? v.240$778$1380) ((lambda (v.241$779$1382) ((lambda (g+s$1383) ((lambda (v.242$780$1384) (if (pair? v.242$780$1384) ((lambda (v.243$781$1386) ((lambda (sk$1387) ((lambda (v.244$782$1388) (if (pair? v.244$782$1388) ((lambda (v.245$783$1390) ((lambda (fk$1391) ((lambda (v.246$784$1392) (if (pair? v.246$784$1392) ((lambda (v.247$785$1394) ((lambda (i$1395) ((lambda (v.248$786$1396) (if (null? v.248$786$1396) (cons (cons-source (rename$532$939 (quote match-extract-vars)) (cons-source p$1369 (cons-source (cons-source (rename$532$939 (quote match-gen-search)) (cons-source v$1363 (cons-source p$1369 (cons-source q$1377 (cons-source g+s$1383 (cons-source sk$1387 (cons-source fk$1391 (cons-source i$1395 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (q g+s sk fk i))) (quote (p q g+s sk fk i))) (quote (v p q g+s sk fk i))) (quote (match-gen-search v p q g+s sk fk i))) (cons-source i$1395 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-search v p q g+s sk fk i) i ()))) (quote (p (match-gen-search v p q g+s sk fk i) i ()))) (quote (match-extract-vars p (match-gen-search v p q g+s sk fk i) i ()))) #f) #f)) (cdr v.246$784$1392))) v.247$785$1394)) (car v.246$784$1392)) #f)) (cdr v.244$782$1388))) v.245$783$1390)) (car v.244$782$1388)) #f)) (cdr v.242$780$1384))) v.243$781$1386)) (car v.242$780$1384)) #f)) (cdr v.240$778$1380))) v.241$779$1382)) (car v.240$778$1380)) #f)) (cdr v.232$770$1364)) #f)) (cdr v.237$775$1374))) v.238$776$1376)) (car v.237$775$1374)) #f)) (cdr v.235$773$1370)) #f)) (car v.235$773$1370)) #f)) (cdr v.233$771$1366))) v.234$772$1368)) (car v.233$771$1366)) #f)) (car v.232$770$1364)) #f)) (cdr v.230$768$1360))) v.231$769$1362)) (car v.230$768$1360)) #f)) (cdr expr$531$938))))) ((lambda (v.215$753$1398) (if (pair? v.215$753$1398) ((lambda (v.216$754$1400) ((lambda (v$1401) ((lambda (v.217$755$1402) (if (pair? v.217$755$1402) ((lambda (v.218$756$1404) (if (pair? v.218$756$1404) ((lambda (v.219$757$1406) ((lambda (p$1407) ((lambda (v.220$758$1408) (if (null? v.220$758$1408) ((lambda (v.221$759$1410) (if (pair? v.221$759$1410) ((lambda (v.222$760$1412) ((lambda (g+s$1413) ((lambda (v.223$761$1414) (if (pair? v.223$761$1414) ((lambda (v.224$762$1416) ((lambda (sk$1417) ((lambda (v.225$763$1418) (if (pair? v.225$763$1418) ((lambda (v.226$764$1420) ((lambda (fk$1421) ((lambda (v.227$765$1422) (if (pair? v.227$765$1422) ((lambda (v.228$766$1424) ((lambda (i$1425) ((lambda (v.229$767$1426) (if (null? v.229$767$1426) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote and)) (cons-source (cons-source (rename$532$939 (quote pair?)) (cons-source v$1401 (quote ()) (quote (v))) (quote (pair? v))) (cons-source (cons-source (rename$532$939 (quote null?)) (cons-source (cons-source (rename$532$939 (quote cdr)) (cons-source v$1401 (quote ()) (quote (v))) (quote (cdr v))) (quote ()) (quote ((cdr v)))) (quote (null? (cdr v)))) (quote ()) (quote ((null? (cdr v))))) (quote ((pair? v) (null? (cdr v))))) (quote (and (pair? v) (null? (cdr v))))) (cons-source (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source (rename$532$939 (quote w)) (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1401 (quote ()) (quote (v))) (quote (car v))) (quote ()) (quote ((car v)))) (quote (w (car v)))) (quote ()) (quote ((w (car v))))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote w)) (cons-source p$1407 (cons-source (cons-source (cons-source (rename$532$939 (quote car)) (cons-source v$1401 (quote ()) (quote (v))) (quote (car v))) (cons-source (cons-source (rename$532$939 (quote set-car!)) (cons-source v$1401 (quote ()) (quote (v))) (quote (set-car! v))) (quote ()) (quote ((set-car! v)))) (quote ((car v) (set-car! v)))) (cons-source sk$1417 (cons-source fk$1421 (cons-source i$1425 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (((car v) (set-car! v)) sk fk i))) (quote (p ((car v) (set-car! v)) sk fk i))) (quote (w p ((car v) (set-car! v)) sk fk i))) (quote (match-one w p ((car v) (set-car! v)) sk fk i))) (quote ()) (quote ((match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (quote (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)))) (cons-source fk$1421 (quote ()) (quote (fk))) (quote ((let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote ((and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) (quote (if (and (pair? v) (null? (cdr v))) (let ((w (car v))) (match-one w p ((car v) (set-car! v)) sk fk i)) fk))) #f) #f)) (cdr v.227$765$1422))) v.228$766$1424)) (car v.227$765$1422)) #f)) (cdr v.225$763$1418))) v.226$764$1420)) (car v.225$763$1418)) #f)) (cdr v.223$761$1414))) v.224$762$1416)) (car v.223$761$1414)) #f)) (cdr v.221$759$1410))) v.222$760$1412)) (car v.221$759$1410)) #f)) (cdr v.217$755$1402)) #f)) (cdr v.218$756$1404))) v.219$757$1406)) (car v.218$756$1404)) #f)) (car v.217$755$1402)) #f)) (cdr v.215$753$1398))) v.216$754$1400)) (car v.215$753$1398)) #f)) (cdr expr$531$938))))) ((lambda (v.198$736$1428) (if (pair? v.198$736$1428) ((lambda (v.199$737$1430) ((lambda (v$1431) ((lambda (v.200$738$1432) (if (pair? v.200$738$1432) ((lambda (v.201$739$1434) (if (pair? v.201$739$1434) ((lambda (v.202$740$1436) ((lambda (p$1437) ((lambda (v.203$741$1438) (if (pair? v.203$741$1438) ((lambda (v.204$742$1440) (if (compare$533$940 v.204$742$1440 (rename$532$939 (quote ___))) ((lambda (v.205$743$1442) ((lambda (r$1443) ((lambda (v.206$744$1444) (if (pair? v.206$744$1444) ((lambda (v.207$745$1446) ((lambda (g+s$1447) ((lambda (v.208$746$1448) (if (pair? v.208$746$1448) ((lambda (v.209$747$1450) ((lambda (sk$1451) ((lambda (v.210$748$1452) (if (pair? v.210$748$1452) ((lambda (v.211$749$1454) ((lambda (fk$1455) ((lambda (v.212$750$1456) (if (pair? v.212$750$1456) ((lambda (v.213$751$1458) ((lambda (i$1459) ((lambda (v.214$752$1460) (if (null? v.214$752$1460) (cons (cons-source (rename$532$939 (quote match-extract-vars)) (cons-source p$1437 (cons-source (cons-source (rename$532$939 (quote match-gen-ellipsis)) (cons-source v$1431 (cons-source p$1437 (cons-source r$1443 (cons-source g+s$1447 (cons-source sk$1451 (cons-source fk$1455 (cons-source i$1459 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$1459 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()))) #f) #f)) (cdr v.212$750$1456))) v.213$751$1458)) (car v.212$750$1456)) #f)) (cdr v.210$748$1452))) v.211$749$1454)) (car v.210$748$1452)) #f)) (cdr v.208$746$1448))) v.209$747$1450)) (car v.208$746$1448)) #f)) (cdr v.206$744$1444))) v.207$745$1446)) (car v.206$744$1444)) #f)) (cdr v.200$738$1432))) v.205$743$1442)) (cdr v.203$741$1438)) #f)) (car v.203$741$1438)) #f)) (cdr v.201$739$1434))) v.202$740$1436)) (car v.201$739$1434)) #f)) (car v.200$738$1432)) #f)) (cdr v.198$736$1428))) v.199$737$1430)) (car v.198$736$1428)) #f)) (cdr expr$531$938))))) ((lambda (v.187$725$1462) (if (pair? v.187$725$1462) ((lambda (v.188$726$1464) ((lambda (v$1465) ((lambda (v.189$727$1466) (if (pair? v.189$727$1466) ((lambda (v.190$728$1468) (if (pair? v.190$728$1468) ((lambda (v.191$729$1470) (if (compare$533$940 v.191$729$1470 (rename$532$939 (quote =))) ((lambda (v.192$730$1472) (if (pair? v.192$730$1472) ((lambda (v.193$731$1474) ((lambda (proc$1475) ((lambda (v.194$732$1476) (if (pair? v.194$732$1476) ((lambda (v.195$733$1478) ((lambda (p$1479) ((lambda (v.196$734$1480) (if (null? v.196$734$1480) ((lambda (v.197$735$1482) ((lambda (x$1483) (cons (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source (rename$532$939 (quote w)) (cons-source (cons-source proc$1475 (cons-source v$1465 (quote ()) (quote (v))) (quote (proc v))) (quote ()) (quote ((proc v)))) (quote (w (proc v)))) (quote ()) (quote ((w (proc v))))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source (rename$532$939 (quote w)) (cons-source p$1479 x$1483 (quote (p . x))) (quote (w p . x))) (quote (match-one w p . x))) (quote ()) (quote ((match-one w p . x)))) (quote (((w (proc v))) (match-one w p . x)))) (quote (let ((w (proc v))) (match-one w p . x)))) #f)) v.197$735$1482)) (cdr v.189$727$1466)) #f)) (cdr v.194$732$1476))) v.195$733$1478)) (car v.194$732$1476)) #f)) (cdr v.192$730$1472))) v.193$731$1474)) (car v.192$730$1472)) #f)) (cdr v.190$728$1468)) #f)) (car v.190$728$1468)) #f)) (car v.189$727$1466)) #f)) (cdr v.187$725$1462))) v.188$726$1464)) (car v.187$725$1462)) #f)) (cdr expr$531$938))))) ((lambda (v.170$708$1484) (if (pair? v.170$708$1484) ((lambda (v.171$709$1486) ((lambda (v$1487) ((lambda (v.172$710$1488) (if (pair? v.172$710$1488) ((lambda (v.173$711$1490) (if (pair? v.173$711$1490) ((lambda (v.174$712$1492) (if (compare$533$940 v.174$712$1492 (rename$532$939 (quote ?))) ((lambda (v.175$713$1494) (if (pair? v.175$713$1494) ((lambda (v.176$714$1496) ((lambda (pred$1497) ((lambda (v.177$715$1498) ((lambda (p$1499) ((lambda (v.178$716$1500) (if (pair? v.178$716$1500) ((lambda (v.179$717$1502) ((lambda (g+s$1503) ((lambda (v.180$718$1504) (if (pair? v.180$718$1504) ((lambda (v.181$719$1506) ((lambda (sk$1507) ((lambda (v.182$720$1508) (if (pair? v.182$720$1508) ((lambda (v.183$721$1510) ((lambda (fk$1511) ((lambda (v.184$722$1512) (if (pair? v.184$722$1512) ((lambda (v.185$723$1514) ((lambda (i$1515) ((lambda (v.186$724$1516) (if (null? v.186$724$1516) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source pred$1497 (cons-source v$1487 (quote ()) (quote (v))) (quote (pred v))) (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source v$1487 (cons-source (cons-source (rename$532$939 (quote and)) p$1499 (quote (and . p))) (cons-source g+s$1503 (cons-source sk$1507 (cons-source fk$1511 (cons-source i$1515 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((and . p) g+s sk fk i))) (quote (v (and . p) g+s sk fk i))) (quote (match-one v (and . p) g+s sk fk i))) (cons-source fk$1511 (quote ()) (quote (fk))) (quote ((match-one v (and . p) g+s sk fk i) fk))) (quote ((pred v) (match-one v (and . p) g+s sk fk i) fk))) (quote (if (pred v) (match-one v (and . p) g+s sk fk i) fk))) #f) #f)) (cdr v.184$722$1512))) v.185$723$1514)) (car v.184$722$1512)) #f)) (cdr v.182$720$1508))) v.183$721$1510)) (car v.182$720$1508)) #f)) (cdr v.180$718$1504))) v.181$719$1506)) (car v.180$718$1504)) #f)) (cdr v.178$716$1500))) v.179$717$1502)) (car v.178$716$1500)) #f)) (cdr v.172$710$1488))) v.177$715$1498)) (cdr v.175$713$1494))) v.176$714$1496)) (car v.175$713$1494)) #f)) (cdr v.173$711$1490)) #f)) (car v.173$711$1490)) #f)) (car v.172$710$1488)) #f)) (cdr v.170$708$1484))) v.171$709$1486)) (car v.170$708$1484)) #f)) (cdr expr$531$938))))) ((lambda (v.149$687$1518) (if (pair? v.149$687$1518) ((lambda (v.150$688$1520) ((lambda (v$1521) ((lambda (v.151$689$1522) (if (pair? v.151$689$1522) ((lambda (v.152$690$1524) (if (pair? v.152$690$1524) ((lambda (v.153$691$1526) (if (compare$533$940 v.153$691$1526 (rename$532$939 (quote set!))) ((lambda (v.154$692$1528) (if (pair? v.154$692$1528) ((lambda (v.155$693$1530) ((lambda (setter$1531) ((lambda (v.156$694$1532) (if (null? v.156$694$1532) ((lambda (v.157$695$1534) (if (pair? v.157$695$1534) ((lambda (v.158$696$1536) (if (pair? v.158$696$1536) ((lambda (v.159$697$1538) ((lambda (g$1539) ((lambda (v.160$698$1540) (if (pair? v.160$698$1540) ((lambda (v.161$699$1542) (if (list? v.161$699$1542) ((lambda (s$1544) ((lambda (v.162$700$1545) (if (null? v.162$700$1545) ((lambda (v.163$701$1547) (if (pair? v.163$701$1547) ((lambda (v.164$702$1549) (if (list? v.164$702$1549) ((lambda (sk$1551) ((lambda (v.165$703$1552) (if (pair? v.165$703$1552) ((lambda (v.166$704$1554) ((lambda (fk$1555) ((lambda (v.167$705$1556) (if (pair? v.167$705$1556) ((lambda (v.168$706$1558) ((lambda (i$1559) ((lambda (v.169$707$1560) (if (null? v.169$707$1560) (cons (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source setter$1531 (cons-source (cons-source (rename$532$939 (quote lambda)) (cons-source (cons-source (rename$532$939 (quote x)) (quote ()) (quote (x))) (cons-source (append (map (lambda (s$1562) s$1562) s$1544) (cons-source (rename$532$939 (quote x)) (quote ()) (quote (x)))) (quote ()) (quote ((s ... x)))) (quote ((x) (s ... x)))) (quote (lambda (x) (s ... x)))) (quote ()) (quote ((lambda (x) (s ... x))))) (quote (setter (lambda (x) (s ... x))))) (quote ()) (quote ((setter (lambda (x) (s ... x)))))) (cons-source (append (map (lambda (sk$1563) sk$1563) sk$1551) (cons-source i$1559 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((setter (lambda (x) (s ... x)))) (sk ... i)))) (quote (let ((setter (lambda (x) (s ... x)))) (sk ... i)))) #f) #f)) (cdr v.167$705$1556))) v.168$706$1558)) (car v.167$705$1556)) #f)) (cdr v.165$703$1552))) v.166$704$1554)) (car v.165$703$1552)) #f)) (cdr v.163$701$1547))) v.164$702$1549) #f)) (car v.163$701$1547)) #f)) (cdr v.157$695$1534)) #f)) (cdr v.160$698$1540))) v.161$699$1542) #f)) (car v.160$698$1540)) #f)) (cdr v.158$696$1536))) v.159$697$1538)) (car v.158$696$1536)) #f)) (car v.157$695$1534)) #f)) (cdr v.151$689$1522)) #f)) (cdr v.154$692$1528))) v.155$693$1530)) (car v.154$692$1528)) #f)) (cdr v.152$690$1524)) #f)) (car v.152$690$1524)) #f)) (car v.151$689$1522)) #f)) (cdr v.149$687$1518))) v.150$688$1520)) (car v.149$687$1518)) #f)) (cdr expr$531$938))))) ((lambda (v.128$666$1564) (if (pair? v.128$666$1564) ((lambda (v.129$667$1566) ((lambda (v$1567) ((lambda (v.130$668$1568) (if (pair? v.130$668$1568) ((lambda (v.131$669$1570) (if (pair? v.131$669$1570) ((lambda (v.132$670$1572) (if (compare$533$940 v.132$670$1572 (rename$532$939 (quote get!))) ((lambda (v.133$671$1574) (if (pair? v.133$671$1574) ((lambda (v.134$672$1576) ((lambda (getter$1577) ((lambda (v.135$673$1578) (if (null? v.135$673$1578) ((lambda (v.136$674$1580) (if (pair? v.136$674$1580) ((lambda (v.137$675$1582) (if (pair? v.137$675$1582) ((lambda (v.138$676$1584) ((lambda (g$1585) ((lambda (v.139$677$1586) (if (pair? v.139$677$1586) ((lambda (v.140$678$1588) ((lambda (s$1589) ((lambda (v.141$679$1590) (if (null? v.141$679$1590) ((lambda (v.142$680$1592) (if (pair? v.142$680$1592) ((lambda (v.143$681$1594) (if (list? v.143$681$1594) ((lambda (sk$1596) ((lambda (v.144$682$1597) (if (pair? v.144$682$1597) ((lambda (v.145$683$1599) ((lambda (fk$1600) ((lambda (v.146$684$1601) (if (pair? v.146$684$1601) ((lambda (v.147$685$1603) ((lambda (i$1604) ((lambda (v.148$686$1605) (if (null? v.148$686$1605) (cons (cons-source (rename$532$939 (quote let)) (cons-source (cons-source (cons-source getter$1577 (cons-source (cons-source (rename$532$939 (quote lambda)) (cons-source (quote ()) (cons-source g$1585 (quote ()) (quote (g))) (quote (() g))) (quote (lambda () g))) (quote ()) (quote ((lambda () g)))) (quote (getter (lambda () g)))) (quote ()) (quote ((getter (lambda () g))))) (cons-source (append (map (lambda (sk$1607) sk$1607) sk$1596) (cons-source i$1604 (quote ()) (quote (i)))) (quote ()) (quote ((sk ... i)))) (quote (((getter (lambda () g))) (sk ... i)))) (quote (let ((getter (lambda () g))) (sk ... i)))) #f) #f)) (cdr v.146$684$1601))) v.147$685$1603)) (car v.146$684$1601)) #f)) (cdr v.144$682$1597))) v.145$683$1599)) (car v.144$682$1597)) #f)) (cdr v.142$680$1592))) v.143$681$1594) #f)) (car v.142$680$1592)) #f)) (cdr v.136$674$1580)) #f)) (cdr v.139$677$1586))) v.140$678$1588)) (car v.139$677$1586)) #f)) (cdr v.137$675$1582))) v.138$676$1584)) (car v.137$675$1582)) #f)) (car v.136$674$1580)) #f)) (cdr v.130$668$1568)) #f)) (cdr v.133$671$1574))) v.134$672$1576)) (car v.133$671$1574)) #f)) (cdr v.131$669$1570)) #f)) (car v.131$669$1570)) #f)) (car v.130$668$1568)) #f)) (cdr v.128$666$1564))) v.129$667$1566)) (car v.128$666$1564)) #f)) (cdr expr$531$938))))) ((lambda (v.111$649$1608) (if (pair? v.111$649$1608) ((lambda (v.112$650$1610) ((lambda (v$1611) ((lambda (v.113$651$1612) (if (pair? v.113$651$1612) ((lambda (v.114$652$1614) (if (pair? v.114$652$1614) ((lambda (v.115$653$1616) (if (compare$533$940 v.115$653$1616 (rename$532$939 (quote not))) ((lambda (v.116$654$1618) (if (pair? v.116$654$1618) ((lambda (v.117$655$1620) ((lambda (p$1621) ((lambda (v.118$656$1622) (if (null? v.118$656$1622) ((lambda (v.119$657$1624) (if (pair? v.119$657$1624) ((lambda (v.120$658$1626) ((lambda (g+s$1627) ((lambda (v.121$659$1628) (if (pair? v.121$659$1628) ((lambda (v.122$660$1630) (if (list? v.122$660$1630) ((lambda (sk$1632) ((lambda (v.123$661$1633) (if (pair? v.123$661$1633) ((lambda (v.124$662$1635) ((lambda (fk$1636) ((lambda (v.125$663$1637) (if (pair? v.125$663$1637) ((lambda (v.126$664$1639) ((lambda (i$1640) ((lambda (v.127$665$1641) (if (null? v.127$665$1641) (cons (cons-source (rename$532$939 (quote match-one)) (cons-source v$1611 (cons-source p$1621 (cons-source g+s$1627 (cons-source (cons-source (rename$532$939 (quote match-drop-ids)) (cons-source fk$1636 (quote ()) (quote (fk))) (quote (match-drop-ids fk))) (cons-source (append (map (lambda (sk$1643) sk$1643) sk$1632) (cons-source i$1640 (quote ()) (quote (i)))) (cons-source i$1640 (quote ()) (quote (i))) (quote ((sk ... i) i))) (quote ((match-drop-ids fk) (sk ... i) i))) (quote (g+s (match-drop-ids fk) (sk ... i) i))) (quote (p g+s (match-drop-ids fk) (sk ... i) i))) (quote (v p g+s (match-drop-ids fk) (sk ... i) i))) (quote (match-one v p g+s (match-drop-ids fk) (sk ... i) i))) #f) #f)) (cdr v.125$663$1637))) v.126$664$1639)) (car v.125$663$1637)) #f)) (cdr v.123$661$1633))) v.124$662$1635)) (car v.123$661$1633)) #f)) (cdr v.121$659$1628))) v.122$660$1630) #f)) (car v.121$659$1628)) #f)) (cdr v.119$657$1624))) v.120$658$1626)) (car v.119$657$1624)) #f)) (cdr v.113$651$1612)) #f)) (cdr v.116$654$1618))) v.117$655$1620)) (car v.116$654$1618)) #f)) (cdr v.114$652$1614)) #f)) (car v.114$652$1614)) #f)) (car v.113$651$1612)) #f)) (cdr v.111$649$1608))) v.112$650$1610)) (car v.111$649$1608)) #f)) (cdr expr$531$938))))) ((lambda (v.96$634$1644) (if (pair? v.96$634$1644) ((lambda (v.97$635$1646) ((lambda (v$1647) ((lambda (v.98$636$1648) (if (pair? v.98$636$1648) ((lambda (v.99$637$1650) (if (pair? v.99$637$1650) ((lambda (v.100$638$1652) (if (compare$533$940 v.100$638$1652 (rename$532$939 (quote or))) ((lambda (v.101$639$1654) (if (list? v.101$639$1654) ((lambda (p$1656) ((lambda (v.102$640$1657) (if (pair? v.102$640$1657) ((lambda (v.103$641$1659) ((lambda (g+s$1660) ((lambda (v.104$642$1661) (if (pair? v.104$642$1661) ((lambda (v.105$643$1663) ((lambda (sk$1664) ((lambda (v.106$644$1665) (if (pair? v.106$644$1665) ((lambda (v.107$645$1667) ((lambda (fk$1668) ((lambda (v.108$646$1669) (if (pair? v.108$646$1669) ((lambda (v.109$647$1671) ((lambda (i$1672) ((lambda (v.110$648$1673) (if (null? v.110$648$1673) (cons (cons-source (rename$532$939 (quote match-extract-vars)) (cons-source (cons-source (rename$532$939 (quote or)) p$1656 (quote (or p ...))) (cons-source (cons-source (rename$532$939 (quote match-gen-or)) (cons-source v$1647 (cons-source p$1656 (cons-source g+s$1660 (cons-source sk$1664 (cons-source fk$1668 (cons-source i$1672 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p ...) g+s sk fk i))) (quote (v (p ...) g+s sk fk i))) (quote (match-gen-or v (p ...) g+s sk fk i))) (cons-source i$1672 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-or v (p ...) g+s sk fk i) i ()))) (quote ((or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) (quote (match-extract-vars (or p ...) (match-gen-or v (p ...) g+s sk fk i) i ()))) #f) #f)) (cdr v.108$646$1669))) v.109$647$1671)) (car v.108$646$1669)) #f)) (cdr v.106$644$1665))) v.107$645$1667)) (car v.106$644$1665)) #f)) (cdr v.104$642$1661))) v.105$643$1663)) (car v.104$642$1661)) #f)) (cdr v.102$640$1657))) v.103$641$1659)) (car v.102$640$1657)) #f)) (cdr v.98$636$1648))) v.101$639$1654) #f)) (cdr v.99$637$1650)) #f)) (car v.99$637$1650)) #f)) (car v.98$636$1648)) #f)) (cdr v.96$634$1644))) v.97$635$1646)) (car v.96$634$1644)) #f)) (cdr expr$531$938))))) ((lambda (v.87$625$1675) (if (pair? v.87$625$1675) ((lambda (v.88$626$1677) ((lambda (v$1678) ((lambda (v.89$627$1679) (if (pair? v.89$627$1679) ((lambda (v.90$628$1681) (if (pair? v.90$628$1681) ((lambda (v.91$629$1683) (if (compare$533$940 v.91$629$1683 (rename$532$939 (quote or))) ((lambda (v.92$630$1685) (if (pair? v.92$630$1685) ((lambda (v.93$631$1687) ((lambda (p$1688) ((lambda (v.94$632$1689) (if (null? v.94$632$1689) ((lambda (v.95$633$1691) ((lambda (x$1692) (cons (cons-source (rename$532$939 (quote match-one)) (cons-source v$1678 (cons-source p$1688 x$1692 (quote (p . x))) (quote (v p . x))) (quote (match-one v p . x))) #f)) v.95$633$1691)) (cdr v.89$627$1679)) #f)) (cdr v.92$630$1685))) v.93$631$1687)) (car v.92$630$1685)) #f)) (cdr v.90$628$1681)) #f)) (car v.90$628$1681)) #f)) (car v.89$627$1679)) #f)) (cdr v.87$625$1675))) v.88$626$1677)) (car v.87$625$1675)) #f)) (cdr expr$531$938))))) ((lambda (v.72$610$1693) (if (pair? v.72$610$1693) ((lambda (v.73$611$1695) ((lambda (v$1696) ((lambda (v.74$612$1697) (if (pair? v.74$612$1697) ((lambda (v.75$613$1699) (if (pair? v.75$613$1699) ((lambda (v.76$614$1701) (if (compare$533$940 v.76$614$1701 (rename$532$939 (quote or))) ((lambda (v.77$615$1703) (if (null? v.77$615$1703) ((lambda (v.78$616$1705) (if (pair? v.78$616$1705) ((lambda (v.79$617$1707) ((lambda (g+s$1708) ((lambda (v.80$618$1709) (if (pair? v.80$618$1709) ((lambda (v.81$619$1711) ((lambda (sk$1712) ((lambda (v.82$620$1713) (if (pair? v.82$620$1713) ((lambda (v.83$621$1715) ((lambda (fk$1716) ((lambda (v.84$622$1717) (if (pair? v.84$622$1717) ((lambda (v.85$623$1719) ((lambda (i$1720) ((lambda (v.86$624$1721) (if (null? v.86$624$1721) (cons fk$1716 #f) #f)) (cdr v.84$622$1717))) v.85$623$1719)) (car v.84$622$1717)) #f)) (cdr v.82$620$1713))) v.83$621$1715)) (car v.82$620$1713)) #f)) (cdr v.80$618$1709))) v.81$619$1711)) (car v.80$618$1709)) #f)) (cdr v.78$616$1705))) v.79$617$1707)) (car v.78$616$1705)) #f)) (cdr v.74$612$1697)) #f)) (cdr v.75$613$1699)) #f)) (car v.75$613$1699)) #f)) (car v.74$612$1697)) #f)) (cdr v.72$610$1693))) v.73$611$1695)) (car v.72$610$1693)) #f)) (cdr expr$531$938))))) ((lambda (v.55$593$1723) (if (pair? v.55$593$1723) ((lambda (v.56$594$1725) ((lambda (v$1726) ((lambda (v.57$595$1727) (if (pair? v.57$595$1727) ((lambda (v.58$596$1729) (if (pair? v.58$596$1729) ((lambda (v.59$597$1731) (if (compare$533$940 v.59$597$1731 (rename$532$939 (quote and))) ((lambda (v.60$598$1733) (if (pair? v.60$598$1733) ((lambda (v.61$599$1735) ((lambda (p$1736) ((lambda (v.62$600$1737) (if (list? v.62$600$1737) ((lambda (q$1739) ((lambda (v.63$601$1740) (if (pair? v.63$601$1740) ((lambda (v.64$602$1742) ((lambda (g+s$1743) ((lambda (v.65$603$1744) (if (pair? v.65$603$1744) ((lambda (v.66$604$1746) ((lambda (sk$1747) ((lambda (v.67$605$1748) (if (pair? v.67$605$1748) ((lambda (v.68$606$1750) ((lambda (fk$1751) ((lambda (v.69$607$1752) (if (pair? v.69$607$1752) ((lambda (v.70$608$1754) ((lambda (i$1755) ((lambda (v.71$609$1756) (if (null? v.71$609$1756) (cons (cons-source (rename$532$939 (quote match-one)) (cons-source v$1726 (cons-source p$1736 (cons-source g+s$1743 (cons-source (cons-source (rename$532$939 (quote match-one)) (cons-source v$1726 (cons-source (cons-source (rename$532$939 (quote and)) q$1739 (quote (and q ...))) (cons-source g+s$1743 (cons-source sk$1747 (cons-source fk$1751 (quote ()) (quote (fk))) (quote (sk fk))) (quote (g+s sk fk))) (quote ((and q ...) g+s sk fk))) (quote (v (and q ...) g+s sk fk))) (quote (match-one v (and q ...) g+s sk fk))) (cons-source fk$1751 (cons-source i$1755 (quote ()) (quote (i))) (quote (fk i))) (quote ((match-one v (and q ...) g+s sk fk) fk i))) (quote (g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (v p g+s (match-one v (and q ...) g+s sk fk) fk i))) (quote (match-one v p g+s (match-one v (and q ...) g+s sk fk) fk i))) #f) #f)) (cdr v.69$607$1752))) v.70$608$1754)) (car v.69$607$1752)) #f)) (cdr v.67$605$1748))) v.68$606$1750)) (car v.67$605$1748)) #f)) (cdr v.65$603$1744))) v.66$604$1746)) (car v.65$603$1744)) #f)) (cdr v.63$601$1740))) v.64$602$1742)) (car v.63$601$1740)) #f)) (cdr v.57$595$1727))) v.62$600$1737) #f)) (cdr v.60$598$1733))) v.61$599$1735)) (car v.60$598$1733)) #f)) (cdr v.58$596$1729)) #f)) (car v.58$596$1729)) #f)) (car v.57$595$1727)) #f)) (cdr v.55$593$1723))) v.56$594$1725)) (car v.55$593$1723)) #f)) (cdr expr$531$938))))) ((lambda (v.40$578$1758) (if (pair? v.40$578$1758) ((lambda (v.41$579$1760) ((lambda (v$1761) ((lambda (v.42$580$1762) (if (pair? v.42$580$1762) ((lambda (v.43$581$1764) (if (pair? v.43$581$1764) ((lambda (v.44$582$1766) (if (compare$533$940 v.44$582$1766 (rename$532$939 (quote and))) ((lambda (v.45$583$1768) (if (null? v.45$583$1768) ((lambda (v.46$584$1770) (if (pair? v.46$584$1770) ((lambda (v.47$585$1772) ((lambda (g+s$1773) ((lambda (v.48$586$1774) (if (pair? v.48$586$1774) ((lambda (v.49$587$1776) (if (list? v.49$587$1776) ((lambda (sk$1778) ((lambda (v.50$588$1779) (if (pair? v.50$588$1779) ((lambda (v.51$589$1781) ((lambda (fk$1782) ((lambda (v.52$590$1783) (if (pair? v.52$590$1783) ((lambda (v.53$591$1785) ((lambda (i$1786) ((lambda (v.54$592$1787) (if (null? v.54$592$1787) (cons (append (map (lambda (sk$1789) sk$1789) sk$1778) (cons-source i$1786 (quote ()) (quote (i)))) #f) #f)) (cdr v.52$590$1783))) v.53$591$1785)) (car v.52$590$1783)) #f)) (cdr v.50$588$1779))) v.51$589$1781)) (car v.50$588$1779)) #f)) (cdr v.48$586$1774))) v.49$587$1776) #f)) (car v.48$586$1774)) #f)) (cdr v.46$584$1770))) v.47$585$1772)) (car v.46$584$1770)) #f)) (cdr v.42$580$1762)) #f)) (cdr v.43$581$1764)) #f)) (car v.43$581$1764)) #f)) (car v.42$580$1762)) #f)) (cdr v.40$578$1758))) v.41$579$1760)) (car v.40$578$1758)) #f)) (cdr expr$531$938))))) ((lambda (v.31$569$1790) (if (pair? v.31$569$1790) ((lambda (v.32$570$1792) ((lambda (v$1793) ((lambda (v.33$571$1794) (if (pair? v.33$571$1794) ((lambda (v.34$572$1796) (if (pair? v.34$572$1796) ((lambda (v.35$573$1798) (if (compare$533$940 v.35$573$1798 (rename$532$939 (quote quasiquote))) ((lambda (v.36$574$1800) (if (pair? v.36$574$1800) ((lambda (v.37$575$1802) ((lambda (p$1803) ((lambda (v.38$576$1804) (if (null? v.38$576$1804) ((lambda (v.39$577$1806) ((lambda (x$1807) (cons (cons-source (rename$532$939 (quote match-quasiquote)) (cons-source v$1793 (cons-source p$1803 x$1807 (quote (p . x))) (quote (v p . x))) (quote (match-quasiquote v p . x))) #f)) v.39$577$1806)) (cdr v.33$571$1794)) #f)) (cdr v.36$574$1800))) v.37$575$1802)) (car v.36$574$1800)) #f)) (cdr v.34$572$1796)) #f)) (car v.34$572$1796)) #f)) (car v.33$571$1794)) #f)) (cdr v.31$569$1790))) v.32$570$1792)) (car v.31$569$1790)) #f)) (cdr expr$531$938))))) ((lambda (v.14$552$1808) (if (pair? v.14$552$1808) ((lambda (v.15$553$1810) ((lambda (v$1811) ((lambda (v.16$554$1812) (if (pair? v.16$554$1812) ((lambda (v.17$555$1814) (if (pair? v.17$555$1814) ((lambda (v.18$556$1816) (if (compare$533$940 v.18$556$1816 (rename$532$939 (quote quote))) ((lambda (v.19$557$1818) (if (pair? v.19$557$1818) ((lambda (v.20$558$1820) ((lambda (p$1821) ((lambda (v.21$559$1822) (if (null? v.21$559$1822) ((lambda (v.22$560$1824) (if (pair? v.22$560$1824) ((lambda (v.23$561$1826) ((lambda (g+s$1827) ((lambda (v.24$562$1828) (if (pair? v.24$562$1828) ((lambda (v.25$563$1830) (if (list? v.25$563$1830) ((lambda (sk$1832) ((lambda (v.26$564$1833) (if (pair? v.26$564$1833) ((lambda (v.27$565$1835) ((lambda (fk$1836) ((lambda (v.28$566$1837) (if (pair? v.28$566$1837) ((lambda (v.29$567$1839) ((lambda (i$1840) ((lambda (v.30$568$1841) (if (null? v.30$568$1841) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote equal?)) (cons-source v$1811 (cons-source (cons-source (rename$532$939 (quote quote)) (cons-source p$1821 (quote ()) (quote (p))) (quote (quote p))) (quote ()) (quote ((quote p)))) (quote (v (quote p)))) (quote (equal? v (quote p)))) (cons-source (append (map (lambda (sk$1843) sk$1843) sk$1832) (cons-source i$1840 (quote ()) (quote (i)))) (cons-source fk$1836 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((equal? v (quote p)) (sk ... i) fk))) (quote (if (equal? v (quote p)) (sk ... i) fk))) #f) #f)) (cdr v.28$566$1837))) v.29$567$1839)) (car v.28$566$1837)) #f)) (cdr v.26$564$1833))) v.27$565$1835)) (car v.26$564$1833)) #f)) (cdr v.24$562$1828))) v.25$563$1830) #f)) (car v.24$562$1828)) #f)) (cdr v.22$560$1824))) v.23$561$1826)) (car v.22$560$1824)) #f)) (cdr v.16$554$1812)) #f)) (cdr v.19$557$1818))) v.20$558$1820)) (car v.19$557$1818)) #f)) (cdr v.17$555$1814)) #f)) (car v.17$555$1814)) #f)) (car v.16$554$1812)) #f)) (cdr v.14$552$1808))) v.15$553$1810)) (car v.14$552$1808)) #f)) (cdr expr$531$938))))) ((lambda (v.1$539$1844) (if (pair? v.1$539$1844) ((lambda (v.2$540$1846) ((lambda (v$1847) ((lambda (v.3$541$1848) (if (pair? v.3$541$1848) ((lambda (v.4$542$1850) (if (null? v.4$542$1850) ((lambda (v.5$543$1852) (if (pair? v.5$543$1852) ((lambda (v.6$544$1854) ((lambda (g+s$1855) ((lambda (v.7$545$1856) (if (pair? v.7$545$1856) ((lambda (v.8$546$1858) (if (list? v.8$546$1858) ((lambda (sk$1860) ((lambda (v.9$547$1861) (if (pair? v.9$547$1861) ((lambda (v.10$548$1863) ((lambda (fk$1864) ((lambda (v.11$549$1865) (if (pair? v.11$549$1865) ((lambda (v.12$550$1867) ((lambda (i$1868) ((lambda (v.13$551$1869) (if (null? v.13$551$1869) (cons (cons-source (rename$532$939 (quote if)) (cons-source (cons-source (rename$532$939 (quote null?)) (cons-source v$1847 (quote ()) (quote (v))) (quote (null? v))) (cons-source (append (map (lambda (sk$1871) sk$1871) sk$1860) (cons-source i$1868 (quote ()) (quote (i)))) (cons-source fk$1864 (quote ()) (quote (fk))) (quote ((sk ... i) fk))) (quote ((null? v) (sk ... i) fk))) (quote (if (null? v) (sk ... i) fk))) #f) #f)) (cdr v.11$549$1865))) v.12$550$1867)) (car v.11$549$1865)) #f)) (cdr v.9$547$1861))) v.10$548$1863)) (car v.9$547$1861)) #f)) (cdr v.7$545$1856))) v.8$546$1858) #f)) (car v.7$545$1856)) #f)) (cdr v.5$543$1852))) v.6$544$1854)) (car v.5$543$1852)) #f)) (cdr v.3$541$1848)) #f)) (car v.3$541$1848)) #f)) (cdr v.1$539$1844))) v.2$540$1846)) (car v.1$539$1844)) #f)) (cdr expr$531$938))))) (match-one lambda (expr$422$448 rename$423$449 compare$424$450) (car ((lambda (tmp$452$454) (if tmp$452$454 tmp$452$454 ((lambda (tmp$456$458) (if tmp$456$458 tmp$456$458 (cons (error/loc "no expansion for" expr$422$448) #f))) ((lambda (v.18$447$459) ((lambda (x$460) (cons (cons-source (rename$423$449 (quote match-two)) x$460 (quote (match-two . x))) #f)) v.18$447$459)) (cdr expr$422$448))))) ((lambda (v.1$430$461) (if (pair? v.1$430$461) ((lambda (v.2$431$463) ((lambda (v$464) ((lambda (v.3$432$465) (if (pair? v.3$432$465) ((lambda (v.4$433$467) (if (pair? v.4$433$467) ((lambda (v.5$434$469) ((lambda (p$470) ((lambda (v.6$435$471) (if (pair? v.6$435$471) ((lambda (v.7$436$473) ((lambda (q$474) ((lambda (v.8$437$475) ((lambda (r$476) ((lambda (v.9$438$477) (if (pair? v.9$438$477) ((lambda (v.10$439$479) ((lambda (g+s$480) ((lambda (v.11$440$481) (if (pair? v.11$440$481) ((lambda (v.12$441$483) ((lambda (sk$484) ((lambda (v.13$442$485) (if (pair? v.13$442$485) ((lambda (v.14$443$487) ((lambda (fk$488) ((lambda (v.15$444$489) (if (pair? v.15$444$489) ((lambda (v.16$445$491) ((lambda (i$492) ((lambda (v.17$446$493) (if (null? v.17$446$493) (cons (cons-source (rename$423$449 (quote match-check-ellipsis)) (cons-source q$474 (cons-source (cons-source (rename$423$449 (quote match-extract-vars)) (cons-source p$470 (cons-source (cons-source (rename$423$449 (quote match-gen-ellipsis)) (cons-source v$464 (cons-source p$470 (cons-source r$476 (cons-source g+s$480 (cons-source sk$484 (cons-source fk$488 (cons-source i$492 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote (r g+s sk fk i))) (quote (p r g+s sk fk i))) (quote (v p r g+s sk fk i))) (quote (match-gen-ellipsis v p r g+s sk fk i))) (cons-source i$492 (cons-source (quote ()) (quote ()) (quote (()))) (quote (i ()))) (quote ((match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (quote (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()))) (cons-source (cons-source (rename$423$449 (quote match-two)) (cons-source v$464 (cons-source (cons-source p$470 (cons-source q$474 r$476 (quote (q . r))) (quote (p q . r))) (cons-source g+s$480 (cons-source sk$484 (cons-source fk$488 (cons-source i$492 (quote ()) (quote (i))) (quote (fk i))) (quote (sk fk i))) (quote (g+s sk fk i))) (quote ((p q . r) g+s sk fk i))) (quote (v (p q . r) g+s sk fk i))) (quote (match-two v (p q . r) g+s sk fk i))) (quote ()) (quote ((match-two v (p q . r) g+s sk fk i)))) (quote ((match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-two v (p q . r) g+s sk fk i)))) (quote (q (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-two v (p q . r) g+s sk fk i)))) (quote (match-check-ellipsis q (match-extract-vars p (match-gen-ellipsis v p r g+s sk fk i) i ()) (match-two v (p q . r) g+s sk fk i)))) #f) #f)) (cdr v.15$444$489))) v.16$445$491)) (car v.15$444$489)) #f)) (cdr v.13$442$485))) v.14$443$487)) (car v.13$442$485)) #f)) (cdr v.11$440$481))) v.12$441$483)) (car v.11$440$481)) #f)) (cdr v.9$438$477))) v.10$439$479)) (car v.9$438$477)) #f)) (cdr v.3$432$465))) v.8$437$475)) (cdr v.6$435$471))) v.7$436$473)) (car v.6$435$471)) #f)) (cdr v.4$433$467))) v.5$434$469)) (car v.4$433$467)) #f)) (car v.3$432$465)) #f)) (cdr v.1$430$461))) v.2$431$463)) (car v.1$430$461)) #f)) (cdr expr$422$448))))) (match-next lambda (expr$260$297 rename$261$298 compare$262$299) (car ((lambda (tmp$301$303) (if tmp$301$303 tmp$301$303 ((lambda (tmp$305$307) (if tmp$305$307 tmp$305$307 ((lambda (tmp$309$311) (if tmp$309$311 tmp$309$311 (cons (error/loc "no expansion for" expr$260$297) #f))) ((lambda (v.21$288$312) (if (pair? v.21$288$312) ((lambda (v.22$289$314) ((lambda (v$315) ((lambda (v.23$290$316) (if (pair? v.23$290$316) ((lambda (v.24$291$318) ((lambda (g+s$319) ((lambda (v.25$292$320) (if (pair? v.25$292$320) ((lambda (v.26$293$322) (if (pair? v.26$293$322) ((lambda (v.27$294$324) ((lambda (pat$325) ((lambda (v.28$295$326) ((lambda (body$327) ((lambda (v.29$296$328) ((lambda (rest$329) (cons (cons-source (rename$261$298 (quote match-next)) (cons-source v$315 (cons-source g+s$319 (cons-source (cons-source pat$325 (cons-source (cons-source (rename$261$298 (quote =>)) (cons-source (rename$261$298 (quote failure)) (quote ()) (quote (failure))) (quote (=> failure))) body$327 (quote ((=> failure) . body))) (quote (pat (=> failure) . body))) rest$329 (quote ((pat (=> failure) . body) . rest))) (quote (g+s (pat (=> failure) . body) . rest))) (quote (v g+s (pat (=> failure) . body) . rest))) (quote (match-next v g+s (pat (=> failure) . body) . rest))) #f)) v.29$296$328)) (cdr v.25$292$320))) v.28$295$326)) (cdr v.26$293$322))) v.27$294$324)) (car v.26$293$322)) #f)) (car v.25$292$320)) #f)) (cdr v.23$290$316))) v.24$291$318)) (car v.23$290$316)) #f)) (cdr v.21$288$312))) v.22$289$314)) (car v.21$288$312)) #f)) (cdr expr$260$297))))) ((lambda (v.6$273$330) (if (pair? v.6$273$330) ((lambda (v.7$274$332) ((lambda (v$333) ((lambda (v.8$275$334) (if (pair? v.8$275$334) ((lambda (v.9$276$336) ((lambda (g+s$337) ((lambda (v.10$277$338) (if (pair? v.10$277$338) ((lambda (v.11$278$340) (if (pair? v.11$278$340) ((lambda (v.12$279$342) ((lambda (pat$343) ((lambda (v.13$280$344) (if (pair? v.13$280$344) ((lambda (v.14$281$346) (if (pair? v.14$281$346) ((lambda (v.15$282$348) (if (compare$262$299 v.15$282$348 (rename$261$298 (quote =>))) ((lambda (v.16$283$350) (if (pair? v.16$283$350) ((lambda (v.17$284$352) ((lambda (failure$353) ((lambda (v.18$285$354) (if (null? v.18$285$354) ((lambda (v.19$286$356) ((lambda (body$357) ((lambda (v.20$287$358) ((lambda (rest$359) (cons (cons-source (rename$261$298 (quote let)) (cons-source (cons-source (cons-source failure$353 (cons-source (cons-source (rename$261$298 (quote lambda)) (cons-source (quote ()) (cons-source (cons-source (rename$261$298 (quote match-next)) (cons-source v$333 (cons-source g+s$337 rest$359 (quote (g+s . rest))) (quote (v g+s . rest))) (quote (match-next v g+s . rest))) (quote ()) (quote ((match-next v g+s . rest)))) (quote (() (match-next v g+s . rest)))) (quote (lambda () (match-next v g+s . rest)))) (quote ()) (quote ((lambda () (match-next v g+s . rest))))) (quote (failure (lambda () (match-next v g+s . rest))))) (quote ()) (quote ((failure (lambda () (match-next v g+s . rest)))))) (cons-source (cons-source (rename$261$298 (quote match-one)) (cons-source v$333 (cons-source pat$343 (cons-source g+s$337 (cons-source (cons-source (rename$261$298 (quote match-drop-ids)) (cons-source (cons-source (rename$261$298 (quote begin)) body$357 (quote (begin . body))) (quote ()) (quote ((begin . body)))) (quote (match-drop-ids (begin . body)))) (cons-source (cons-source failure$353 (quote ()) (quote (failure))) (cons-source (quote ()) (quote ()) (quote (()))) (quote ((failure) ()))) (quote ((match-drop-ids (begin . body)) (failure) ()))) (quote (g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ()))) (quote ()) (quote ((match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) (quote (let ((failure (lambda () (match-next v g+s . rest)))) (match-one v pat g+s (match-drop-ids (begin . body)) (failure) ())))) #f)) v.20$287$358)) (cdr v.10$277$338))) v.19$286$356)) (cdr v.13$280$344)) #f)) (cdr v.16$283$350))) v.17$284$352)) (car v.16$283$350)) #f)) (cdr v.14$281$346)) #f)) (car v.14$281$346)) #f)) (car v.13$280$344)) #f)) (cdr v.11$278$340))) v.12$279$342)) (car v.11$278$340)) #f)) (car v.10$277$338)) #f)) (cdr v.8$275$334))) v.9$276$336)) (car v.8$275$334)) #f)) (cdr v.6$273$330))) v.7$274$332)) (car v.6$273$330)) #f)) (cdr expr$260$297))))) ((lambda (v.1$268$360) (if (pair? v.1$268$360) ((lambda (v.2$269$362) ((lambda (v$363) ((lambda (v.3$270$364) (if (pair? v.3$270$364) ((lambda (v.4$271$366) ((lambda (g+s$367) ((lambda (v.5$272$368) (if (null? v.5$272$368) (cons (cons-source (rename$261$298 (quote error)) (cons-source (cons-source (rename$261$298 (quote quote)) (cons-source (rename$261$298 (quote match)) (quote ()) (quote (match))) (quote (quote match))) (cons-source "no matching pattern" (quote ()) (quote ("no matching pattern"))) (quote ((quote match) "no matching pattern"))) (quote (error (quote match) "no matching pattern"))) #f) #f)) (cdr v.3$270$364))) v.4$271$366)) (car v.3$270$364)) #f)) (cdr v.1$268$360))) v.2$269$362)) (car v.1$268$360)) #f)) (cdr expr$260$297))))) (match lambda (expr$32$75 rename$33$76 compare$34$77) (car ((lambda (tmp$79$81) (if tmp$79$81 tmp$79$81 ((lambda (tmp$83$85) (if tmp$83$85 tmp$83$85 ((lambda (tmp$87$89) (if tmp$87$89 tmp$87$89 ((lambda (tmp$91$93) (if tmp$91$93 tmp$91$93 ((lambda (tmp$95$97) (if tmp$95$97 tmp$95$97 (cons (error/loc "no expansion for" expr$32$75) #f))) ((lambda (v.26$65$98) (if (pair? v.26$65$98) ((lambda (v.27$66$100) ((lambda (atom$101) ((lambda (v.28$67$102) ((lambda (w.29$68$104 pat-ls31$70$105 body-ls32$71$106) ((lambda (lp.30$69$107) (set! lp.30$69$107 (lambda (w.29$68$108 pat-ls31$70$109 body-ls32$71$110) (if (null? w.29$68$108) ((lambda (pat$111 body$112) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source atom$101 (quote ()) (quote (atom))) (quote (v atom))) (quote ()) (quote ((v atom)))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source atom$101 (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source atom$101 (quote ()) (quote (atom))) (quote (set! atom))) (quote ()) (quote ((set! atom)))) (quote (atom (set! atom)))) (map (lambda (pat$113 body$114) (cons-source pat$113 body$114 (quote (pat . body)))) pat$111 body$112) (quote ((atom (set! atom)) (pat . body) ...))) (quote (v (atom (set! atom)) (pat . body) ...))) (quote (match-next v (atom (set! atom)) (pat . body) ...))) (quote ()) (quote ((match-next v (atom (set! atom)) (pat . body) ...)))) (quote (((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) (quote (let ((v atom)) (match-next v (atom (set! atom)) (pat . body) ...)))) #f)) (reverse pat-ls31$70$109) (reverse body-ls32$71$110)) (if (pair? w.29$68$108) ((lambda (v.33$72$116) (if (pair? v.33$72$116) ((lambda (v.34$73$118) ((lambda (pat$119) ((lambda (v.35$74$120) ((lambda (body$121) (lp.30$69$107 (cdr w.29$68$108) (cons pat$119 pat-ls31$70$109) (cons body$121 body-ls32$71$110))) v.35$74$120)) (cdr v.33$72$116))) v.34$73$118)) (car v.33$72$116)) #f)) (car w.29$68$108)) #f)))) (lp.30$69$107 w.29$68$104 pat-ls31$70$105 body-ls32$71$106)) #f)) v.28$67$102 (quote ()) (quote ()))) (cdr v.26$65$98))) v.27$66$100)) (car v.26$65$98)) #f)) (cdr expr$32$75))))) ((lambda (v.15$54$122) (if (pair? v.15$54$122) ((lambda (v.16$55$124) (if (vector? v.16$55$124) ((lambda (v.17$56$126) (if (list? v.17$56$126) ((lambda (vec$128) ((lambda (v.18$57$129) ((lambda (w.19$58$131 pat-ls21$60$132 body-ls22$61$133) ((lambda (lp.20$59$134) (set! lp.20$59$134 (lambda (w.19$58$135 pat-ls21$60$136 body-ls22$61$137) (if (null? w.19$58$135) ((lambda (pat$138 body$139) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source (list->vector vec$128) (quote ()) (quote (#(vec ...)))) (quote (v #(vec ...)))) (quote ()) (quote ((v #(vec ...))))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source (rename$33$76 (quote v)) (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source (rename$33$76 (quote v)) (quote ()) (quote (v))) (quote (set! v))) (quote ()) (quote ((set! v)))) (quote (v (set! v)))) (map (lambda (pat$140 body$141) (cons-source pat$140 body$141 (quote (pat . body)))) pat$138 body$139) (quote ((v (set! v)) (pat . body) ...))) (quote (v (v (set! v)) (pat . body) ...))) (quote (match-next v (v (set! v)) (pat . body) ...))) (quote ()) (quote ((match-next v (v (set! v)) (pat . body) ...)))) (quote (((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) (quote (let ((v #(vec ...))) (match-next v (v (set! v)) (pat . body) ...)))) #f)) (reverse pat-ls21$60$136) (reverse body-ls22$61$137)) (if (pair? w.19$58$135) ((lambda (v.23$62$143) (if (pair? v.23$62$143) ((lambda (v.24$63$145) ((lambda (pat$146) ((lambda (v.25$64$147) ((lambda (body$148) (lp.20$59$134 (cdr w.19$58$135) (cons pat$146 pat-ls21$60$136) (cons body$148 body-ls22$61$137))) v.25$64$147)) (cdr v.23$62$143))) v.24$63$145)) (car v.23$62$143)) #f)) (car w.19$58$135)) #f)))) (lp.20$59$134 w.19$58$131 pat-ls21$60$132 body-ls22$61$133)) #f)) v.18$57$129 (quote ()) (quote ()))) (cdr v.15$54$122))) v.17$56$126) #f)) (vector->list v.16$55$124)) #f)) (car v.15$54$122)) #f)) (cdr expr$32$75))))) ((lambda (v.5$44$149) (if (pair? v.5$44$149) ((lambda (v.6$45$151) (if (list? v.6$45$151) ((lambda (app$153) ((lambda (v.7$46$154) ((lambda (w.8$47$156 pat-ls10$49$157 body-ls11$50$158) ((lambda (lp.9$48$159) (set! lp.9$48$159 (lambda (w.8$47$160 pat-ls10$49$161 body-ls11$50$162) (if (null? w.8$47$160) ((lambda (pat$163 body$164) (cons (cons-source (rename$33$76 (quote let)) (cons-source (cons-source (cons-source (rename$33$76 (quote v)) (cons-source app$153 (quote ()) (quote ((app ...)))) (quote (v (app ...)))) (quote ()) (quote ((v (app ...))))) (cons-source (cons-source (rename$33$76 (quote match-next)) (cons-source (rename$33$76 (quote v)) (cons-source (cons-source app$153 (cons-source (cons-source (rename$33$76 (quote set!)) (cons-source app$153 (quote ()) (quote ((app ...)))) (quote (set! (app ...)))) (quote ()) (quote ((set! (app ...))))) (quote ((app ...) (set! (app ...))))) (map (lambda (pat$165 body$166) (cons-source pat$165 body$166 (quote (pat . body)))) pat$163 body$164) (quote (((app ...) (set! (app ...))) (pat . body) ...))) (quote (v ((app ...) (set! (app ...))) (pat . body) ...))) (quote (match-next v ((app ...) (set! (app ...))) (pat . body) ...))) (quote ()) (quote ((match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) (quote (let ((v (app ...))) (match-next v ((app ...) (set! (app ...))) (pat . body) ...)))) #f)) (reverse pat-ls10$49$161) (reverse body-ls11$50$162)) (if (pair? w.8$47$160) ((lambda (v.12$51$168) (if (pair? v.12$51$168) ((lambda (v.13$52$170) ((lambda (pat$171) ((lambda (v.14$53$172) ((lambda (body$173) (lp.9$48$159 (cdr w.8$47$160) (cons pat$171 pat-ls10$49$161) (cons body$173 body-ls11$50$162))) v.14$53$172)) (cdr v.12$51$168))) v.13$52$170)) (car v.12$51$168)) #f)) (car w.8$47$160)) #f)))) (lp.9$48$159 w.8$47$156 pat-ls10$49$157 body-ls11$50$158)) #f)) v.7$46$154 (quote ()) (quote ()))) (cdr v.5$44$149))) v.6$45$151) #f)) (car v.5$44$149)) #f)) (cdr expr$32$75))))) ((lambda (v.2$41$174) (if (pair? v.2$41$174) ((lambda (v.3$42$176) ((lambda (atom$177) ((lambda (v.4$43$178) (if (null? v.4$43$178) (cons (cons-source (rename$33$76 (quote match-syntax-error)) (cons-source "no match clauses" (quote ()) (quote ("no match clauses"))) (quote (match-syntax-error "no match clauses"))) #f) #f)) (cdr v.2$41$174))) v.3$42$176)) (car v.2$41$174)) #f)) (cdr expr$32$75))))) ((lambda (v.1$40$180) (if (null? v.1$40$180) (cons (cons-source (rename$33$76 (quote match-syntax-error)) (cons-source "missing match expression" (quote ()) (quote ("missing match expression"))) (quote (match-syntax-error "missing match expression"))) #f) #f)) (cdr expr$32$75))))) (match-syntax-error lambda (expr$5$14 rename$6$15 compare$7$16) (car ((lambda (tmp$18$20) (if tmp$18$20 tmp$18$20 (cons (error/loc "no expansion for" expr$5$14) #f))) ((lambda (v.1$13$21) (if (null? v.1$13$21) (cons (cons-source (rename$6$15 (quote match-syntax-error)) (cons-source "invalid match-syntax-error usage" (quote ()) (quote ("invalid match-syntax-error usage"))) (quote (match-syntax-error "invalid match-syntax-error usage"))) #f) #f)) (cdr expr$5$14))))))